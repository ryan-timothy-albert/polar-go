overlay: 1.0.0
info:
  title: CodeSamples overlay for go target
  version: 0.0.0
actions:
  - target: $["paths"]["/v1/advertisements/"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "list"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Advertisements.List(ctx, \"<value>\", nil, nil, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.AdvertisementCampaignListResource != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
  - target: $["paths"]["/v1/advertisements/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "get"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Advertisements.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.AdvertisementCampaign != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/benefits/"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "list"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Benefits.List(ctx, nil, nil, nil, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceBenefit != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
  - target: $["paths"]["/v1/benefits/"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "create"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Benefits.Create(ctx, components.CreateBenefitCreateBenefitDownloadablesCreate(\n        components.BenefitDownloadablesCreate{\n            Description: \"yuck forager beneath please shadowy foodstuffs welcome\",\n            Properties: components.BenefitDownloadablesCreateProperties{\n                Files: []string{\n                    \"<value>\",\n                },\n            },\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Benefit != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/benefits/{id}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "delete"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Benefits.Delete(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/benefits/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "get"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Benefits.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Benefit != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/benefits/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "update"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Benefits.Update(ctx, \"<value>\", operations.CreateBenefitsUpdateBenefitUpdateBenefitGitHubRepositoryUpdate(\n        components.BenefitGitHubRepositoryUpdate{\n            Properties: &components.BenefitGitHubRepositoryCreateProperties{\n                RepositoryOwner: \"polarsource\",\n                RepositoryName: \"private_repo\",\n                Permission: components.BenefitGitHubRepositoryCreatePropertiesPermissionTriage,\n            },\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Benefit != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/benefits/{id}/grants"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "grants"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Benefits.Grants(ctx, operations.BenefitsGrantsRequest{\n        ID: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceBenefitGrant != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
  - target: $["paths"]["/v1/checkout-links/"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "list"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CheckoutLinks.List(ctx, operations.CheckoutLinksListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceCheckoutLink != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
  - target: $["paths"]["/v1/checkout-links/"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "create"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CheckoutLinks.Create(ctx, components.CreateCheckoutLinkCreateCheckoutLinkPriceCreate(\n        components.CheckoutLinkPriceCreate{\n            ProductPriceID: \"<value>\",\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CheckoutLink != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/checkout-links/{id}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "delete"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CheckoutLinks.Delete(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/checkout-links/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "get"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CheckoutLinks.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CheckoutLink != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/checkout-links/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "update"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CheckoutLinks.Update(ctx, \"<value>\", components.CheckoutLinkUpdate{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CheckoutLink != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/checkouts/custom/"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "list"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Checkouts.Custom.List(ctx, operations.CheckoutsCustomListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceCheckout != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
  - target: $["paths"]["/v1/checkouts/custom/"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "create"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Checkouts.Custom.Create(ctx, components.CreateCheckoutCreateCheckoutPriceCreate(\n        components.CheckoutPriceCreate{\n            ProductPriceID: \"<value>\",\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Checkout != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/checkouts/custom/client/{client_secret}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "client_get"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Checkouts.Custom.ClientGet(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CheckoutPublic != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/checkouts/custom/client/{client_secret}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "client_update"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Checkouts.Custom.ClientUpdate(ctx, \"<value>\", components.CheckoutUpdatePublic{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CheckoutPublic != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/checkouts/custom/client/{client_secret}/confirm"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "client_confirm"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Checkouts.Custom.ClientConfirm(ctx, \"<value>\", components.CheckoutConfirmStripe{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CheckoutPublicConfirmed != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/checkouts/custom/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "get"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Checkouts.Custom.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Checkout != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/checkouts/custom/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "update"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Checkouts.Custom.Update(ctx, \"<value>\", components.CheckoutUpdate{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Checkout != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/custom-fields/"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "list"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomFields.List(ctx, operations.CustomFieldsListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceCustomField != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
  - target: $["paths"]["/v1/custom-fields/"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "create"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomFields.Create(ctx, components.CreateCustomFieldCreateCustomFieldCreateSelect(\n        components.CustomFieldCreateSelect{\n            Slug: \"<value>\",\n            Name: \"<value>\",\n            Properties: components.CustomFieldSelectProperties{\n                Options: []components.CustomFieldSelectOption{\n                    components.CustomFieldSelectOption{\n                        Value: \"<value>\",\n                        Label: \"<value>\",\n                    },\n                },\n            },\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomField != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/custom-fields/{id}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "delete"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomFields.Delete(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/custom-fields/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "get"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomFields.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomField != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/custom-fields/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "update"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomFields.Update(ctx, \"<value>\", components.CreateCustomFieldUpdateCustomFieldUpdateNumber(\n        components.CustomFieldUpdateNumber{},\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomField != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/customer-portal/benefit-grants/"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "list"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.BenefitGrants.List(ctx, operations.CustomerPortalBenefitGrantsListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceCustomerBenefitGrant != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
  - target: $["paths"]["/v1/customer-portal/benefit-grants/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "get"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.BenefitGrants.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerBenefitGrant != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/customer-portal/benefit-grants/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "update"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.BenefitGrants.Update(ctx, \"<value>\", components.CreateCustomerBenefitGrantUpdateCustomerBenefitGrantDownloadablesUpdate(\n        components.CustomerBenefitGrantDownloadablesUpdate{},\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerBenefitGrant != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/customer-portal/customers/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "get"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.Customers.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerPortalCustomer != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/customer-portal/downloadables/"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "list"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.Downloadables.List(ctx, nil, nil, nil, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceDownloadableRead != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
  - target: $["paths"]["/v1/customer-portal/downloadables/{token}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "get"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.Downloadables.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/customer-portal/license-keys/"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "list"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.LicenseKeys.List(ctx, nil, nil, nil, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceLicenseKeyRead != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
  - target: $["paths"]["/v1/customer-portal/license-keys/activate"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "activate"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.LicenseKeys.Activate(ctx, components.LicenseKeyActivate{\n        Key: \"<key>\",\n        OrganizationID: \"<value>\",\n        Label: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.LicenseKeyActivationRead != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/customer-portal/license-keys/deactivate"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "deactivate"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.LicenseKeys.Deactivate(ctx, components.LicenseKeyDeactivate{\n        Key: \"<key>\",\n        OrganizationID: \"<value>\",\n        ActivationID: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/customer-portal/license-keys/validate"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "validate"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.LicenseKeys.Validate(ctx, components.LicenseKeyValidate{\n        Key: \"<key>\",\n        OrganizationID: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ValidatedLicenseKey != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/customer-portal/license-keys/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "get"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.LicenseKeys.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.LicenseKeyWithActivations != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/customer-portal/orders/"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "list"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.Orders.List(ctx, operations.CustomerPortalOrdersListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceCustomerOrder != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
  - target: $["paths"]["/v1/customer-portal/orders/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "get"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.Orders.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerOrder != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/customer-portal/orders/{id}/invoice"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "invoice"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.Orders.Invoice(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerOrderInvoice != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/customer-portal/organizations/{slug}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "get"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.Organizations.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Organization != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/customer-portal/subscriptions/"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "list"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.Subscriptions.List(ctx, operations.CustomerPortalSubscriptionsListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceCustomerSubscription != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
  - target: $["paths"]["/v1/customer-portal/subscriptions/{id}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "cancel"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.Subscriptions.Cancel(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerSubscription != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/customer-portal/subscriptions/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "get"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.Subscriptions.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerSubscription != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/customer-portal/subscriptions/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "update"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.CustomerPortal.Subscriptions.Update(ctx, \"<value>\", components.CustomerSubscriptionUpdate{\n        ProductPriceID: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CustomerSubscription != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/customers/"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "list"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Customers.List(ctx, operations.CustomersListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceCustomer != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
  - target: $["paths"]["/v1/customers/"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "create"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Customers.Create(ctx, components.CustomerCreate{\n        Email: \"Loyal79@yahoo.com\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Customer != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/customers/{id}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "delete"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Customers.Delete(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/customers/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "get"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Customers.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Customer != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/customers/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "update"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Customers.Update(ctx, \"<value>\", components.CustomerUpdate{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Customer != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/discounts/"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "list"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Discounts.List(ctx, operations.DiscountsListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceDiscount != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
  - target: $["paths"]["/v1/discounts/"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "create"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Discounts.Create(ctx, components.CreateDiscountCreateDiscountFixedRepeatDurationCreate(\n        components.DiscountFixedRepeatDurationCreate{\n            Duration: components.DiscountDurationForever,\n            DurationInMonths: 417458,\n            Type: components.DiscountTypeFixed,\n            Amount: 69025,\n            Name: \"<value>\",\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Discount != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/discounts/{id}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "delete"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Discounts.Delete(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/discounts/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "get"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Discounts.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Discount != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/discounts/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "update"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Discounts.Update(ctx, \"<value>\", components.DiscountUpdate{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Discount != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/external_organizations/"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "list"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.ExternalOrganizations.List(ctx, operations.ExternalOrganizationsListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceExternalOrganization != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
  - target: $["paths"]["/v1/files/"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "list"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Files.List(ctx, nil, nil, nil, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceFileRead != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
  - target: $["paths"]["/v1/files/"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "create"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Files.Create(ctx, components.CreateFileCreateProductMediaFileCreate(\n        components.ProductMediaFileCreate{\n            Name: \"<value>\",\n            MimeType: \"<value>\",\n            Size: 951062,\n            Upload: components.S3FileCreateMultipart{\n                Parts: []components.S3FileCreatePart{\n                    components.S3FileCreatePart{\n                        Number: 86,\n                        ChunkStart: 169727,\n                        ChunkEnd: 89964,\n                    },\n                },\n            },\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.FileUpload != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/files/{id}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "delete"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Files.Delete(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/files/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "update"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Files.Update(ctx, \"<value>\", components.FilePatch{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ResponseFilesUpdate != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/files/{id}/uploaded"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "uploaded"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Files.Uploaded(ctx, \"<value>\", components.FileUploadCompleted{\n        ID: \"<id>\",\n        Path: \"/sys\",\n        Parts: []components.S3FileUploadCompletedPart{\n            components.S3FileUploadCompletedPart{\n                Number: 173116,\n                ChecksumEtag: \"<value>\",\n                ChecksumSha256Base64: polargo.String(\"<value>\"),\n            },\n            components.S3FileUploadCompletedPart{\n                Number: 894030,\n                ChecksumEtag: \"<value>\",\n                ChecksumSha256Base64: polargo.String(\"<value>\"),\n            },\n            components.S3FileUploadCompletedPart{\n                Number: 673715,\n                ChecksumEtag: \"<value>\",\n                ChecksumSha256Base64: polargo.String(\"<value>\"),\n            },\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ResponseFilesUploaded != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/license-keys"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "list"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.LicenseKeys.List(ctx, nil, nil, nil, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceLicenseKeyRead != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
  - target: $["paths"]["/v1/license-keys/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "get"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.LicenseKeys.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.LicenseKeyWithActivations != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/license-keys/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "update"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.LicenseKeys.Update(ctx, \"<value>\", components.LicenseKeyUpdate{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.LicenseKeyRead != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/license-keys/{id}/activations/{activation_id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "get_activation"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.LicenseKeys.GetActivation(ctx, \"<value>\", \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.LicenseKeyActivationRead != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/metrics/"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "get"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/types\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Metrics.Get(ctx, operations.MetricsGetRequest{\n        StartDate: types.MustDateFromString(\"2024-02-07\"),\n        EndDate: types.MustDateFromString(\"2023-09-05\"),\n        Interval: components.IntervalWeek,\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.MetricsResponse != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/metrics/limits"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "limits"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Metrics.Limits(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.MetricsLimits != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/oauth2/"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "list"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Clients.List(ctx, nil, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceOAuth2Client != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
  - target: $["paths"]["/v1/oauth2/authorize"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "authorize"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Authorize(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ResponseOauth2Authorize != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/oauth2/introspect"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "introspect_token"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Introspect(ctx, operations.Oauth2IntrospectTokenIntrospectTokenRequest{\n        Token: \"<value>\",\n        ClientID: \"<id>\",\n        ClientSecret: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.IntrospectTokenResponse != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/oauth2/register"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "create_client"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Clients.Create(ctx, components.OAuth2ClientConfiguration{\n        RedirectUris: []string{\n            \"https://inferior-chainstay.com\",\n        },\n        ClientName: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/oauth2/register/{client_id}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "delete_client"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Clients.Delete(ctx, \"<id>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/oauth2/register/{client_id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "get_client"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Clients.Get(ctx, \"<id>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/oauth2/register/{client_id}"]["put"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "update_client"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Clients.Update(ctx, \"<id>\", components.OAuth2ClientConfigurationUpdate{\n        RedirectUris: []string{\n            \"https://grown-worth.name\",\n            \"https://worthwhile-avalanche.org/\",\n            \"https://general-digit.com/\",\n        },\n        ClientName: \"<value>\",\n        ClientID: \"<id>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/oauth2/revoke"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "revoke_token"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Revoke(ctx, operations.Oauth2RevokeTokenRevokeTokenRequest{\n        Token: \"<value>\",\n        ClientID: \"<id>\",\n        ClientSecret: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.RevokeTokenResponse != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/oauth2/token"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "request_token"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Token(ctx, operations.CreateOauth2RequestTokenRequestBodyOnev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest(\n        components.Onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest{\n            ClientID: \"<id>\",\n            ClientSecret: \"<value>\",\n            Code: \"<value>\",\n            RedirectURI: \"https://talkative-barracks.com\",\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.TokenResponse != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/oauth2/userinfo"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "userinfo"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Oauth2.Userinfo(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ResponseOauth2Userinfo != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/orders/"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "list"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Orders.List(ctx, operations.OrdersListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceOrder != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
  - target: $["paths"]["/v1/orders/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "get"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Orders.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Order != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/orders/{id}/invoice"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "invoice"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Orders.Invoice(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.OrderInvoice != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/organizations/"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "list"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Organizations.List(ctx, nil, nil, nil, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceOrganization != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
  - target: $["paths"]["/v1/organizations/"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "create"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Organizations.Create(ctx, components.OrganizationCreate{\n        Name: \"<value>\",\n        Slug: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Organization != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/organizations/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "get"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Organizations.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Organization != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/organizations/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "update"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Organizations.Update(ctx, \"<value>\", components.OrganizationUpdate{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Organization != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/products/"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "list"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Products.List(ctx, operations.ProductsListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceProduct != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
  - target: $["paths"]["/v1/products/"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "create"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Products.Create(ctx, components.CreateProductCreateProductRecurringCreate(\n        components.ProductRecurringCreate{\n            Name: \"<value>\",\n            Prices: components.CreateProductRecurringCreatePricesArrayOfProductPriceRecurringFixedCreate(\n                []components.ProductPriceRecurringFixedCreate{\n                    components.ProductPriceRecurringFixedCreate{\n                        PriceAmount: 796474,\n                        RecurringInterval: components.SubscriptionRecurringIntervalYear,\n                    },\n                },\n            ),\n        },\n    ))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Product != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/products/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "get"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Products.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Product != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/products/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "update"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Products.Update(ctx, \"<value>\", components.ProductUpdate{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Product != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/products/{id}/benefits"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "update_benefits"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Products.UpdateBenefits(ctx, \"<value>\", components.ProductBenefitsUpdate{\n        Benefits: []string{\n            \"<value>\",\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Product != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/repositories/"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "list"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Repositories.List(ctx, operations.RepositoriesListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceRepository != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
  - target: $["paths"]["/v1/repositories/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "get"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Repositories.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Repository != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/repositories/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "update"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Repositories.Update(ctx, \"<value>\", components.RepositoryUpdate{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Repository != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["/v1/subscriptions/"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "list"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Subscriptions.List(ctx, operations.SubscriptionsListRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceSubscription != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
  - target: $["paths"]["/v1/subscriptions/export"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "export"
          "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Subscriptions.Export(ctx, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["benefit.created"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "_endpointbenefit_created_post"
          "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/types\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New()\n\n    res, err := s.EndpointbenefitCreatedPost(ctx, components.WebhookBenefitCreatedPayload{\n        Data: components.CreateBenefitBenefitDiscord(\n            components.BenefitDiscord{\n                CreatedAt: types.MustTimeFromString(\"2022-04-06T19:25:41.598Z\"),\n                ModifiedAt: types.MustNewTimeFromString(\"2023-09-12T07:25:54.518Z\"),\n                ID: \"<value>\",\n                Description: \"log uproot pointless pfft solace besides\",\n                Selectable: false,\n                Deletable: false,\n                OrganizationID: \"<value>\",\n                Properties: components.BenefitDiscordProperties{\n                    GuildID: \"<id>\",\n                    RoleID: \"<id>\",\n                    GuildToken: \"<value>\",\n                },\n            },\n        ),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["benefit.updated"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "_endpointbenefit_updated_post"
          "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/types\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New()\n\n    res, err := s.EndpointbenefitUpdatedPost(ctx, components.WebhookBenefitUpdatedPayload{\n        Data: components.CreateBenefitBenefitLicenseKeys(\n            components.BenefitLicenseKeys{\n                CreatedAt: types.MustTimeFromString(\"2022-04-01T23:52:01.692Z\"),\n                ModifiedAt: types.MustNewTimeFromString(\"2024-01-28T14:40:26.364Z\"),\n                ID: \"<value>\",\n                Description: \"until overconfidently masquerade once\",\n                Selectable: false,\n                Deletable: false,\n                OrganizationID: \"<value>\",\n                Properties: components.BenefitLicenseKeysProperties{\n                    Prefix: polargo.String(\"<value>\"),\n                    Expires: &components.BenefitLicenseKeyExpirationProperties{\n                        TTL: 424968,\n                        Timeframe: components.TimeframeYear,\n                    },\n                    Activations: &components.BenefitLicenseKeyActivationProperties{\n                        Limit: 735229,\n                        EnableCustomerAdmin: false,\n                    },\n                    LimitUsage: polargo.Int64(923317),\n                },\n            },\n        ),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["benefit_grant.created"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "_endpointbenefit_grant_created_post"
          "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/types\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New()\n\n    res, err := s.EndpointbenefitGrantCreatedPost(ctx, components.WebhookBenefitGrantCreatedPayload{\n        Data: components.BenefitGrantWebhook{\n            CreatedAt: types.MustTimeFromString(\"2024-01-05T13:03:27.870Z\"),\n            ModifiedAt: types.MustNewTimeFromString(\"2022-05-08T00:47:14.556Z\"),\n            ID: \"<value>\",\n            IsGranted: true,\n            IsRevoked: false,\n            SubscriptionID: polargo.String(\"<value>\"),\n            OrderID: polargo.String(\"<value>\"),\n            CustomerID: \"<value>\",\n            UserID: \"<value>\",\n            BenefitID: \"<value>\",\n            Properties: components.CreateBenefitGrantWebhookPropertiesBenefitGrantDiscordProperties(\n                components.BenefitGrantDiscordProperties{},\n            ),\n            Benefit: components.CreateBenefitBenefitLicenseKeys(\n                components.BenefitLicenseKeys{\n                    CreatedAt: types.MustTimeFromString(\"2022-11-17T13:58:04.744Z\"),\n                    ModifiedAt: types.MustNewTimeFromString(\"2024-01-29T12:08:54.434Z\"),\n                    ID: \"<value>\",\n                    Description: \"svelte oh yuck rebel mountain likewise since\",\n                    Selectable: false,\n                    Deletable: false,\n                    OrganizationID: \"<value>\",\n                    Properties: components.BenefitLicenseKeysProperties{\n                        Prefix: polargo.String(\"<value>\"),\n                        Expires: &components.BenefitLicenseKeyExpirationProperties{\n                            TTL: 477461,\n                            Timeframe: components.TimeframeYear,\n                        },\n                        Activations: &components.BenefitLicenseKeyActivationProperties{\n                            Limit: 680981,\n                            EnableCustomerAdmin: false,\n                        },\n                        LimitUsage: polargo.Int64(301013),\n                    },\n                },\n            ),\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["benefit_grant.revoked"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "_endpointbenefit_grant_revoked_post"
          "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/types\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New()\n\n    res, err := s.EndpointbenefitGrantRevokedPost(ctx, components.WebhookBenefitGrantRevokedPayload{\n        Data: components.BenefitGrantWebhook{\n            CreatedAt: types.MustTimeFromString(\"2024-03-12T10:35:36.881Z\"),\n            ModifiedAt: types.MustNewTimeFromString(\"2024-04-12T13:10:16.426Z\"),\n            ID: \"<value>\",\n            IsGranted: true,\n            IsRevoked: false,\n            SubscriptionID: polargo.String(\"<value>\"),\n            OrderID: polargo.String(\"<value>\"),\n            CustomerID: \"<value>\",\n            UserID: \"<value>\",\n            BenefitID: \"<value>\",\n            Properties: components.CreateBenefitGrantWebhookPropertiesBenefitGrantAdsProperties(\n                components.BenefitGrantAdsProperties{\n                    AdvertisementCampaignID: \"<id>\",\n                },\n            ),\n            Benefit: components.CreateBenefitBenefitLicenseKeys(\n                components.BenefitLicenseKeys{\n                    CreatedAt: types.MustTimeFromString(\"2024-01-25T10:59:47.946Z\"),\n                    ModifiedAt: types.MustNewTimeFromString(\"2024-10-10T13:39:07.288Z\"),\n                    ID: \"<value>\",\n                    Description: \"brr obsess unbearably\",\n                    Selectable: false,\n                    Deletable: false,\n                    OrganizationID: \"<value>\",\n                    Properties: components.BenefitLicenseKeysProperties{\n                        Prefix: polargo.String(\"<value>\"),\n                        Expires: &components.BenefitLicenseKeyExpirationProperties{\n                            TTL: 339630,\n                            Timeframe: components.TimeframeDay,\n                        },\n                        Activations: &components.BenefitLicenseKeyActivationProperties{\n                            Limit: 343928,\n                            EnableCustomerAdmin: false,\n                        },\n                        LimitUsage: polargo.Int64(429815),\n                    },\n                },\n            ),\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["benefit_grant.updated"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "_endpointbenefit_grant_updated_post"
          "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/types\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New()\n\n    res, err := s.EndpointbenefitGrantUpdatedPost(ctx, components.WebhookBenefitGrantUpdatedPayload{\n        Data: components.BenefitGrantWebhook{\n            CreatedAt: types.MustTimeFromString(\"2024-01-03T13:54:42.243Z\"),\n            ModifiedAt: types.MustNewTimeFromString(\"2023-02-25T11:58:59.486Z\"),\n            ID: \"<value>\",\n            IsGranted: false,\n            IsRevoked: false,\n            SubscriptionID: polargo.String(\"<value>\"),\n            OrderID: polargo.String(\"<value>\"),\n            CustomerID: \"<value>\",\n            UserID: \"<value>\",\n            BenefitID: \"<value>\",\n            Properties: components.CreateBenefitGrantWebhookPropertiesBenefitGrantLicenseKeysProperties(\n                components.BenefitGrantLicenseKeysProperties{},\n            ),\n            Benefit: components.CreateBenefitBenefitAds(\n                components.BenefitAds{\n                    CreatedAt: types.MustTimeFromString(\"2022-12-17T22:29:17.144Z\"),\n                    ModifiedAt: types.MustNewTimeFromString(\"2022-05-01T18:11:33.063Z\"),\n                    ID: \"<value>\",\n                    Description: \"watery lest whether that stealthily ack woot provided\",\n                    Selectable: false,\n                    Deletable: false,\n                    OrganizationID: \"<value>\",\n                    Properties: components.BenefitAdsProperties{},\n                },\n            ),\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["checkout.created"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "_endpointcheckout_created_post"
          "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/types\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New()\n\n    res, err := s.EndpointcheckoutCreatedPost(ctx, components.WebhookCheckoutCreatedPayload{\n        Data: components.Checkout{\n            CreatedAt: types.MustTimeFromString(\"2024-11-12T14:26:42.882Z\"),\n            ModifiedAt: types.MustNewTimeFromString(\"2023-05-28T05:08:06.235Z\"),\n            ID: \"<value>\",\n            Status: components.CheckoutStatusFailed,\n            ClientSecret: \"<value>\",\n            URL: \"https://heavy-beret.com/\",\n            ExpiresAt: types.MustTimeFromString(\"2022-02-25T02:26:48.460Z\"),\n            SuccessURL: \"https://sardonic-final.info/\",\n            EmbedOrigin: polargo.String(\"<value>\"),\n            Amount: polargo.Int64(962818),\n            TaxAmount: polargo.Int64(6400),\n            Currency: polargo.String(\"Yen\"),\n            SubtotalAmount: polargo.Int64(648726),\n            TotalAmount: polargo.Int64(210702),\n            ProductID: \"<value>\",\n            ProductPriceID: \"<value>\",\n            DiscountID: polargo.String(\"<value>\"),\n            AllowDiscountCodes: true,\n            IsDiscountApplicable: false,\n            IsFreeProductPrice: false,\n            IsPaymentRequired: false,\n            IsPaymentSetupRequired: false,\n            IsPaymentFormRequired: false,\n            CustomerID: polargo.String(\"<value>\"),\n            CustomerName: polargo.String(\"<value>\"),\n            CustomerEmail: polargo.String(\"Ryley_Erdman@hotmail.com\"),\n            CustomerIPAddress: polargo.String(\"<value>\"),\n            CustomerBillingAddress: &components.Address{\n                Country: \"South Africa\",\n            },\n            CustomerTaxID: polargo.String(\"<id>\"),\n            PaymentProcessorMetadata: components.PaymentProcessorMetadata{},\n            Metadata: map[string]components.CheckoutMetadata{\n                \"key\": components.CreateCheckoutMetadataInteger(\n                    18677,\n                ),\n                \"key1\": components.CreateCheckoutMetadataInteger(\n                    95370,\n                ),\n            },\n            Product: components.CheckoutProduct{\n                CreatedAt: types.MustTimeFromString(\"2022-04-02T00:05:42.586Z\"),\n                ModifiedAt: types.MustNewTimeFromString(\"2023-12-16T03:02:38.803Z\"),\n                ID: \"<value>\",\n                Name: \"<value>\",\n                Description: polargo.String(\"for embarrassment untidy long-term near honestly separate yet\"),\n                IsRecurring: true,\n                IsArchived: false,\n                OrganizationID: \"<value>\",\n                Prices: []components.ProductPrice{\n                    components.CreateProductPriceProductPriceOneTime(\n                        components.CreateProductPriceOneTimeProductPriceOneTimeCustom(\n                            components.ProductPriceOneTimeCustom{\n                                CreatedAt: types.MustTimeFromString(\"2023-02-07T04:30:48.802Z\"),\n                                ModifiedAt: types.MustNewTimeFromString(\"2024-06-25T22:47:14.264Z\"),\n                                ID: \"<value>\",\n                                IsArchived: false,\n                                ProductID: \"<value>\",\n                                PriceCurrency: \"<value>\",\n                                MinimumAmount: polargo.Int64(691423),\n                                MaximumAmount: polargo.Int64(499526),\n                                PresetAmount: polargo.Int64(18677),\n                            },\n                        ),\n                    ),\n                },\n                Benefits: []components.BenefitBase{\n                    components.BenefitBase{\n                        CreatedAt: types.MustTimeFromString(\"2023-08-22T00:47:02.059Z\"),\n                        ModifiedAt: types.MustNewTimeFromString(\"2023-06-04T10:32:44.101Z\"),\n                        ID: \"<value>\",\n                        Type: components.BenefitTypeLicenseKeys,\n                        Description: \"within jacket unless\",\n                        Selectable: false,\n                        Deletable: false,\n                        OrganizationID: \"<value>\",\n                    },\n                },\n                Medias: []components.ProductMediaFileRead{\n                    components.ProductMediaFileRead{\n                        ID: \"<value>\",\n                        OrganizationID: \"<value>\",\n                        Name: \"<value>\",\n                        Path: \"/private/var\",\n                        MimeType: \"<value>\",\n                        Size: 245189,\n                        StorageVersion: polargo.String(\"<value>\"),\n                        ChecksumEtag: polargo.String(\"<value>\"),\n                        ChecksumSha256Base64: polargo.String(\"<value>\"),\n                        ChecksumSha256Hex: polargo.String(\"<value>\"),\n                        LastModifiedAt: types.MustNewTimeFromString(\"2022-11-03T15:00:03.276Z\"),\n                        Version: polargo.String(\"<value>\"),\n                        IsUploaded: false,\n                        CreatedAt: types.MustTimeFromString(\"2024-06-07T13:47:02.365Z\"),\n                        SizeReadable: \"<value>\",\n                        PublicURL: \"https://webbed-experience.name/\",\n                    },\n                },\n            },\n            ProductPrice: components.CreateProductPriceProductPriceOneTime(\n                components.CreateProductPriceOneTimeProductPriceOneTimeFixed(\n                    components.ProductPriceOneTimeFixed{\n                        CreatedAt: types.MustTimeFromString(\"2022-04-02T00:05:42.586Z\"),\n                        ModifiedAt: types.MustNewTimeFromString(\"2023-12-16T03:02:38.803Z\"),\n                        ID: \"<value>\",\n                        IsArchived: false,\n                        ProductID: \"<value>\",\n                        PriceCurrency: \"<value>\",\n                        PriceAmount: 740296,\n                    },\n                ),\n            ),\n            Discount: components.CreateCheckoutDiscountCheckoutDiscountPercentageOnceForeverDuration(\n                components.CheckoutDiscountPercentageOnceForeverDuration{\n                    Duration: components.DiscountDurationRepeating,\n                    Type: components.DiscountTypeFixed,\n                    BasisPoints: 341163,\n                    ID: \"<value>\",\n                    Name: \"<value>\",\n                    Code: polargo.String(\"<value>\"),\n                },\n            ),\n            SubscriptionID: polargo.String(\"<value>\"),\n            AttachedCustomFields: []components.AttachedCustomField{\n                components.AttachedCustomField{\n                    CustomFieldID: \"<value>\",\n                    CustomField: components.CreateCustomFieldCustomFieldNumber(\n                        components.CustomFieldNumber{\n                            CreatedAt: types.MustTimeFromString(\"2024-06-23T16:57:50.081Z\"),\n                            ModifiedAt: types.MustNewTimeFromString(\"2023-12-14T18:25:33.693Z\"),\n                            ID: \"<value>\",\n                            Metadata: map[string]components.CustomFieldNumberMetadata{\n                                \"key\": components.CreateCustomFieldNumberMetadataStr(\n                                    \"<value>\",\n                                ),\n                            },\n                            Slug: \"<value>\",\n                            Name: \"<value>\",\n                            OrganizationID: \"<value>\",\n                            Properties: components.CustomFieldNumberProperties{},\n                        },\n                    ),\n                    Order: 996863,\n                    Required: false,\n                },\n                components.AttachedCustomField{\n                    CustomFieldID: \"<value>\",\n                    CustomField: components.CreateCustomFieldCustomFieldSelect(\n                        components.CustomFieldSelect{\n                            CreatedAt: types.MustTimeFromString(\"2022-04-26T22:34:57.487Z\"),\n                            ModifiedAt: types.MustNewTimeFromString(\"2022-08-07T19:57:51.694Z\"),\n                            ID: \"<value>\",\n                            Metadata: map[string]components.CustomFieldSelectMetadata{\n                                \"key\": components.CreateCustomFieldSelectMetadataInteger(\n                                    856200,\n                                ),\n                            },\n                            Slug: \"<value>\",\n                            Name: \"<value>\",\n                            OrganizationID: \"<value>\",\n                            Properties: components.CustomFieldSelectProperties{\n                                Options: []components.CustomFieldSelectOption{\n                                    components.CustomFieldSelectOption{\n                                        Value: \"<value>\",\n                                        Label: \"<value>\",\n                                    },\n                                },\n                            },\n                        },\n                    ),\n                    Order: 72589,\n                    Required: true,\n                },\n                components.AttachedCustomField{\n                    CustomFieldID: \"<value>\",\n                    CustomField: components.CreateCustomFieldCustomFieldCheckbox(\n                        components.CustomFieldCheckbox{\n                            CreatedAt: types.MustTimeFromString(\"2024-05-25T15:20:50.694Z\"),\n                            ModifiedAt: types.MustNewTimeFromString(\"2023-11-28T14:29:40.329Z\"),\n                            ID: \"<value>\",\n                            Metadata: map[string]components.CustomFieldCheckboxMetadata{\n                                \"key\": components.CreateCustomFieldCheckboxMetadataBoolean(\n                                    false,\n                                ),\n                            },\n                            Slug: \"<value>\",\n                            Name: \"<value>\",\n                            OrganizationID: \"<value>\",\n                            Properties: components.CustomFieldCheckboxProperties{},\n                        },\n                    ),\n                    Order: 161325,\n                    Required: true,\n                },\n            },\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["checkout.updated"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "_endpointcheckout_updated_post"
          "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/types\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New()\n\n    res, err := s.EndpointcheckoutUpdatedPost(ctx, components.WebhookCheckoutUpdatedPayload{\n        Data: components.Checkout{\n            CreatedAt: types.MustTimeFromString(\"2024-10-04T13:06:10.658Z\"),\n            ModifiedAt: types.MustNewTimeFromString(\"2023-10-03T21:25:15.366Z\"),\n            ID: \"<value>\",\n            Status: components.CheckoutStatusFailed,\n            ClientSecret: \"<value>\",\n            URL: \"https://square-cafe.biz/\",\n            ExpiresAt: types.MustTimeFromString(\"2024-03-25T08:55:11.873Z\"),\n            SuccessURL: \"https://physical-import.name/\",\n            EmbedOrigin: polargo.String(\"<value>\"),\n            Amount: polargo.Int64(245418),\n            TaxAmount: polargo.Int64(624213),\n            Currency: polargo.String(\"Naira\"),\n            SubtotalAmount: polargo.Int64(24587),\n            TotalAmount: polargo.Int64(447013),\n            ProductID: \"<value>\",\n            ProductPriceID: \"<value>\",\n            DiscountID: polargo.String(\"<value>\"),\n            AllowDiscountCodes: true,\n            IsDiscountApplicable: true,\n            IsFreeProductPrice: true,\n            IsPaymentRequired: false,\n            IsPaymentSetupRequired: false,\n            IsPaymentFormRequired: true,\n            CustomerID: polargo.String(\"<value>\"),\n            CustomerName: polargo.String(\"<value>\"),\n            CustomerEmail: polargo.String(\"Jairo39@hotmail.com\"),\n            CustomerIPAddress: polargo.String(\"<value>\"),\n            CustomerBillingAddress: &components.Address{\n                Country: \"Greenland\",\n            },\n            CustomerTaxID: polargo.String(\"<id>\"),\n            PaymentProcessorMetadata: components.PaymentProcessorMetadata{},\n            Metadata: map[string]components.CheckoutMetadata{\n\n            },\n            Product: components.CheckoutProduct{\n                CreatedAt: types.MustTimeFromString(\"2024-01-25T14:28:29.444Z\"),\n                ModifiedAt: types.MustNewTimeFromString(\"2024-09-21T12:18:51.327Z\"),\n                ID: \"<value>\",\n                Name: \"<value>\",\n                Description: polargo.String(\"engender reopen yahoo draft\"),\n                IsRecurring: false,\n                IsArchived: true,\n                OrganizationID: \"<value>\",\n                Prices: []components.ProductPrice{\n                    components.CreateProductPriceProductPriceRecurring(\n                        components.CreateProductPriceRecurringProductPriceRecurringCustom(\n                            components.ProductPriceRecurringCustom{\n                                CreatedAt: types.MustTimeFromString(\"2023-04-19T00:52:44.462Z\"),\n                                ModifiedAt: types.MustNewTimeFromString(\"2022-09-21T13:33:23.592Z\"),\n                                ID: \"<value>\",\n                                IsArchived: false,\n                                ProductID: \"<value>\",\n                                PriceCurrency: \"<value>\",\n                                MinimumAmount: polargo.Int64(861868),\n                                MaximumAmount: polargo.Int64(626316),\n                                PresetAmount: polargo.Int64(226088),\n                                RecurringInterval: components.SubscriptionRecurringIntervalYear,\n                            },\n                        ),\n                    ),\n                },\n                Benefits: []components.BenefitBase{\n                    components.BenefitBase{\n                        CreatedAt: types.MustTimeFromString(\"2024-04-09T09:30:36.910Z\"),\n                        ModifiedAt: types.MustNewTimeFromString(\"2022-10-16T19:52:50.377Z\"),\n                        ID: \"<value>\",\n                        Type: components.BenefitTypeGithubRepository,\n                        Description: \"posh hm meatloaf politely ugh fidget to inborn putrid\",\n                        Selectable: false,\n                        Deletable: true,\n                        OrganizationID: \"<value>\",\n                    },\n                    components.BenefitBase{\n                        CreatedAt: types.MustTimeFromString(\"2023-12-31T03:17:46.406Z\"),\n                        ModifiedAt: types.MustNewTimeFromString(\"2022-11-12T16:32:46.306Z\"),\n                        ID: \"<value>\",\n                        Type: components.BenefitTypeLicenseKeys,\n                        Description: \"blah likewise whose notwithstanding airline aboard frightened enfold colorfully\",\n                        Selectable: true,\n                        Deletable: true,\n                        OrganizationID: \"<value>\",\n                    },\n                },\n                Medias: []components.ProductMediaFileRead{\n                    components.ProductMediaFileRead{\n                        ID: \"<value>\",\n                        OrganizationID: \"<value>\",\n                        Name: \"<value>\",\n                        Path: \"/home/user\",\n                        MimeType: \"<value>\",\n                        Size: 767806,\n                        StorageVersion: polargo.String(\"<value>\"),\n                        ChecksumEtag: polargo.String(\"<value>\"),\n                        ChecksumSha256Base64: polargo.String(\"<value>\"),\n                        ChecksumSha256Hex: polargo.String(\"<value>\"),\n                        LastModifiedAt: types.MustNewTimeFromString(\"2023-01-15T18:22:33.094Z\"),\n                        Version: polargo.String(\"<value>\"),\n                        IsUploaded: false,\n                        CreatedAt: types.MustTimeFromString(\"2023-02-14T06:20:54.950Z\"),\n                        SizeReadable: \"<value>\",\n                        PublicURL: \"https://pushy-tomatillo.org/\",\n                    },\n                    components.ProductMediaFileRead{\n                        ID: \"<value>\",\n                        OrganizationID: \"<value>\",\n                        Name: \"<value>\",\n                        Path: \"/private\",\n                        MimeType: \"<value>\",\n                        Size: 432333,\n                        StorageVersion: polargo.String(\"<value>\"),\n                        ChecksumEtag: polargo.String(\"<value>\"),\n                        ChecksumSha256Base64: polargo.String(\"<value>\"),\n                        ChecksumSha256Hex: polargo.String(\"<value>\"),\n                        LastModifiedAt: types.MustNewTimeFromString(\"2023-03-08T18:51:14.729Z\"),\n                        Version: polargo.String(\"<value>\"),\n                        IsUploaded: false,\n                        CreatedAt: types.MustTimeFromString(\"2022-11-18T09:33:10.032Z\"),\n                        SizeReadable: \"<value>\",\n                        PublicURL: \"https://affectionate-charm.net\",\n                    },\n                },\n            },\n            ProductPrice: components.CreateProductPriceProductPriceRecurring(\n                components.CreateProductPriceRecurringProductPriceRecurringFixed(\n                    components.ProductPriceRecurringFixed{\n                        CreatedAt: types.MustTimeFromString(\"2024-04-04T09:36:58.685Z\"),\n                        ModifiedAt: types.MustNewTimeFromString(\"2023-03-13T12:25:44.387Z\"),\n                        ID: \"<value>\",\n                        IsArchived: false,\n                        ProductID: \"<value>\",\n                        PriceCurrency: \"<value>\",\n                        PriceAmount: 396660,\n                        RecurringInterval: components.SubscriptionRecurringIntervalYear,\n                    },\n                ),\n            ),\n            Discount: components.CreateCheckoutDiscountCheckoutDiscountFixedOnceForeverDuration(\n                components.CheckoutDiscountFixedOnceForeverDuration{\n                    Duration: components.DiscountDurationOnce,\n                    Type: components.DiscountTypePercentage,\n                    Amount: 883154,\n                    Currency: \"East Caribbean Dollar\",\n                    ID: \"<value>\",\n                    Name: \"<value>\",\n                    Code: polargo.String(\"<value>\"),\n                },\n            ),\n            SubscriptionID: polargo.String(\"<value>\"),\n            AttachedCustomFields: []components.AttachedCustomField{\n                components.AttachedCustomField{\n                    CustomFieldID: \"<value>\",\n                    CustomField: components.CreateCustomFieldCustomFieldDate(\n                        components.CustomFieldDate{\n                            CreatedAt: types.MustTimeFromString(\"2022-07-11T15:52:54.020Z\"),\n                            ModifiedAt: types.MustNewTimeFromString(\"2024-01-25T14:28:29.444Z\"),\n                            ID: \"<value>\",\n                            Metadata: map[string]components.CustomFieldDateMetadata{\n                                \"key\": components.CreateCustomFieldDateMetadataBoolean(\n                                    false,\n                                ),\n                            },\n                            Slug: \"<value>\",\n                            Name: \"<value>\",\n                            OrganizationID: \"<value>\",\n                            Properties: components.CustomFieldDateProperties{},\n                        },\n                    ),\n                    Order: 108303,\n                    Required: false,\n                },\n            },\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["order.created"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "_endpointorder_created_post"
          "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/types\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New()\n\n    res, err := s.EndpointorderCreatedPost(ctx, components.WebhookOrderCreatedPayload{\n        Data: components.Order{\n            CreatedAt: types.MustTimeFromString(\"2023-11-12T12:46:15.007Z\"),\n            ModifiedAt: types.MustNewTimeFromString(\"2023-03-24T03:54:38.261Z\"),\n            ID: \"<value>\",\n            Metadata: map[string]components.OrderMetadata{\n                \"key\": components.CreateOrderMetadataStr(\n                    \"<value>\",\n                ),\n                \"key1\": components.CreateOrderMetadataStr(\n                    \"<value>\",\n                ),\n            },\n            Amount: 485666,\n            TaxAmount: 81588,\n            Currency: \"Metical\",\n            BillingReason: components.OrderBillingReasonSubscriptionCycle,\n            BillingAddress: &components.Address{\n                Country: \"Hungary\",\n            },\n            CustomerID: \"<value>\",\n            ProductID: \"<value>\",\n            ProductPriceID: \"<value>\",\n            DiscountID: polargo.String(\"<value>\"),\n            SubscriptionID: polargo.String(\"<value>\"),\n            CheckoutID: polargo.String(\"<value>\"),\n            Customer: components.OrderCustomer{\n                CreatedAt: types.MustTimeFromString(\"2022-09-09T08:07:10.665Z\"),\n                ModifiedAt: types.MustNewTimeFromString(\"2023-08-19T18:18:41.438Z\"),\n                ID: \"<value>\",\n                Metadata: map[string]components.OrderCustomerMetadata{\n                    \"key\": components.CreateOrderCustomerMetadataInteger(\n                        24128,\n                    ),\n                    \"key1\": components.CreateOrderCustomerMetadataStr(\n                        \"<value>\",\n                    ),\n                    \"key2\": components.CreateOrderCustomerMetadataStr(\n                        \"<value>\",\n                    ),\n                },\n                Email: \"Gia.Boyer87@yahoo.com\",\n                EmailVerified: false,\n                Name: polargo.String(\"<value>\"),\n                BillingAddress: &components.Address{\n                    Country: \"Reunion\",\n                },\n                TaxID: []components.OrderCustomerTaxID{\n                    components.CreateOrderCustomerTaxIDStr(\n                        \"<value>\",\n                    ),\n                    components.CreateOrderCustomerTaxIDStr(\n                        \"my_sst\",\n                    ),\n                    components.CreateOrderCustomerTaxIDStr(\n                        \"br_cpf\",\n                    ),\n                },\n                OrganizationID: \"<value>\",\n                AvatarURL: \"https://darling-kit.org\",\n            },\n            UserID: \"<value>\",\n            User: components.OrderUser{\n                ID: \"<value>\",\n                Email: \"Delphine_Weber@hotmail.com\",\n                PublicName: \"<value>\",\n            },\n            Product: components.OrderProduct{\n                CreatedAt: types.MustTimeFromString(\"2024-12-27T14:05:37.748Z\"),\n                ModifiedAt: types.MustNewTimeFromString(\"2024-01-02T22:00:53.940Z\"),\n                ID: \"<value>\",\n                Name: \"<value>\",\n                Description: polargo.String(\"circle colorize given\"),\n                IsRecurring: true,\n                IsArchived: true,\n                OrganizationID: \"<value>\",\n            },\n            ProductPrice: components.CreateProductPriceProductPriceRecurring(\n                components.CreateProductPriceRecurringProductPriceRecurringFixed(\n                    components.ProductPriceRecurringFixed{\n                        CreatedAt: types.MustTimeFromString(\"2024-08-11T14:36:04.800Z\"),\n                        ModifiedAt: types.MustNewTimeFromString(\"2022-12-17T11:20:04.235Z\"),\n                        ID: \"<value>\",\n                        IsArchived: false,\n                        ProductID: \"<value>\",\n                        PriceCurrency: \"<value>\",\n                        PriceAmount: 656121,\n                        RecurringInterval: components.SubscriptionRecurringIntervalYear,\n                    },\n                ),\n            ),\n            Discount: components.CreateOrderDiscountDiscountPercentageRepeatDurationBase(\n                components.DiscountPercentageRepeatDurationBase{\n                    Duration: components.DiscountDurationForever,\n                    DurationInMonths: 694649,\n                    Type: components.DiscountTypePercentage,\n                    BasisPoints: 683727,\n                    CreatedAt: types.MustTimeFromString(\"2022-05-22T16:28:34.624Z\"),\n                    ModifiedAt: types.MustNewTimeFromString(\"2024-08-31T17:55:50.952Z\"),\n                    ID: \"<value>\",\n                    Metadata: map[string]components.DiscountPercentageRepeatDurationBaseMetadata{\n                        \"key\": components.CreateDiscountPercentageRepeatDurationBaseMetadataStr(\n                            \"<value>\",\n                        ),\n                    },\n                    Name: \"<value>\",\n                    Code: polargo.String(\"<value>\"),\n                    StartsAt: types.MustNewTimeFromString(\"2023-07-02T07:12:57.258Z\"),\n                    EndsAt: types.MustNewTimeFromString(\"2024-10-22T16:43:41.873Z\"),\n                    MaxRedemptions: polargo.Int64(738266),\n                    RedemptionsCount: 249608,\n                    OrganizationID: \"<value>\",\n                },\n            ),\n            Subscription: &components.OrderSubscription{\n                Metadata: map[string]components.OrderSubscriptionMetadata{\n                    \"key\": components.CreateOrderSubscriptionMetadataInteger(\n                        838937,\n                    ),\n                    \"key1\": components.CreateOrderSubscriptionMetadataBoolean(\n                        true,\n                    ),\n                },\n                CreatedAt: types.MustTimeFromString(\"2024-05-09T06:10:47.548Z\"),\n                ModifiedAt: types.MustNewTimeFromString(\"2024-02-14T18:51:37.875Z\"),\n                ID: \"<value>\",\n                Amount: polargo.Int64(420337),\n                Currency: polargo.String(\"New Zealand Dollar\"),\n                RecurringInterval: components.SubscriptionRecurringIntervalYear,\n                Status: components.SubscriptionStatusIncomplete,\n                CurrentPeriodStart: types.MustTimeFromString(\"2024-12-01T13:27:57.927Z\"),\n                CurrentPeriodEnd: types.MustNewTimeFromString(\"2022-06-23T18:54:19.334Z\"),\n                CancelAtPeriodEnd: false,\n                StartedAt: types.MustNewTimeFromString(\"2023-11-16T11:53:36.436Z\"),\n                EndedAt: types.MustNewTimeFromString(\"2024-11-18T03:47:21.756Z\"),\n                CustomerID: \"<value>\",\n                ProductID: \"<value>\",\n                PriceID: \"<value>\",\n                DiscountID: polargo.String(\"<value>\"),\n                CheckoutID: polargo.String(\"<value>\"),\n                UserID: \"<value>\",\n            },\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["organization.updated"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "_endpointorganization_updated_post"
          "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/types\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New()\n\n    res, err := s.EndpointorganizationUpdatedPost(ctx, components.WebhookOrganizationUpdatedPayload{\n        Data: components.Organization{\n            CreatedAt: types.MustTimeFromString(\"2022-08-12T18:45:04.236Z\"),\n            ModifiedAt: types.MustNewTimeFromString(\"2024-12-29T16:35:25.119Z\"),\n            ID: \"<value>\",\n            Name: \"<value>\",\n            Slug: \"<value>\",\n            AvatarURL: polargo.String(\"https://devoted-bump.net\"),\n            Bio: polargo.String(\"<value>\"),\n            Company: polargo.String(\"Torp, Kuhlman and Howell\"),\n            Blog: polargo.String(\"<value>\"),\n            Location: polargo.String(\"<value>\"),\n            Email: polargo.String(\"Dock_Friesen57@yahoo.com\"),\n            TwitterUsername: polargo.String(\"<value>\"),\n            PledgeMinimumAmount: 105265,\n            PledgeBadgeShowAmount: true,\n            DefaultUpfrontSplitToContributors: polargo.Int64(907160),\n            ProfileSettings: &components.OrganizationProfileSettings{},\n            FeatureSettings: &components.OrganizationFeatureSettings{},\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["pledge.created"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "_endpointpledge_created_post"
          "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/types\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New()\n\n    res, err := s.EndpointpledgeCreatedPost(ctx, components.WebhookPledgeCreatedPayload{\n        Data: components.Pledge{\n            CreatedAt: types.MustTimeFromString(\"2024-03-12T00:19:41.487Z\"),\n            ModifiedAt: types.MustNewTimeFromString(\"2022-04-19T01:42:59.169Z\"),\n            ID: \"<value>\",\n            Amount: 330877,\n            Currency: \"Jamaican Dollar\",\n            State: components.PledgeStateDisputed,\n            Type: components.PledgeTypePayDirectly,\n            Issue: components.Issue{\n                ID: \"66524b69-aa0b-47ac-bb9a-0cee5d3a9110\",\n                Number: 280857,\n                Title: \"<value>\",\n                State: components.StateOpen,\n                IssueCreatedAt: types.MustTimeFromString(\"2023-02-26T00:33:35.289Z\"),\n                NeedsConfirmationSolved: false,\n                Funding: components.Funding{},\n                Repository: components.Repository{\n                    ID: \"356e14cb-87a4-484c-bcfa-ebfe50487706\",\n                    IsPrivate: true,\n                    Name: \"MyOrg\",\n                    Description: polargo.String(\"different premium tinderbox peter under often buzzing hastily\"),\n                    Stars: polargo.Int64(1337),\n                    License: polargo.String(\"<value>\"),\n                    Homepage: polargo.String(\"<value>\"),\n                    ProfileSettings: &components.RepositoryProfileSettings{},\n                    Organization: components.ExternalOrganization{\n                        ID: \"29159f56-74c0-464d-b598-8d5bc3b9cdda\",\n                        Name: \"<value>\",\n                        AvatarURL: \"https://frightened-poppy.com/\",\n                        IsPersonal: false,\n                        Bio: polargo.String(\"<value>\"),\n                        PrettyName: polargo.String(\"<value>\"),\n                        Company: polargo.String(\"Bailey - Towne\"),\n                        Blog: polargo.String(\"<value>\"),\n                        Location: polargo.String(\"<value>\"),\n                        Email: polargo.String(\"Cortez_Stehr70@yahoo.com\"),\n                        TwitterUsername: polargo.String(\"<value>\"),\n                        OrganizationID: polargo.String(\"<value>\"),\n                    },\n                    InternalOrganization: &components.Organization{\n                        CreatedAt: types.MustTimeFromString(\"2024-01-04T15:27:13.109Z\"),\n                        ModifiedAt: types.MustNewTimeFromString(\"2023-02-15T22:10:17.041Z\"),\n                        ID: \"<value>\",\n                        Name: \"<value>\",\n                        Slug: \"<value>\",\n                        AvatarURL: polargo.String(\"https://hard-to-find-thyme.org\"),\n                        Bio: polargo.String(\"<value>\"),\n                        Company: polargo.String(\"Schinner - Wiegand\"),\n                        Blog: polargo.String(\"<value>\"),\n                        Location: polargo.String(\"<value>\"),\n                        Email: polargo.String(\"Pearline_Brekke@hotmail.com\"),\n                        TwitterUsername: polargo.String(\"<value>\"),\n                        PledgeMinimumAmount: 273260,\n                        PledgeBadgeShowAmount: false,\n                        DefaultUpfrontSplitToContributors: polargo.Int64(976949),\n                        ProfileSettings: &components.OrganizationProfileSettings{},\n                        FeatureSettings: &components.OrganizationFeatureSettings{},\n                    },\n                },\n                PledgeBadgeCurrentlyEmbedded: true,\n            },\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["pledge.updated"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "_endpointpledge_updated_post"
          "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/types\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New()\n\n    res, err := s.EndpointpledgeUpdatedPost(ctx, components.WebhookPledgeUpdatedPayload{\n        Data: components.Pledge{\n            CreatedAt: types.MustTimeFromString(\"2023-11-30T00:10:39.674Z\"),\n            ModifiedAt: types.MustNewTimeFromString(\"2024-10-02T21:42:49.754Z\"),\n            ID: \"<value>\",\n            Amount: 634567,\n            Currency: \"Singapore Dollar\",\n            State: components.PledgeStateRefunded,\n            Type: components.PledgeTypePayOnCompletion,\n            Issue: components.Issue{\n                ID: \"d2e1349d-085a-441c-abf4-379a1f21d0da\",\n                Number: 218372,\n                Title: \"<value>\",\n                State: components.StateClosed,\n                IssueCreatedAt: types.MustTimeFromString(\"2023-08-13T14:08:31.083Z\"),\n                NeedsConfirmationSolved: true,\n                Funding: components.Funding{},\n                Repository: components.Repository{\n                    ID: \"814bd7c6-3412-4f11-b523-7b38c659f44a\",\n                    IsPrivate: false,\n                    Name: \"MyOrg\",\n                    Description: polargo.String(\"hm however microchip\"),\n                    Stars: polargo.Int64(1337),\n                    License: polargo.String(\"<value>\"),\n                    Homepage: polargo.String(\"<value>\"),\n                    ProfileSettings: &components.RepositoryProfileSettings{},\n                    Organization: components.ExternalOrganization{\n                        ID: \"3ddd5cc2-de10-41ef-baa1-7551cf671cc3\",\n                        Name: \"<value>\",\n                        AvatarURL: \"https://gummy-interviewer.biz\",\n                        IsPersonal: false,\n                        Bio: polargo.String(\"<value>\"),\n                        PrettyName: polargo.String(\"<value>\"),\n                        Company: polargo.String(\"Ferry - Tremblay\"),\n                        Blog: polargo.String(\"<value>\"),\n                        Location: polargo.String(\"<value>\"),\n                        Email: polargo.String(\"Reggie_Crist@yahoo.com\"),\n                        TwitterUsername: polargo.String(\"<value>\"),\n                        OrganizationID: polargo.String(\"<value>\"),\n                    },\n                    InternalOrganization: &components.Organization{\n                        CreatedAt: types.MustTimeFromString(\"2024-12-13T11:00:39.217Z\"),\n                        ModifiedAt: types.MustNewTimeFromString(\"2024-12-02T09:51:26.214Z\"),\n                        ID: \"<value>\",\n                        Name: \"<value>\",\n                        Slug: \"<value>\",\n                        AvatarURL: polargo.String(\"https://memorable-numeracy.com/\"),\n                        Bio: polargo.String(\"<value>\"),\n                        Company: polargo.String(\"Schuster - Crooks\"),\n                        Blog: polargo.String(\"<value>\"),\n                        Location: polargo.String(\"<value>\"),\n                        Email: polargo.String(\"Tatum.Block37@yahoo.com\"),\n                        TwitterUsername: polargo.String(\"<value>\"),\n                        PledgeMinimumAmount: 653584,\n                        PledgeBadgeShowAmount: false,\n                        DefaultUpfrontSplitToContributors: polargo.Int64(175899),\n                        ProfileSettings: &components.OrganizationProfileSettings{},\n                        FeatureSettings: &components.OrganizationFeatureSettings{},\n                    },\n                },\n                PledgeBadgeCurrentlyEmbedded: false,\n            },\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["product.created"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "_endpointproduct_created_post"
          "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/types\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New()\n\n    res, err := s.EndpointproductCreatedPost(ctx, components.WebhookProductCreatedPayload{\n        Data: components.Product{\n            CreatedAt: types.MustTimeFromString(\"2022-03-27T06:36:20.130Z\"),\n            ModifiedAt: types.MustNewTimeFromString(\"2024-04-21T12:05:16.637Z\"),\n            ID: \"<value>\",\n            Name: \"<value>\",\n            Description: polargo.String(\"into horst metal grimy clinch big grounded industrialize\"),\n            IsRecurring: true,\n            IsArchived: true,\n            OrganizationID: \"<value>\",\n            Metadata: map[string]components.ProductMetadata{\n\n            },\n            Prices: []components.ProductPrice{\n                components.CreateProductPriceProductPriceOneTime(\n                    components.CreateProductPriceOneTimeProductPriceOneTimeCustom(\n                        components.ProductPriceOneTimeCustom{\n                            CreatedAt: types.MustTimeFromString(\"2022-02-03T03:46:28.818Z\"),\n                            ModifiedAt: types.MustNewTimeFromString(\"2024-03-12T22:34:53.042Z\"),\n                            ID: \"<value>\",\n                            IsArchived: false,\n                            ProductID: \"<value>\",\n                            PriceCurrency: \"<value>\",\n                            MinimumAmount: polargo.Int64(249521),\n                            MaximumAmount: polargo.Int64(723329),\n                            PresetAmount: polargo.Int64(675965),\n                        },\n                    ),\n                ),\n                components.CreateProductPriceProductPriceRecurring(\n                    components.CreateProductPriceRecurringProductPriceRecurringCustom(\n                        components.ProductPriceRecurringCustom{\n                            CreatedAt: types.MustTimeFromString(\"2024-12-18T17:38:35.838Z\"),\n                            ModifiedAt: types.MustNewTimeFromString(\"2023-09-22T07:48:34.028Z\"),\n                            ID: \"<value>\",\n                            IsArchived: false,\n                            ProductID: \"<value>\",\n                            PriceCurrency: \"<value>\",\n                            MinimumAmount: polargo.Int64(399325),\n                            MaximumAmount: polargo.Int64(862650),\n                            PresetAmount: polargo.Int64(434249),\n                            RecurringInterval: components.SubscriptionRecurringIntervalYear,\n                        },\n                    ),\n                ),\n            },\n            Benefits: []components.Benefit{\n                components.CreateBenefitBenefitGitHubRepository(\n                    components.BenefitGitHubRepository{\n                        CreatedAt: types.MustTimeFromString(\"2023-09-30T01:35:30.554Z\"),\n                        ModifiedAt: types.MustNewTimeFromString(\"2024-04-07T02:06:02.757Z\"),\n                        ID: \"<value>\",\n                        Description: \"phooey coarse mmm venture every\",\n                        Selectable: false,\n                        Deletable: false,\n                        OrganizationID: \"<value>\",\n                        Properties: components.BenefitGitHubRepositoryProperties{\n                            RepositoryOwner: \"polarsource\",\n                            RepositoryName: \"private_repo\",\n                            Permission: components.PermissionAdmin,\n                        },\n                    },\n                ),\n                components.CreateBenefitBenefitLicenseKeys(\n                    components.BenefitLicenseKeys{\n                        CreatedAt: types.MustTimeFromString(\"2022-06-21T15:29:47.140Z\"),\n                        ModifiedAt: types.MustNewTimeFromString(\"2024-08-03T05:27:40.759Z\"),\n                        ID: \"<value>\",\n                        Description: \"whoever provided besides whether\",\n                        Selectable: false,\n                        Deletable: false,\n                        OrganizationID: \"<value>\",\n                        Properties: components.BenefitLicenseKeysProperties{\n                            Prefix: polargo.String(\"<value>\"),\n                            Expires: &components.BenefitLicenseKeyExpirationProperties{\n                                TTL: 192106,\n                                Timeframe: components.TimeframeMonth,\n                            },\n                            Activations: &components.BenefitLicenseKeyActivationProperties{\n                                Limit: 584727,\n                                EnableCustomerAdmin: false,\n                            },\n                            LimitUsage: polargo.Int64(720229),\n                        },\n                    },\n                ),\n                components.CreateBenefitBenefitDownloadables(\n                    components.BenefitDownloadables{\n                        CreatedAt: types.MustTimeFromString(\"2022-09-25T06:48:53.071Z\"),\n                        ModifiedAt: types.MustNewTimeFromString(\"2022-06-15T10:56:39.139Z\"),\n                        ID: \"<value>\",\n                        Description: \"faraway fibre distorted seagull final accidentally joyously responsibility after\",\n                        Selectable: false,\n                        Deletable: false,\n                        OrganizationID: \"<value>\",\n                        Properties: components.BenefitDownloadablesProperties{\n                            Archived: map[string]bool{\n                                \"key\": false,\n                            },\n                            Files: []string{\n                                \"<value>\",\n                            },\n                        },\n                    },\n                ),\n            },\n            Medias: []components.ProductMediaFileRead{\n                components.ProductMediaFileRead{\n                    ID: \"<value>\",\n                    OrganizationID: \"<value>\",\n                    Name: \"<value>\",\n                    Path: \"/Users\",\n                    MimeType: \"<value>\",\n                    Size: 692895,\n                    StorageVersion: polargo.String(\"<value>\"),\n                    ChecksumEtag: polargo.String(\"<value>\"),\n                    ChecksumSha256Base64: polargo.String(\"<value>\"),\n                    ChecksumSha256Hex: polargo.String(\"<value>\"),\n                    LastModifiedAt: types.MustNewTimeFromString(\"2022-02-28T01:03:14.537Z\"),\n                    Version: polargo.String(\"<value>\"),\n                    IsUploaded: true,\n                    CreatedAt: types.MustTimeFromString(\"2022-06-03T00:39:20.038Z\"),\n                    SizeReadable: \"<value>\",\n                    PublicURL: \"https://monstrous-cop-out.net\",\n                },\n                components.ProductMediaFileRead{\n                    ID: \"<value>\",\n                    OrganizationID: \"<value>\",\n                    Name: \"<value>\",\n                    Path: \"/var/mail\",\n                    MimeType: \"<value>\",\n                    Size: 843323,\n                    StorageVersion: polargo.String(\"<value>\"),\n                    ChecksumEtag: polargo.String(\"<value>\"),\n                    ChecksumSha256Base64: polargo.String(\"<value>\"),\n                    ChecksumSha256Hex: polargo.String(\"<value>\"),\n                    LastModifiedAt: types.MustNewTimeFromString(\"2022-04-23T21:31:25.476Z\"),\n                    Version: polargo.String(\"<value>\"),\n                    IsUploaded: true,\n                    CreatedAt: types.MustTimeFromString(\"2022-07-19T01:29:35.587Z\"),\n                    SizeReadable: \"<value>\",\n                    PublicURL: \"https://well-made-farm.com\",\n                },\n                components.ProductMediaFileRead{\n                    ID: \"<value>\",\n                    OrganizationID: \"<value>\",\n                    Name: \"<value>\",\n                    Path: \"/root\",\n                    MimeType: \"<value>\",\n                    Size: 849549,\n                    StorageVersion: polargo.String(\"<value>\"),\n                    ChecksumEtag: polargo.String(\"<value>\"),\n                    ChecksumSha256Base64: polargo.String(\"<value>\"),\n                    ChecksumSha256Hex: polargo.String(\"<value>\"),\n                    LastModifiedAt: types.MustNewTimeFromString(\"2022-07-30T13:09:33.963Z\"),\n                    Version: polargo.String(\"<value>\"),\n                    IsUploaded: false,\n                    CreatedAt: types.MustTimeFromString(\"2023-10-03T20:39:40.444Z\"),\n                    SizeReadable: \"<value>\",\n                    PublicURL: \"https://simplistic-devastation.com\",\n                },\n            },\n            AttachedCustomFields: []components.AttachedCustomField{\n                components.AttachedCustomField{\n                    CustomFieldID: \"<value>\",\n                    CustomField: components.CreateCustomFieldCustomFieldDate(\n                        components.CustomFieldDate{\n                            CreatedAt: types.MustTimeFromString(\"2022-08-25T09:54:34.570Z\"),\n                            ModifiedAt: types.MustNewTimeFromString(\"2023-03-23T10:22:09.584Z\"),\n                            ID: \"<value>\",\n                            Metadata: map[string]components.CustomFieldDateMetadata{\n                                \"key\": components.CreateCustomFieldDateMetadataBoolean(\n                                    false,\n                                ),\n                            },\n                            Slug: \"<value>\",\n                            Name: \"<value>\",\n                            OrganizationID: \"<value>\",\n                            Properties: components.CustomFieldDateProperties{},\n                        },\n                    ),\n                    Order: 317196,\n                    Required: false,\n                },\n                components.AttachedCustomField{\n                    CustomFieldID: \"<value>\",\n                    CustomField: components.CreateCustomFieldCustomFieldNumber(\n                        components.CustomFieldNumber{\n                            CreatedAt: types.MustTimeFromString(\"2024-02-13T16:46:51.894Z\"),\n                            ModifiedAt: types.MustNewTimeFromString(\"2023-02-20T05:40:24.943Z\"),\n                            ID: \"<value>\",\n                            Metadata: map[string]components.CustomFieldNumberMetadata{\n                                \"key\": components.CreateCustomFieldNumberMetadataBoolean(\n                                    false,\n                                ),\n                            },\n                            Slug: \"<value>\",\n                            Name: \"<value>\",\n                            OrganizationID: \"<value>\",\n                            Properties: components.CustomFieldNumberProperties{},\n                        },\n                    ),\n                    Order: 492053,\n                    Required: true,\n                },\n                components.AttachedCustomField{\n                    CustomFieldID: \"<value>\",\n                    CustomField: components.CreateCustomFieldCustomFieldCheckbox(\n                        components.CustomFieldCheckbox{\n                            CreatedAt: types.MustTimeFromString(\"2024-10-21T08:02:08.197Z\"),\n                            ModifiedAt: types.MustNewTimeFromString(\"2022-02-07T01:56:51.342Z\"),\n                            ID: \"<value>\",\n                            Metadata: map[string]components.CustomFieldCheckboxMetadata{\n                                \"key\": components.CreateCustomFieldCheckboxMetadataStr(\n                                    \"<value>\",\n                                ),\n                            },\n                            Slug: \"<value>\",\n                            Name: \"<value>\",\n                            OrganizationID: \"<value>\",\n                            Properties: components.CustomFieldCheckboxProperties{},\n                        },\n                    ),\n                    Order: 17631,\n                    Required: true,\n                },\n            },\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["product.updated"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "_endpointproduct_updated_post"
          "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/types\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New()\n\n    res, err := s.EndpointproductUpdatedPost(ctx, components.WebhookProductUpdatedPayload{\n        Data: components.Product{\n            CreatedAt: types.MustTimeFromString(\"2023-06-26T03:46:32.479Z\"),\n            ModifiedAt: types.MustNewTimeFromString(\"2022-06-04T01:47:33.158Z\"),\n            ID: \"<value>\",\n            Name: \"<value>\",\n            Description: polargo.String(\"er ick birdcage\"),\n            IsRecurring: true,\n            IsArchived: false,\n            OrganizationID: \"<value>\",\n            Metadata: map[string]components.ProductMetadata{\n\n            },\n            Prices: []components.ProductPrice{\n                components.CreateProductPriceProductPriceRecurring(\n                    components.CreateProductPriceRecurringProductPriceRecurringFixed(\n                        components.ProductPriceRecurringFixed{\n                            CreatedAt: types.MustTimeFromString(\"2023-07-17T21:09:51.818Z\"),\n                            ModifiedAt: types.MustNewTimeFromString(\"2022-03-20T08:40:07.478Z\"),\n                            ID: \"<value>\",\n                            IsArchived: false,\n                            ProductID: \"<value>\",\n                            PriceCurrency: \"<value>\",\n                            PriceAmount: 604318,\n                            RecurringInterval: components.SubscriptionRecurringIntervalMonth,\n                        },\n                    ),\n                ),\n            },\n            Benefits: []components.Benefit{\n                components.CreateBenefitBenefitDiscord(\n                    components.BenefitDiscord{\n                        CreatedAt: types.MustTimeFromString(\"2024-05-20T12:53:47.146Z\"),\n                        ModifiedAt: types.MustNewTimeFromString(\"2022-04-21T12:36:34.746Z\"),\n                        ID: \"<value>\",\n                        Description: \"sometimes lest uselessly brr aftermath behind pfft unrealistic abseil\",\n                        Selectable: false,\n                        Deletable: false,\n                        OrganizationID: \"<value>\",\n                        Properties: components.BenefitDiscordProperties{\n                            GuildID: \"<id>\",\n                            RoleID: \"<id>\",\n                            GuildToken: \"<value>\",\n                        },\n                    },\n                ),\n                components.CreateBenefitBenefitDownloadables(\n                    components.BenefitDownloadables{\n                        CreatedAt: types.MustTimeFromString(\"2023-06-19T20:15:14.004Z\"),\n                        ModifiedAt: types.MustNewTimeFromString(\"2024-08-28T23:32:17.658Z\"),\n                        ID: \"<value>\",\n                        Description: \"blindly after whoa charter\",\n                        Selectable: false,\n                        Deletable: false,\n                        OrganizationID: \"<value>\",\n                        Properties: components.BenefitDownloadablesProperties{\n                            Archived: map[string]bool{\n                                \"key\": false,\n                            },\n                            Files: []string{\n                                \"<value>\",\n                            },\n                        },\n                    },\n                ),\n                components.CreateBenefitBenefitDownloadables(\n                    components.BenefitDownloadables{\n                        CreatedAt: types.MustTimeFromString(\"2023-11-04T07:22:50.678Z\"),\n                        ModifiedAt: types.MustNewTimeFromString(\"2024-03-23T03:59:25.986Z\"),\n                        ID: \"<value>\",\n                        Description: \"nor scratchy inasmuch shipper these range as notwithstanding\",\n                        Selectable: false,\n                        Deletable: false,\n                        OrganizationID: \"<value>\",\n                        Properties: components.BenefitDownloadablesProperties{\n                            Archived: map[string]bool{\n                                \"key\": false,\n                            },\n                            Files: []string{\n                                \"<value>\",\n                            },\n                        },\n                    },\n                ),\n            },\n            Medias: []components.ProductMediaFileRead{\n                components.ProductMediaFileRead{\n                    ID: \"<value>\",\n                    OrganizationID: \"<value>\",\n                    Name: \"<value>\",\n                    Path: \"/dev\",\n                    MimeType: \"<value>\",\n                    Size: 37455,\n                    StorageVersion: polargo.String(\"<value>\"),\n                    ChecksumEtag: polargo.String(\"<value>\"),\n                    ChecksumSha256Base64: polargo.String(\"<value>\"),\n                    ChecksumSha256Hex: polargo.String(\"<value>\"),\n                    LastModifiedAt: types.MustNewTimeFromString(\"2024-09-15T21:42:22.500Z\"),\n                    Version: polargo.String(\"<value>\"),\n                    IsUploaded: false,\n                    CreatedAt: types.MustTimeFromString(\"2024-06-18T16:17:48.946Z\"),\n                    SizeReadable: \"<value>\",\n                    PublicURL: \"https://unknown-lava.com\",\n                },\n            },\n            AttachedCustomFields: []components.AttachedCustomField{\n                components.AttachedCustomField{\n                    CustomFieldID: \"<value>\",\n                    CustomField: components.CreateCustomFieldCustomFieldText(\n                        components.CustomFieldText{\n                            CreatedAt: types.MustTimeFromString(\"2024-12-02T04:10:31.923Z\"),\n                            ModifiedAt: types.MustNewTimeFromString(\"2024-06-06T15:01:23.581Z\"),\n                            ID: \"<value>\",\n                            Metadata: map[string]components.CustomFieldTextMetadata{\n                                \"key\": components.CreateCustomFieldTextMetadataInteger(\n                                    767516,\n                                ),\n                            },\n                            Slug: \"<value>\",\n                            Name: \"<value>\",\n                            OrganizationID: \"<value>\",\n                            Properties: components.CustomFieldTextProperties{},\n                        },\n                    ),\n                    Order: 19557,\n                    Required: true,\n                },\n                components.AttachedCustomField{\n                    CustomFieldID: \"<value>\",\n                    CustomField: components.CreateCustomFieldCustomFieldCheckbox(\n                        components.CustomFieldCheckbox{\n                            CreatedAt: types.MustTimeFromString(\"2022-04-26T16:11:06.774Z\"),\n                            ModifiedAt: types.MustNewTimeFromString(\"2023-01-27T07:09:12.561Z\"),\n                            ID: \"<value>\",\n                            Metadata: map[string]components.CustomFieldCheckboxMetadata{\n                                \"key\": components.CreateCustomFieldCheckboxMetadataStr(\n                                    \"<value>\",\n                                ),\n                            },\n                            Slug: \"<value>\",\n                            Name: \"<value>\",\n                            OrganizationID: \"<value>\",\n                            Properties: components.CustomFieldCheckboxProperties{},\n                        },\n                    ),\n                    Order: 753420,\n                    Required: true,\n                },\n                components.AttachedCustomField{\n                    CustomFieldID: \"<value>\",\n                    CustomField: components.CreateCustomFieldCustomFieldText(\n                        components.CustomFieldText{\n                            CreatedAt: types.MustTimeFromString(\"2023-03-22T07:09:29.044Z\"),\n                            ModifiedAt: types.MustNewTimeFromString(\"2023-12-31T13:16:31.036Z\"),\n                            ID: \"<value>\",\n                            Metadata: map[string]components.CustomFieldTextMetadata{\n                                \"key\": components.CreateCustomFieldTextMetadataBoolean(\n                                    false,\n                                ),\n                            },\n                            Slug: \"<value>\",\n                            Name: \"<value>\",\n                            OrganizationID: \"<value>\",\n                            Properties: components.CustomFieldTextProperties{},\n                        },\n                    ),\n                    Order: 454407,\n                    Required: true,\n                },\n            },\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["subscription.active"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "_endpointsubscription_active_post"
          "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/types\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New()\n\n    res, err := s.EndpointsubscriptionActivePost(ctx, components.WebhookSubscriptionActivePayload{\n        Data: components.Subscription{\n            CreatedAt: types.MustTimeFromString(\"2022-09-17T11:03:44.679Z\"),\n            ModifiedAt: types.MustNewTimeFromString(\"2024-07-24T20:02:17.426Z\"),\n            ID: \"<value>\",\n            Amount: polargo.Int64(116760),\n            Currency: polargo.String(\"Quetzal\"),\n            RecurringInterval: components.SubscriptionRecurringIntervalMonth,\n            Status: components.SubscriptionStatusIncomplete,\n            CurrentPeriodStart: types.MustTimeFromString(\"2022-08-25T00:14:50.252Z\"),\n            CurrentPeriodEnd: types.MustNewTimeFromString(\"2022-12-10T18:25:01.577Z\"),\n            CancelAtPeriodEnd: false,\n            StartedAt: types.MustNewTimeFromString(\"2023-07-06T14:07:23.099Z\"),\n            EndedAt: types.MustNewTimeFromString(\"2023-07-01T08:12:48.355Z\"),\n            CustomerID: \"<value>\",\n            ProductID: \"<value>\",\n            PriceID: \"<value>\",\n            DiscountID: polargo.String(\"<value>\"),\n            CheckoutID: polargo.String(\"<value>\"),\n            Metadata: map[string]components.Metadata{\n\n            },\n            Customer: components.SubscriptionCustomer{\n                CreatedAt: types.MustTimeFromString(\"2024-10-30T02:51:06.576Z\"),\n                ModifiedAt: types.MustNewTimeFromString(\"2023-06-21T14:46:16.535Z\"),\n                ID: \"<value>\",\n                Metadata: map[string]components.SubscriptionCustomerMetadata{\n                    \"key\": components.CreateSubscriptionCustomerMetadataBoolean(\n                        true,\n                    ),\n                    \"key1\": components.CreateSubscriptionCustomerMetadataStr(\n                        \"<value>\",\n                    ),\n                    \"key2\": components.CreateSubscriptionCustomerMetadataInteger(\n                        615212,\n                    ),\n                },\n                Email: \"Sincere42@gmail.com\",\n                EmailVerified: false,\n                Name: polargo.String(\"<value>\"),\n                BillingAddress: &components.Address{\n                    Country: \"Tanzania\",\n                },\n                TaxID: []components.TaxID{\n                    components.CreateTaxIDStr(\n                        \"<value>\",\n                    ),\n                    components.CreateTaxIDStr(\n                        \"<value>\",\n                    ),\n                    components.CreateTaxIDStr(\n                        \"mx_rfc\",\n                    ),\n                },\n                OrganizationID: \"<value>\",\n                AvatarURL: \"https://negative-tentacle.com\",\n            },\n            UserID: \"<value>\",\n            User: components.SubscriptionUser{\n                ID: \"<value>\",\n                Email: \"Zoey_Bahringer88@hotmail.com\",\n                PublicName: \"<value>\",\n            },\n            Product: components.Product{\n                CreatedAt: types.MustTimeFromString(\"2024-03-05T21:40:58.905Z\"),\n                ModifiedAt: types.MustNewTimeFromString(\"2022-06-03T13:50:25.005Z\"),\n                ID: \"<value>\",\n                Name: \"<value>\",\n                Description: polargo.String(\"synthesise beautifully until below barring concerning\"),\n                IsRecurring: true,\n                IsArchived: false,\n                OrganizationID: \"<value>\",\n                Metadata: map[string]components.ProductMetadata{\n                    \"key\": components.CreateProductMetadataStr(\n                        \"<value>\",\n                    ),\n                    \"key1\": components.CreateProductMetadataInteger(\n                        893296,\n                    ),\n                },\n                Prices: []components.ProductPrice{\n                    components.CreateProductPriceProductPriceRecurring(\n                        components.CreateProductPriceRecurringProductPriceRecurringCustom(\n                            components.ProductPriceRecurringCustom{\n                                CreatedAt: types.MustTimeFromString(\"2022-10-02T10:57:52.944Z\"),\n                                ModifiedAt: types.MustNewTimeFromString(\"2022-08-22T22:26:19.404Z\"),\n                                ID: \"<value>\",\n                                IsArchived: false,\n                                ProductID: \"<value>\",\n                                PriceCurrency: \"<value>\",\n                                MinimumAmount: polargo.Int64(569952),\n                                MaximumAmount: polargo.Int64(620296),\n                                PresetAmount: polargo.Int64(975064),\n                                RecurringInterval: components.SubscriptionRecurringIntervalYear,\n                            },\n                        ),\n                    ),\n                },\n                Benefits: []components.Benefit{\n                    components.CreateBenefitBenefitCustom(\n                        components.BenefitCustom{\n                            CreatedAt: types.MustTimeFromString(\"2022-08-07T05:36:52.623Z\"),\n                            ModifiedAt: types.MustNewTimeFromString(\"2024-07-24T09:11:52.906Z\"),\n                            ID: \"<value>\",\n                            Description: \"redevelop misguided following gerbil plastic\",\n                            Selectable: false,\n                            Deletable: false,\n                            OrganizationID: \"<value>\",\n                            Properties: components.BenefitCustomProperties{\n                                Note: polargo.String(\"<value>\"),\n                            },\n                            IsTaxApplicable: false,\n                        },\n                    ),\n                    components.CreateBenefitBenefitDiscord(\n                        components.BenefitDiscord{\n                            CreatedAt: types.MustTimeFromString(\"2023-08-18T12:26:22.550Z\"),\n                            ModifiedAt: types.MustNewTimeFromString(\"2024-12-24T15:06:38.460Z\"),\n                            ID: \"<value>\",\n                            Description: \"enchanting nervously eek\",\n                            Selectable: false,\n                            Deletable: false,\n                            OrganizationID: \"<value>\",\n                            Properties: components.BenefitDiscordProperties{\n                                GuildID: \"<id>\",\n                                RoleID: \"<id>\",\n                                GuildToken: \"<value>\",\n                            },\n                        },\n                    ),\n                },\n                Medias: []components.ProductMediaFileRead{\n                    components.ProductMediaFileRead{\n                        ID: \"<value>\",\n                        OrganizationID: \"<value>\",\n                        Name: \"<value>\",\n                        Path: \"/media\",\n                        MimeType: \"<value>\",\n                        Size: 931655,\n                        StorageVersion: polargo.String(\"<value>\"),\n                        ChecksumEtag: polargo.String(\"<value>\"),\n                        ChecksumSha256Base64: polargo.String(\"<value>\"),\n                        ChecksumSha256Hex: polargo.String(\"<value>\"),\n                        LastModifiedAt: types.MustNewTimeFromString(\"2022-06-07T17:40:48.757Z\"),\n                        Version: polargo.String(\"<value>\"),\n                        IsUploaded: false,\n                        CreatedAt: types.MustTimeFromString(\"2023-07-28T18:04:02.928Z\"),\n                        SizeReadable: \"<value>\",\n                        PublicURL: \"https://remorseful-hamburger.name\",\n                    },\n                },\n                AttachedCustomFields: []components.AttachedCustomField{\n                    components.AttachedCustomField{\n                        CustomFieldID: \"<value>\",\n                        CustomField: components.CreateCustomFieldCustomFieldSelect(\n                            components.CustomFieldSelect{\n                                CreatedAt: types.MustTimeFromString(\"2022-02-14T19:12:16.238Z\"),\n                                ModifiedAt: types.MustNewTimeFromString(\"2023-08-06T20:32:14.443Z\"),\n                                ID: \"<value>\",\n                                Metadata: map[string]components.CustomFieldSelectMetadata{\n                                    \"key\": components.CreateCustomFieldSelectMetadataStr(\n                                        \"<value>\",\n                                    ),\n                                },\n                                Slug: \"<value>\",\n                                Name: \"<value>\",\n                                OrganizationID: \"<value>\",\n                                Properties: components.CustomFieldSelectProperties{\n                                    Options: []components.CustomFieldSelectOption{\n                                        components.CustomFieldSelectOption{\n                                            Value: \"<value>\",\n                                            Label: \"<value>\",\n                                        },\n                                    },\n                                },\n                            },\n                        ),\n                        Order: 769742,\n                        Required: false,\n                    },\n                    components.AttachedCustomField{\n                        CustomFieldID: \"<value>\",\n                        CustomField: components.CreateCustomFieldCustomFieldNumber(\n                            components.CustomFieldNumber{\n                                CreatedAt: types.MustTimeFromString(\"2023-02-02T00:30:57.495Z\"),\n                                ModifiedAt: types.MustNewTimeFromString(\"2023-08-16T16:58:49.210Z\"),\n                                ID: \"<value>\",\n                                Metadata: map[string]components.CustomFieldNumberMetadata{\n                                    \"key\": components.CreateCustomFieldNumberMetadataStr(\n                                        \"<value>\",\n                                    ),\n                                },\n                                Slug: \"<value>\",\n                                Name: \"<value>\",\n                                OrganizationID: \"<value>\",\n                                Properties: components.CustomFieldNumberProperties{},\n                            },\n                        ),\n                        Order: 61975,\n                        Required: false,\n                    },\n                    components.AttachedCustomField{\n                        CustomFieldID: \"<value>\",\n                        CustomField: components.CreateCustomFieldCustomFieldDate(\n                            components.CustomFieldDate{\n                                CreatedAt: types.MustTimeFromString(\"2022-10-26T16:01:57.187Z\"),\n                                ModifiedAt: types.MustNewTimeFromString(\"2024-09-24T14:23:14.148Z\"),\n                                ID: \"<value>\",\n                                Metadata: map[string]components.CustomFieldDateMetadata{\n                                    \"key\": components.CreateCustomFieldDateMetadataInteger(\n                                        708601,\n                                    ),\n                                },\n                                Slug: \"<value>\",\n                                Name: \"<value>\",\n                                OrganizationID: \"<value>\",\n                                Properties: components.CustomFieldDateProperties{},\n                            },\n                        ),\n                        Order: 531803,\n                        Required: true,\n                    },\n                },\n            },\n            Price: components.CreateProductPriceRecurringProductPriceRecurringFree(\n                components.ProductPriceRecurringFree{\n                    CreatedAt: types.MustTimeFromString(\"2023-07-23T07:33:56.099Z\"),\n                    ModifiedAt: types.MustNewTimeFromString(\"2024-03-02T15:40:26.218Z\"),\n                    ID: \"<value>\",\n                    IsArchived: false,\n                    ProductID: \"<value>\",\n                    RecurringInterval: components.SubscriptionRecurringIntervalYear,\n                },\n            ),\n            Discount: components.CreateSubscriptionDiscountDiscountPercentageRepeatDurationBase(\n                components.DiscountPercentageRepeatDurationBase{\n                    Duration: components.DiscountDurationForever,\n                    DurationInMonths: 85516,\n                    Type: components.DiscountTypePercentage,\n                    BasisPoints: 701778,\n                    CreatedAt: types.MustTimeFromString(\"2024-01-30T01:41:22.902Z\"),\n                    ModifiedAt: types.MustNewTimeFromString(\"2022-03-28T04:30:51.396Z\"),\n                    ID: \"<value>\",\n                    Metadata: map[string]components.DiscountPercentageRepeatDurationBaseMetadata{\n                        \"key\": components.CreateDiscountPercentageRepeatDurationBaseMetadataInteger(\n                            670175,\n                        ),\n                    },\n                    Name: \"<value>\",\n                    Code: polargo.String(\"<value>\"),\n                    StartsAt: types.MustNewTimeFromString(\"2024-06-15T23:59:22.430Z\"),\n                    EndsAt: types.MustNewTimeFromString(\"2024-10-04T16:09:53.872Z\"),\n                    MaxRedemptions: polargo.Int64(831694),\n                    RedemptionsCount: 886073,\n                    OrganizationID: \"<value>\",\n                },\n            ),\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["subscription.canceled"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "_endpointsubscription_canceled_post"
          "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/types\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New()\n\n    res, err := s.EndpointsubscriptionCanceledPost(ctx, components.WebhookSubscriptionCanceledPayload{\n        Data: components.Subscription{\n            CreatedAt: types.MustTimeFromString(\"2023-02-08T10:04:43.200Z\"),\n            ModifiedAt: types.MustNewTimeFromString(\"2022-02-20T09:16:44.963Z\"),\n            ID: \"<value>\",\n            Amount: polargo.Int64(384017),\n            Currency: polargo.String(\"Nakfa\"),\n            RecurringInterval: components.SubscriptionRecurringIntervalMonth,\n            Status: components.SubscriptionStatusCanceled,\n            CurrentPeriodStart: types.MustTimeFromString(\"2024-08-29T23:51:26.505Z\"),\n            CurrentPeriodEnd: types.MustNewTimeFromString(\"2023-01-30T14:57:29.126Z\"),\n            CancelAtPeriodEnd: false,\n            StartedAt: types.MustNewTimeFromString(\"2022-05-31T10:57:35.559Z\"),\n            EndedAt: types.MustNewTimeFromString(\"2023-11-01T08:13:37.012Z\"),\n            CustomerID: \"<value>\",\n            ProductID: \"<value>\",\n            PriceID: \"<value>\",\n            DiscountID: polargo.String(\"<value>\"),\n            CheckoutID: polargo.String(\"<value>\"),\n            Metadata: map[string]components.Metadata{\n\n            },\n            Customer: components.SubscriptionCustomer{\n                CreatedAt: types.MustTimeFromString(\"2022-07-13T20:08:34.251Z\"),\n                ModifiedAt: types.MustNewTimeFromString(\"2023-11-18T03:48:04.429Z\"),\n                ID: \"<value>\",\n                Metadata: map[string]components.SubscriptionCustomerMetadata{\n                    \"key\": components.CreateSubscriptionCustomerMetadataStr(\n                        \"<value>\",\n                    ),\n                    \"key1\": components.CreateSubscriptionCustomerMetadataStr(\n                        \"<value>\",\n                    ),\n                    \"key2\": components.CreateSubscriptionCustomerMetadataInteger(\n                        199269,\n                    ),\n                },\n                Email: \"Marcella_Gislason@gmail.com\",\n                EmailVerified: false,\n                Name: polargo.String(\"<value>\"),\n                BillingAddress: &components.Address{\n                    Country: \"Kuwait\",\n                },\n                TaxID: []components.TaxID{\n                    components.CreateTaxIDStr(\n                        \"<value>\",\n                    ),\n                    components.CreateTaxIDStr(\n                        \"ca_qst\",\n                    ),\n                    components.CreateTaxIDStr(\n                        \"ua_vat\",\n                    ),\n                },\n                OrganizationID: \"<value>\",\n                AvatarURL: \"https://oily-juggernaut.com/\",\n            },\n            UserID: \"<value>\",\n            User: components.SubscriptionUser{\n                ID: \"<value>\",\n                Email: \"Sherwood.Murphy2@yahoo.com\",\n                PublicName: \"<value>\",\n            },\n            Product: components.Product{\n                CreatedAt: types.MustTimeFromString(\"2022-04-28T07:50:03.180Z\"),\n                ModifiedAt: types.MustNewTimeFromString(\"2022-02-20T03:50:20.279Z\"),\n                ID: \"<value>\",\n                Name: \"<value>\",\n                Description: polargo.String(\"tenant indeed when distorted before excluding claw stool aw self-reliant\"),\n                IsRecurring: true,\n                IsArchived: false,\n                OrganizationID: \"<value>\",\n                Metadata: map[string]components.ProductMetadata{\n                    \"key\": components.CreateProductMetadataInteger(\n                        231419,\n                    ),\n                },\n                Prices: []components.ProductPrice{\n                    components.CreateProductPriceProductPriceOneTime(\n                        components.CreateProductPriceOneTimeProductPriceOneTimeFree(\n                            components.ProductPriceOneTimeFree{\n                                CreatedAt: types.MustTimeFromString(\"2023-02-21T19:14:41.464Z\"),\n                                ModifiedAt: types.MustNewTimeFromString(\"2022-05-02T06:25:43.734Z\"),\n                                ID: \"<value>\",\n                                IsArchived: false,\n                                ProductID: \"<value>\",\n                            },\n                        ),\n                    ),\n                },\n                Benefits: []components.Benefit{\n                    components.CreateBenefitBenefitDownloadables(\n                        components.BenefitDownloadables{\n                            CreatedAt: types.MustTimeFromString(\"2024-04-12T18:57:51.082Z\"),\n                            ModifiedAt: types.MustNewTimeFromString(\"2024-02-02T11:25:35.223Z\"),\n                            ID: \"<value>\",\n                            Description: \"bestride circa aw gum judgementally till upwardly pro urgently\",\n                            Selectable: false,\n                            Deletable: false,\n                            OrganizationID: \"<value>\",\n                            Properties: components.BenefitDownloadablesProperties{\n                                Archived: map[string]bool{\n                                    \"key\": false,\n                                },\n                                Files: []string{\n                                    \"<value>\",\n                                },\n                            },\n                        },\n                    ),\n                },\n                Medias: []components.ProductMediaFileRead{\n                    components.ProductMediaFileRead{\n                        ID: \"<value>\",\n                        OrganizationID: \"<value>\",\n                        Name: \"<value>\",\n                        Path: \"/usr/include\",\n                        MimeType: \"<value>\",\n                        Size: 778001,\n                        StorageVersion: polargo.String(\"<value>\"),\n                        ChecksumEtag: polargo.String(\"<value>\"),\n                        ChecksumSha256Base64: polargo.String(\"<value>\"),\n                        ChecksumSha256Hex: polargo.String(\"<value>\"),\n                        LastModifiedAt: types.MustNewTimeFromString(\"2023-03-31T22:07:25.990Z\"),\n                        Version: polargo.String(\"<value>\"),\n                        IsUploaded: false,\n                        CreatedAt: types.MustTimeFromString(\"2024-09-17T20:00:26.644Z\"),\n                        SizeReadable: \"<value>\",\n                        PublicURL: \"https://dim-tail.org\",\n                    },\n                    components.ProductMediaFileRead{\n                        ID: \"<value>\",\n                        OrganizationID: \"<value>\",\n                        Name: \"<value>\",\n                        Path: \"/etc/namedb\",\n                        MimeType: \"<value>\",\n                        Size: 797228,\n                        StorageVersion: polargo.String(\"<value>\"),\n                        ChecksumEtag: polargo.String(\"<value>\"),\n                        ChecksumSha256Base64: polargo.String(\"<value>\"),\n                        ChecksumSha256Hex: polargo.String(\"<value>\"),\n                        LastModifiedAt: types.MustNewTimeFromString(\"2022-12-03T23:14:09.199Z\"),\n                        Version: polargo.String(\"<value>\"),\n                        IsUploaded: true,\n                        CreatedAt: types.MustTimeFromString(\"2024-10-11T05:55:27.601Z\"),\n                        SizeReadable: \"<value>\",\n                        PublicURL: \"https://tragic-castanet.biz/\",\n                    },\n                    components.ProductMediaFileRead{\n                        ID: \"<value>\",\n                        OrganizationID: \"<value>\",\n                        Name: \"<value>\",\n                        Path: \"/private/tmp\",\n                        MimeType: \"<value>\",\n                        Size: 547184,\n                        StorageVersion: polargo.String(\"<value>\"),\n                        ChecksumEtag: polargo.String(\"<value>\"),\n                        ChecksumSha256Base64: polargo.String(\"<value>\"),\n                        ChecksumSha256Hex: polargo.String(\"<value>\"),\n                        LastModifiedAt: types.MustNewTimeFromString(\"2024-08-24T04:18:58.722Z\"),\n                        Version: polargo.String(\"<value>\"),\n                        IsUploaded: true,\n                        CreatedAt: types.MustTimeFromString(\"2023-07-31T11:34:39.128Z\"),\n                        SizeReadable: \"<value>\",\n                        PublicURL: \"https://cumbersome-forage.biz\",\n                    },\n                },\n                AttachedCustomFields: []components.AttachedCustomField{\n                    components.AttachedCustomField{\n                        CustomFieldID: \"<value>\",\n                        CustomField: components.CreateCustomFieldCustomFieldText(\n                            components.CustomFieldText{\n                                CreatedAt: types.MustTimeFromString(\"2022-06-03T19:12:20.362Z\"),\n                                ModifiedAt: types.MustNewTimeFromString(\"2024-05-23T18:16:04.701Z\"),\n                                ID: \"<value>\",\n                                Metadata: map[string]components.CustomFieldTextMetadata{\n                                    \"key\": components.CreateCustomFieldTextMetadataStr(\n                                        \"<value>\",\n                                    ),\n                                },\n                                Slug: \"<value>\",\n                                Name: \"<value>\",\n                                OrganizationID: \"<value>\",\n                                Properties: components.CustomFieldTextProperties{},\n                            },\n                        ),\n                        Order: 790486,\n                        Required: true,\n                    },\n                },\n            },\n            Price: components.CreateProductPriceRecurringProductPriceRecurringCustom(\n                components.ProductPriceRecurringCustom{\n                    CreatedAt: types.MustTimeFromString(\"2024-10-11T05:55:27.601Z\"),\n                    ModifiedAt: types.MustNewTimeFromString(\"2022-10-27T13:26:08.325Z\"),\n                    ID: \"<value>\",\n                    IsArchived: false,\n                    ProductID: \"<value>\",\n                    PriceCurrency: \"<value>\",\n                    MinimumAmount: polargo.Int64(863460),\n                    MaximumAmount: polargo.Int64(125035),\n                    PresetAmount: polargo.Int64(255928),\n                    RecurringInterval: components.SubscriptionRecurringIntervalMonth,\n                },\n            ),\n            Discount: components.CreateSubscriptionDiscountDiscountPercentageOnceForeverDurationBase(\n                components.DiscountPercentageOnceForeverDurationBase{\n                    Duration: components.DiscountDurationRepeating,\n                    Type: components.DiscountTypeFixed,\n                    BasisPoints: 525988,\n                    CreatedAt: types.MustTimeFromString(\"2024-07-07T08:51:50.154Z\"),\n                    ModifiedAt: types.MustNewTimeFromString(\"2022-06-23T12:56:40.348Z\"),\n                    ID: \"<value>\",\n                    Metadata: map[string]components.DiscountPercentageOnceForeverDurationBaseMetadata{\n                        \"key\": components.CreateDiscountPercentageOnceForeverDurationBaseMetadataInteger(\n                            304953,\n                        ),\n                    },\n                    Name: \"<value>\",\n                    Code: polargo.String(\"<value>\"),\n                    StartsAt: types.MustNewTimeFromString(\"2023-01-01T16:52:51.122Z\"),\n                    EndsAt: types.MustNewTimeFromString(\"2022-02-17T00:38:28.053Z\"),\n                    MaxRedemptions: polargo.Int64(998602),\n                    RedemptionsCount: 553330,\n                    OrganizationID: \"<value>\",\n                },\n            ),\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["subscription.created"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "_endpointsubscription_created_post"
          "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/types\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New()\n\n    res, err := s.EndpointsubscriptionCreatedPost(ctx, components.WebhookSubscriptionCreatedPayload{\n        Data: components.Subscription{\n            CreatedAt: types.MustTimeFromString(\"2023-07-04T01:29:40.920Z\"),\n            ModifiedAt: types.MustNewTimeFromString(\"2022-02-20T03:35:25.500Z\"),\n            ID: \"<value>\",\n            Amount: polargo.Int64(78980),\n            Currency: polargo.String(\"Dong\"),\n            RecurringInterval: components.SubscriptionRecurringIntervalMonth,\n            Status: components.SubscriptionStatusIncompleteExpired,\n            CurrentPeriodStart: types.MustTimeFromString(\"2024-01-26T02:46:12.208Z\"),\n            CurrentPeriodEnd: types.MustNewTimeFromString(\"2022-10-08T16:07:22.449Z\"),\n            CancelAtPeriodEnd: false,\n            StartedAt: types.MustNewTimeFromString(\"2024-10-17T20:21:29.819Z\"),\n            EndedAt: types.MustNewTimeFromString(\"2022-02-26T17:52:17.099Z\"),\n            CustomerID: \"<value>\",\n            ProductID: \"<value>\",\n            PriceID: \"<value>\",\n            DiscountID: polargo.String(\"<value>\"),\n            CheckoutID: polargo.String(\"<value>\"),\n            Metadata: map[string]components.Metadata{\n\n            },\n            Customer: components.SubscriptionCustomer{\n                CreatedAt: types.MustTimeFromString(\"2022-09-06T09:33:34.348Z\"),\n                ModifiedAt: types.MustNewTimeFromString(\"2024-05-17T19:46:56.602Z\"),\n                ID: \"<value>\",\n                Metadata: map[string]components.SubscriptionCustomerMetadata{\n                    \"key\": components.CreateSubscriptionCustomerMetadataStr(\n                        \"<value>\",\n                    ),\n                    \"key1\": components.CreateSubscriptionCustomerMetadataInteger(\n                        229409,\n                    ),\n                },\n                Email: \"Jermey.Ward@gmail.com\",\n                EmailVerified: false,\n                Name: polargo.String(\"<value>\"),\n                BillingAddress: &components.Address{\n                    Country: \"Vietnam\",\n                },\n                TaxID: []components.TaxID{\n                    components.CreateTaxIDStr(\n                        \"<value>\",\n                    ),\n                    components.CreateTaxIDStr(\n                        \"sg_gst\",\n                    ),\n                },\n                OrganizationID: \"<value>\",\n                AvatarURL: \"https://junior-numeracy.info/\",\n            },\n            UserID: \"<value>\",\n            User: components.SubscriptionUser{\n                ID: \"<value>\",\n                Email: \"Rosalia.Ritchie@yahoo.com\",\n                PublicName: \"<value>\",\n            },\n            Product: components.Product{\n                CreatedAt: types.MustTimeFromString(\"2024-02-26T17:46:34.360Z\"),\n                ModifiedAt: types.MustNewTimeFromString(\"2023-12-01T21:55:43.801Z\"),\n                ID: \"<value>\",\n                Name: \"<value>\",\n                Description: polargo.String(\"from below aw request\"),\n                IsRecurring: false,\n                IsArchived: true,\n                OrganizationID: \"<value>\",\n                Metadata: map[string]components.ProductMetadata{\n\n                },\n                Prices: []components.ProductPrice{\n                    components.CreateProductPriceProductPriceOneTime(\n                        components.CreateProductPriceOneTimeProductPriceOneTimeCustom(\n                            components.ProductPriceOneTimeCustom{\n                                CreatedAt: types.MustTimeFromString(\"2022-06-25T23:28:37.736Z\"),\n                                ModifiedAt: types.MustNewTimeFromString(\"2022-01-28T21:29:28.022Z\"),\n                                ID: \"<value>\",\n                                IsArchived: false,\n                                ProductID: \"<value>\",\n                                PriceCurrency: \"<value>\",\n                                MinimumAmount: polargo.Int64(933452),\n                                MaximumAmount: polargo.Int64(725754),\n                                PresetAmount: polargo.Int64(210876),\n                            },\n                        ),\n                    ),\n                    components.CreateProductPriceProductPriceOneTime(\n                        components.CreateProductPriceOneTimeProductPriceOneTimeFixed(\n                            components.ProductPriceOneTimeFixed{\n                                CreatedAt: types.MustTimeFromString(\"2022-05-21T04:19:09.625Z\"),\n                                ModifiedAt: types.MustNewTimeFromString(\"2024-04-30T14:02:56.290Z\"),\n                                ID: \"<value>\",\n                                IsArchived: false,\n                                ProductID: \"<value>\",\n                                PriceCurrency: \"<value>\",\n                                PriceAmount: 111336,\n                            },\n                        ),\n                    ),\n                },\n                Benefits: []components.Benefit{\n                    components.CreateBenefitBenefitLicenseKeys(\n                        components.BenefitLicenseKeys{\n                            CreatedAt: types.MustTimeFromString(\"2023-06-10T03:59:30.672Z\"),\n                            ModifiedAt: types.MustNewTimeFromString(\"2022-01-05T10:41:20.531Z\"),\n                            ID: \"<value>\",\n                            Description: \"tool white needily grandpa\",\n                            Selectable: false,\n                            Deletable: false,\n                            OrganizationID: \"<value>\",\n                            Properties: components.BenefitLicenseKeysProperties{\n                                Prefix: polargo.String(\"<value>\"),\n                                Expires: &components.BenefitLicenseKeyExpirationProperties{\n                                    TTL: 382414,\n                                    Timeframe: components.TimeframeYear,\n                                },\n                                Activations: &components.BenefitLicenseKeyActivationProperties{\n                                    Limit: 144670,\n                                    EnableCustomerAdmin: false,\n                                },\n                                LimitUsage: polargo.Int64(772158),\n                            },\n                        },\n                    ),\n                },\n                Medias: []components.ProductMediaFileRead{\n                    components.ProductMediaFileRead{\n                        ID: \"<value>\",\n                        OrganizationID: \"<value>\",\n                        Name: \"<value>\",\n                        Path: \"/etc/defaults\",\n                        MimeType: \"<value>\",\n                        Size: 212274,\n                        StorageVersion: polargo.String(\"<value>\"),\n                        ChecksumEtag: polargo.String(\"<value>\"),\n                        ChecksumSha256Base64: polargo.String(\"<value>\"),\n                        ChecksumSha256Hex: polargo.String(\"<value>\"),\n                        LastModifiedAt: types.MustNewTimeFromString(\"2024-02-07T09:30:30.379Z\"),\n                        Version: polargo.String(\"<value>\"),\n                        IsUploaded: true,\n                        CreatedAt: types.MustTimeFromString(\"2023-02-24T03:01:46.062Z\"),\n                        SizeReadable: \"<value>\",\n                        PublicURL: \"https://courageous-sailor.com/\",\n                    },\n                    components.ProductMediaFileRead{\n                        ID: \"<value>\",\n                        OrganizationID: \"<value>\",\n                        Name: \"<value>\",\n                        Path: \"/bin\",\n                        MimeType: \"<value>\",\n                        Size: 411556,\n                        StorageVersion: polargo.String(\"<value>\"),\n                        ChecksumEtag: polargo.String(\"<value>\"),\n                        ChecksumSha256Base64: polargo.String(\"<value>\"),\n                        ChecksumSha256Hex: polargo.String(\"<value>\"),\n                        LastModifiedAt: types.MustNewTimeFromString(\"2022-11-06T04:00:51.558Z\"),\n                        Version: polargo.String(\"<value>\"),\n                        IsUploaded: true,\n                        CreatedAt: types.MustTimeFromString(\"2024-08-27T08:53:33.064Z\"),\n                        SizeReadable: \"<value>\",\n                        PublicURL: \"https://snappy-airline.name\",\n                    },\n                },\n                AttachedCustomFields: []components.AttachedCustomField{\n                    components.AttachedCustomField{\n                        CustomFieldID: \"<value>\",\n                        CustomField: components.CreateCustomFieldCustomFieldCheckbox(\n                            components.CustomFieldCheckbox{\n                                CreatedAt: types.MustTimeFromString(\"2022-01-29T05:08:10.453Z\"),\n                                ModifiedAt: types.MustNewTimeFromString(\"2023-03-28T01:34:09.042Z\"),\n                                ID: \"<value>\",\n                                Metadata: map[string]components.CustomFieldCheckboxMetadata{\n                                    \"key\": components.CreateCustomFieldCheckboxMetadataStr(\n                                        \"<value>\",\n                                    ),\n                                },\n                                Slug: \"<value>\",\n                                Name: \"<value>\",\n                                OrganizationID: \"<value>\",\n                                Properties: components.CustomFieldCheckboxProperties{},\n                            },\n                        ),\n                        Order: 893449,\n                        Required: false,\n                    },\n                    components.AttachedCustomField{\n                        CustomFieldID: \"<value>\",\n                        CustomField: components.CreateCustomFieldCustomFieldDate(\n                            components.CustomFieldDate{\n                                CreatedAt: types.MustTimeFromString(\"2024-08-27T08:53:33.064Z\"),\n                                ModifiedAt: types.MustNewTimeFromString(\"2023-12-28T19:45:50.280Z\"),\n                                ID: \"<value>\",\n                                Metadata: map[string]components.CustomFieldDateMetadata{\n                                    \"key\": components.CreateCustomFieldDateMetadataBoolean(\n                                        false,\n                                    ),\n                                },\n                                Slug: \"<value>\",\n                                Name: \"<value>\",\n                                OrganizationID: \"<value>\",\n                                Properties: components.CustomFieldDateProperties{},\n                            },\n                        ),\n                        Order: 954791,\n                        Required: false,\n                    },\n                    components.AttachedCustomField{\n                        CustomFieldID: \"<value>\",\n                        CustomField: components.CreateCustomFieldCustomFieldCheckbox(\n                            components.CustomFieldCheckbox{\n                                CreatedAt: types.MustTimeFromString(\"2023-12-31T11:33:29.704Z\"),\n                                ModifiedAt: types.MustNewTimeFromString(\"2024-08-07T10:12:08.922Z\"),\n                                ID: \"<value>\",\n                                Metadata: map[string]components.CustomFieldCheckboxMetadata{\n                                    \"key\": components.CreateCustomFieldCheckboxMetadataBoolean(\n                                        false,\n                                    ),\n                                },\n                                Slug: \"<value>\",\n                                Name: \"<value>\",\n                                OrganizationID: \"<value>\",\n                                Properties: components.CustomFieldCheckboxProperties{},\n                            },\n                        ),\n                        Order: 748789,\n                        Required: true,\n                    },\n                },\n            },\n            Price: components.CreateProductPriceRecurringProductPriceRecurringCustom(\n                components.ProductPriceRecurringCustom{\n                    CreatedAt: types.MustTimeFromString(\"2023-02-21T18:53:58.260Z\"),\n                    ModifiedAt: types.MustNewTimeFromString(\"2024-08-27T05:11:23.388Z\"),\n                    ID: \"<value>\",\n                    IsArchived: false,\n                    ProductID: \"<value>\",\n                    PriceCurrency: \"<value>\",\n                    MinimumAmount: polargo.Int64(188933),\n                    MaximumAmount: polargo.Int64(814719),\n                    PresetAmount: polargo.Int64(438932),\n                    RecurringInterval: components.SubscriptionRecurringIntervalMonth,\n                },\n            ),\n            Discount: components.CreateSubscriptionDiscountDiscountPercentageOnceForeverDurationBase(\n                components.DiscountPercentageOnceForeverDurationBase{\n                    Duration: components.DiscountDurationForever,\n                    Type: components.DiscountTypeFixed,\n                    BasisPoints: 116399,\n                    CreatedAt: types.MustTimeFromString(\"2024-09-29T12:11:21.682Z\"),\n                    ModifiedAt: types.MustNewTimeFromString(\"2022-07-03T04:55:47.377Z\"),\n                    ID: \"<value>\",\n                    Metadata: map[string]components.DiscountPercentageOnceForeverDurationBaseMetadata{\n\n                    },\n                    Name: \"<value>\",\n                    Code: polargo.String(\"<value>\"),\n                    StartsAt: types.MustNewTimeFromString(\"2022-03-13T02:22:01.631Z\"),\n                    EndsAt: types.MustNewTimeFromString(\"2024-09-16T04:55:19.972Z\"),\n                    MaxRedemptions: polargo.Int64(803154),\n                    RedemptionsCount: 825426,\n                    OrganizationID: \"<value>\",\n                },\n            ),\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["subscription.revoked"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "_endpointsubscription_revoked_post"
          "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/types\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New()\n\n    res, err := s.EndpointsubscriptionRevokedPost(ctx, components.WebhookSubscriptionRevokedPayload{\n        Data: components.Subscription{\n            CreatedAt: types.MustTimeFromString(\"2024-11-29T12:00:55.925Z\"),\n            ModifiedAt: types.MustNewTimeFromString(\"2022-03-13T04:36:55.320Z\"),\n            ID: \"<value>\",\n            Amount: polargo.Int64(780683),\n            Currency: polargo.String(\"CFP Franc\"),\n            RecurringInterval: components.SubscriptionRecurringIntervalYear,\n            Status: components.SubscriptionStatusTrialing,\n            CurrentPeriodStart: types.MustTimeFromString(\"2022-06-20T05:55:42.170Z\"),\n            CurrentPeriodEnd: types.MustNewTimeFromString(\"2023-05-17T17:55:53.899Z\"),\n            CancelAtPeriodEnd: true,\n            StartedAt: types.MustNewTimeFromString(\"2024-10-25T10:04:20.460Z\"),\n            EndedAt: types.MustNewTimeFromString(\"2023-09-30T18:36:35.285Z\"),\n            CustomerID: \"<value>\",\n            ProductID: \"<value>\",\n            PriceID: \"<value>\",\n            DiscountID: polargo.String(\"<value>\"),\n            CheckoutID: polargo.String(\"<value>\"),\n            Metadata: map[string]components.Metadata{\n                \"key\": components.CreateMetadataInteger(\n                    721489,\n                ),\n            },\n            Customer: components.SubscriptionCustomer{\n                CreatedAt: types.MustTimeFromString(\"2022-06-02T05:06:11.692Z\"),\n                ModifiedAt: types.MustNewTimeFromString(\"2024-09-02T15:09:07.489Z\"),\n                ID: \"<value>\",\n                Metadata: map[string]components.SubscriptionCustomerMetadata{\n                    \"key\": components.CreateSubscriptionCustomerMetadataInteger(\n                        112038,\n                    ),\n                    \"key1\": components.CreateSubscriptionCustomerMetadataInteger(\n                        182663,\n                    ),\n                    \"key2\": components.CreateSubscriptionCustomerMetadataInteger(\n                        85731,\n                    ),\n                },\n                Email: \"Tia59@yahoo.com\",\n                EmailVerified: true,\n                Name: polargo.String(\"<value>\"),\n                BillingAddress: &components.Address{\n                    Country: \"Azerbaijan\",\n                },\n                TaxID: []components.TaxID{\n                    components.CreateTaxIDTaxIDFormat(\n                        components.TaxIDFormatSgUen,\n                    ),\n                },\n                OrganizationID: \"<value>\",\n                AvatarURL: \"https://babyish-plastic.net\",\n            },\n            UserID: \"<value>\",\n            User: components.SubscriptionUser{\n                ID: \"<value>\",\n                Email: \"Reina59@yahoo.com\",\n                PublicName: \"<value>\",\n            },\n            Product: components.Product{\n                CreatedAt: types.MustTimeFromString(\"2023-11-12T08:35:43.186Z\"),\n                ModifiedAt: types.MustNewTimeFromString(\"2023-02-16T16:26:12.752Z\"),\n                ID: \"<value>\",\n                Name: \"<value>\",\n                Description: polargo.String(\"knavishly next unlike\"),\n                IsRecurring: false,\n                IsArchived: false,\n                OrganizationID: \"<value>\",\n                Metadata: map[string]components.ProductMetadata{\n\n                },\n                Prices: []components.ProductPrice{\n                    components.CreateProductPriceProductPriceRecurring(\n                        components.CreateProductPriceRecurringProductPriceRecurringFree(\n                            components.ProductPriceRecurringFree{\n                                CreatedAt: types.MustTimeFromString(\"2024-11-11T10:23:53.320Z\"),\n                                ModifiedAt: types.MustNewTimeFromString(\"2023-02-19T19:14:01.955Z\"),\n                                ID: \"<value>\",\n                                IsArchived: false,\n                                ProductID: \"<value>\",\n                                RecurringInterval: components.SubscriptionRecurringIntervalYear,\n                            },\n                        ),\n                    ),\n                    components.CreateProductPriceProductPriceRecurring(\n                        components.CreateProductPriceRecurringProductPriceRecurringCustom(\n                            components.ProductPriceRecurringCustom{\n                                CreatedAt: types.MustTimeFromString(\"2023-06-26T23:36:42.315Z\"),\n                                ModifiedAt: types.MustNewTimeFromString(\"2022-04-04T17:36:00.194Z\"),\n                                ID: \"<value>\",\n                                IsArchived: false,\n                                ProductID: \"<value>\",\n                                PriceCurrency: \"<value>\",\n                                MinimumAmount: polargo.Int64(945814),\n                                MaximumAmount: polargo.Int64(528613),\n                                PresetAmount: polargo.Int64(757041),\n                                RecurringInterval: components.SubscriptionRecurringIntervalYear,\n                            },\n                        ),\n                    ),\n                    components.CreateProductPriceProductPriceRecurring(\n                        components.CreateProductPriceRecurringProductPriceRecurringFixed(\n                            components.ProductPriceRecurringFixed{\n                                CreatedAt: types.MustTimeFromString(\"2022-01-09T05:55:55.925Z\"),\n                                ModifiedAt: types.MustNewTimeFromString(\"2024-11-02T14:07:17.605Z\"),\n                                ID: \"<value>\",\n                                IsArchived: false,\n                                ProductID: \"<value>\",\n                                PriceCurrency: \"<value>\",\n                                PriceAmount: 760908,\n                                RecurringInterval: components.SubscriptionRecurringIntervalMonth,\n                            },\n                        ),\n                    ),\n                },\n                Benefits: []components.Benefit{\n                    components.CreateBenefitBenefitDiscord(\n                        components.BenefitDiscord{\n                            CreatedAt: types.MustTimeFromString(\"2024-03-20T08:28:49.688Z\"),\n                            ModifiedAt: types.MustNewTimeFromString(\"2022-07-06T02:01:46.524Z\"),\n                            ID: \"<value>\",\n                            Description: \"blah altruistic vaguely delirious when submissive desk how tarragon ew\",\n                            Selectable: false,\n                            Deletable: false,\n                            OrganizationID: \"<value>\",\n                            Properties: components.BenefitDiscordProperties{\n                                GuildID: \"<id>\",\n                                RoleID: \"<id>\",\n                                GuildToken: \"<value>\",\n                            },\n                        },\n                    ),\n                },\n                Medias: []components.ProductMediaFileRead{\n                    components.ProductMediaFileRead{\n                        ID: \"<value>\",\n                        OrganizationID: \"<value>\",\n                        Name: \"<value>\",\n                        Path: \"/selinux\",\n                        MimeType: \"<value>\",\n                        Size: 307478,\n                        StorageVersion: polargo.String(\"<value>\"),\n                        ChecksumEtag: polargo.String(\"<value>\"),\n                        ChecksumSha256Base64: polargo.String(\"<value>\"),\n                        ChecksumSha256Hex: polargo.String(\"<value>\"),\n                        LastModifiedAt: types.MustNewTimeFromString(\"2023-08-09T04:03:47.757Z\"),\n                        Version: polargo.String(\"<value>\"),\n                        IsUploaded: true,\n                        CreatedAt: types.MustTimeFromString(\"2024-03-19T06:48:17.921Z\"),\n                        SizeReadable: \"<value>\",\n                        PublicURL: \"https://bleak-worth.name\",\n                    },\n                    components.ProductMediaFileRead{\n                        ID: \"<value>\",\n                        OrganizationID: \"<value>\",\n                        Name: \"<value>\",\n                        Path: \"/opt/sbin\",\n                        MimeType: \"<value>\",\n                        Size: 846156,\n                        StorageVersion: polargo.String(\"<value>\"),\n                        ChecksumEtag: polargo.String(\"<value>\"),\n                        ChecksumSha256Base64: polargo.String(\"<value>\"),\n                        ChecksumSha256Hex: polargo.String(\"<value>\"),\n                        LastModifiedAt: types.MustNewTimeFromString(\"2024-07-22T16:48:21.593Z\"),\n                        Version: polargo.String(\"<value>\"),\n                        IsUploaded: false,\n                        CreatedAt: types.MustTimeFromString(\"2022-01-29T12:49:28.784Z\"),\n                        SizeReadable: \"<value>\",\n                        PublicURL: \"https://unusual-switch.name\",\n                    },\n                    components.ProductMediaFileRead{\n                        ID: \"<value>\",\n                        OrganizationID: \"<value>\",\n                        Name: \"<value>\",\n                        Path: \"/var/mail\",\n                        MimeType: \"<value>\",\n                        Size: 4230,\n                        StorageVersion: polargo.String(\"<value>\"),\n                        ChecksumEtag: polargo.String(\"<value>\"),\n                        ChecksumSha256Base64: polargo.String(\"<value>\"),\n                        ChecksumSha256Hex: polargo.String(\"<value>\"),\n                        LastModifiedAt: types.MustNewTimeFromString(\"2024-09-24T13:03:31.087Z\"),\n                        Version: polargo.String(\"<value>\"),\n                        IsUploaded: true,\n                        CreatedAt: types.MustTimeFromString(\"2022-07-22T04:02:13.353Z\"),\n                        SizeReadable: \"<value>\",\n                        PublicURL: \"https://warm-sideboard.name/\",\n                    },\n                },\n                AttachedCustomFields: []components.AttachedCustomField{\n                    components.AttachedCustomField{\n                        CustomFieldID: \"<value>\",\n                        CustomField: components.CreateCustomFieldCustomFieldText(\n                            components.CustomFieldText{\n                                CreatedAt: types.MustTimeFromString(\"2023-05-06T13:33:08.877Z\"),\n                                ModifiedAt: types.MustNewTimeFromString(\"2022-10-27T11:52:34.438Z\"),\n                                ID: \"<value>\",\n                                Metadata: map[string]components.CustomFieldTextMetadata{\n                                    \"key\": components.CreateCustomFieldTextMetadataInteger(\n                                        500371,\n                                    ),\n                                },\n                                Slug: \"<value>\",\n                                Name: \"<value>\",\n                                OrganizationID: \"<value>\",\n                                Properties: components.CustomFieldTextProperties{},\n                            },\n                        ),\n                        Order: 740600,\n                        Required: false,\n                    },\n                },\n            },\n            Price: components.CreateProductPriceRecurringProductPriceRecurringCustom(\n                components.ProductPriceRecurringCustom{\n                    CreatedAt: types.MustTimeFromString(\"2024-04-23T08:39:31.977Z\"),\n                    ModifiedAt: types.MustNewTimeFromString(\"2023-09-21T10:36:30.029Z\"),\n                    ID: \"<value>\",\n                    IsArchived: false,\n                    ProductID: \"<value>\",\n                    PriceCurrency: \"<value>\",\n                    MinimumAmount: polargo.Int64(754926),\n                    MaximumAmount: polargo.Int64(436377),\n                    PresetAmount: polargo.Int64(53495),\n                    RecurringInterval: components.SubscriptionRecurringIntervalYear,\n                },\n            ),\n            Discount: components.CreateSubscriptionDiscountDiscountFixedOnceForeverDurationBase(\n                components.DiscountFixedOnceForeverDurationBase{\n                    Duration: components.DiscountDurationOnce,\n                    Type: components.DiscountTypeFixed,\n                    Amount: 206819,\n                    Currency: \"Aruban Guilder\",\n                    CreatedAt: types.MustTimeFromString(\"2023-01-06T10:09:42.620Z\"),\n                    ModifiedAt: types.MustNewTimeFromString(\"2023-02-18T03:56:02.453Z\"),\n                    ID: \"<value>\",\n                    Metadata: map[string]components.DiscountFixedOnceForeverDurationBaseMetadata{\n                        \"key\": components.CreateDiscountFixedOnceForeverDurationBaseMetadataBoolean(\n                            false,\n                        ),\n                    },\n                    Name: \"<value>\",\n                    Code: polargo.String(\"<value>\"),\n                    StartsAt: types.MustNewTimeFromString(\"2022-01-05T17:30:38.705Z\"),\n                    EndsAt: types.MustNewTimeFromString(\"2023-10-23T06:57:42.013Z\"),\n                    MaxRedemptions: polargo.Int64(138559),\n                    RedemptionsCount: 157916,\n                    OrganizationID: \"<value>\",\n                },\n            ),\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
  - target: $["paths"]["subscription.updated"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "_endpointsubscription_updated_post"
          "source": "package main\n\nimport(\n\t\"context\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/types\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New()\n\n    res, err := s.EndpointsubscriptionUpdatedPost(ctx, components.WebhookSubscriptionUpdatedPayload{\n        Data: components.Subscription{\n            CreatedAt: types.MustTimeFromString(\"2022-08-16T06:35:49.390Z\"),\n            ModifiedAt: types.MustNewTimeFromString(\"2024-11-13T10:48:05.575Z\"),\n            ID: \"<value>\",\n            Amount: polargo.Int64(299644),\n            Currency: polargo.String(\"Baht\"),\n            RecurringInterval: components.SubscriptionRecurringIntervalYear,\n            Status: components.SubscriptionStatusTrialing,\n            CurrentPeriodStart: types.MustTimeFromString(\"2024-10-06T07:01:55.000Z\"),\n            CurrentPeriodEnd: types.MustNewTimeFromString(\"2024-01-21T06:59:31.349Z\"),\n            CancelAtPeriodEnd: false,\n            StartedAt: types.MustNewTimeFromString(\"2022-10-04T04:56:04.382Z\"),\n            EndedAt: types.MustNewTimeFromString(\"2022-01-22T12:57:07.430Z\"),\n            CustomerID: \"<value>\",\n            ProductID: \"<value>\",\n            PriceID: \"<value>\",\n            DiscountID: polargo.String(\"<value>\"),\n            CheckoutID: polargo.String(\"<value>\"),\n            Metadata: map[string]components.Metadata{\n                \"key\": components.CreateMetadataStr(\n                    \"<value>\",\n                ),\n                \"key1\": components.CreateMetadataInteger(\n                    442859,\n                ),\n                \"key2\": components.CreateMetadataInteger(\n                    394013,\n                ),\n            },\n            Customer: components.SubscriptionCustomer{\n                CreatedAt: types.MustTimeFromString(\"2024-09-14T04:37:19.722Z\"),\n                ModifiedAt: types.MustNewTimeFromString(\"2024-03-24T00:03:13.207Z\"),\n                ID: \"<value>\",\n                Metadata: map[string]components.SubscriptionCustomerMetadata{\n                    \"key\": components.CreateSubscriptionCustomerMetadataStr(\n                        \"<value>\",\n                    ),\n                    \"key1\": components.CreateSubscriptionCustomerMetadataBoolean(\n                        true,\n                    ),\n                    \"key2\": components.CreateSubscriptionCustomerMetadataInteger(\n                        392900,\n                    ),\n                },\n                Email: \"Dominic.Toy27@yahoo.com\",\n                EmailVerified: false,\n                Name: polargo.String(\"<value>\"),\n                BillingAddress: &components.Address{\n                    Country: \"Sweden\",\n                },\n                TaxID: []components.TaxID{\n                    components.CreateTaxIDStr(\n                        \"mx_rfc\",\n                    ),\n                    components.CreateTaxIDStr(\n                        \"gb_vat\",\n                    ),\n                    components.CreateTaxIDStr(\n                        \"<value>\",\n                    ),\n                },\n                OrganizationID: \"<value>\",\n                AvatarURL: \"https://worthy-place.biz\",\n            },\n            UserID: \"<value>\",\n            User: components.SubscriptionUser{\n                ID: \"<value>\",\n                Email: \"Domenico_Franecki46@hotmail.com\",\n                PublicName: \"<value>\",\n            },\n            Product: components.Product{\n                CreatedAt: types.MustTimeFromString(\"2023-06-12T14:55:33.574Z\"),\n                ModifiedAt: types.MustNewTimeFromString(\"2022-06-02T07:14:13.619Z\"),\n                ID: \"<value>\",\n                Name: \"<value>\",\n                Description: polargo.String(\"intent that yowza\"),\n                IsRecurring: true,\n                IsArchived: false,\n                OrganizationID: \"<value>\",\n                Metadata: map[string]components.ProductMetadata{\n                    \"key\": components.CreateProductMetadataStr(\n                        \"<value>\",\n                    ),\n                    \"key1\": components.CreateProductMetadataBoolean(\n                        true,\n                    ),\n                },\n                Prices: []components.ProductPrice{\n                    components.CreateProductPriceProductPriceRecurring(\n                        components.CreateProductPriceRecurringProductPriceRecurringFree(\n                            components.ProductPriceRecurringFree{\n                                CreatedAt: types.MustTimeFromString(\"2022-02-04T10:40:02.757Z\"),\n                                ModifiedAt: types.MustNewTimeFromString(\"2022-03-05T14:45:21.856Z\"),\n                                ID: \"<value>\",\n                                IsArchived: false,\n                                ProductID: \"<value>\",\n                                RecurringInterval: components.SubscriptionRecurringIntervalYear,\n                            },\n                        ),\n                    ),\n                },\n                Benefits: []components.Benefit{\n                    components.CreateBenefitBenefitDownloadables(\n                        components.BenefitDownloadables{\n                            CreatedAt: types.MustTimeFromString(\"2024-08-20T20:05:26.320Z\"),\n                            ModifiedAt: types.MustNewTimeFromString(\"2023-11-01T08:07:46.637Z\"),\n                            ID: \"<value>\",\n                            Description: \"rare foolishly far vastly gah until how considering yahoo\",\n                            Selectable: false,\n                            Deletable: false,\n                            OrganizationID: \"<value>\",\n                            Properties: components.BenefitDownloadablesProperties{\n                                Archived: map[string]bool{\n                                    \"key\": false,\n                                },\n                                Files: []string{\n                                    \"<value>\",\n                                },\n                            },\n                        },\n                    ),\n                },\n                Medias: []components.ProductMediaFileRead{\n                    components.ProductMediaFileRead{\n                        ID: \"<value>\",\n                        OrganizationID: \"<value>\",\n                        Name: \"<value>\",\n                        Path: \"/lost+found\",\n                        MimeType: \"<value>\",\n                        Size: 562154,\n                        StorageVersion: polargo.String(\"<value>\"),\n                        ChecksumEtag: polargo.String(\"<value>\"),\n                        ChecksumSha256Base64: polargo.String(\"<value>\"),\n                        ChecksumSha256Hex: polargo.String(\"<value>\"),\n                        LastModifiedAt: types.MustNewTimeFromString(\"2024-08-06T03:20:53.935Z\"),\n                        Version: polargo.String(\"<value>\"),\n                        IsUploaded: false,\n                        CreatedAt: types.MustTimeFromString(\"2023-09-07T09:54:32.715Z\"),\n                        SizeReadable: \"<value>\",\n                        PublicURL: \"https://rare-trash.info\",\n                    },\n                    components.ProductMediaFileRead{\n                        ID: \"<value>\",\n                        OrganizationID: \"<value>\",\n                        Name: \"<value>\",\n                        Path: \"/etc/ppp\",\n                        MimeType: \"<value>\",\n                        Size: 66044,\n                        StorageVersion: polargo.String(\"<value>\"),\n                        ChecksumEtag: polargo.String(\"<value>\"),\n                        ChecksumSha256Base64: polargo.String(\"<value>\"),\n                        ChecksumSha256Hex: polargo.String(\"<value>\"),\n                        LastModifiedAt: types.MustNewTimeFromString(\"2024-07-07T23:54:00.303Z\"),\n                        Version: polargo.String(\"<value>\"),\n                        IsUploaded: true,\n                        CreatedAt: types.MustTimeFromString(\"2022-10-11T04:49:26.739Z\"),\n                        SizeReadable: \"<value>\",\n                        PublicURL: \"https://worse-ceramic.org\",\n                    },\n                    components.ProductMediaFileRead{\n                        ID: \"<value>\",\n                        OrganizationID: \"<value>\",\n                        Name: \"<value>\",\n                        Path: \"/home\",\n                        MimeType: \"<value>\",\n                        Size: 75695,\n                        StorageVersion: polargo.String(\"<value>\"),\n                        ChecksumEtag: polargo.String(\"<value>\"),\n                        ChecksumSha256Base64: polargo.String(\"<value>\"),\n                        ChecksumSha256Hex: polargo.String(\"<value>\"),\n                        LastModifiedAt: types.MustNewTimeFromString(\"2022-09-16T06:56:23.715Z\"),\n                        Version: polargo.String(\"<value>\"),\n                        IsUploaded: false,\n                        CreatedAt: types.MustTimeFromString(\"2023-06-23T20:54:57.375Z\"),\n                        SizeReadable: \"<value>\",\n                        PublicURL: \"https://closed-seafood.info\",\n                    },\n                },\n                AttachedCustomFields: []components.AttachedCustomField{\n                    components.AttachedCustomField{\n                        CustomFieldID: \"<value>\",\n                        CustomField: components.CreateCustomFieldCustomFieldSelect(\n                            components.CustomFieldSelect{\n                                CreatedAt: types.MustTimeFromString(\"2023-03-27T06:41:23.276Z\"),\n                                ModifiedAt: types.MustNewTimeFromString(\"2024-09-01T19:58:32.729Z\"),\n                                ID: \"<value>\",\n                                Metadata: map[string]components.CustomFieldSelectMetadata{\n                                    \"key\": components.CreateCustomFieldSelectMetadataStr(\n                                        \"<value>\",\n                                    ),\n                                },\n                                Slug: \"<value>\",\n                                Name: \"<value>\",\n                                OrganizationID: \"<value>\",\n                                Properties: components.CustomFieldSelectProperties{\n                                    Options: []components.CustomFieldSelectOption{\n                                        components.CustomFieldSelectOption{\n                                            Value: \"<value>\",\n                                            Label: \"<value>\",\n                                        },\n                                    },\n                                },\n                            },\n                        ),\n                        Order: 553735,\n                        Required: false,\n                    },\n                    components.AttachedCustomField{\n                        CustomFieldID: \"<value>\",\n                        CustomField: components.CreateCustomFieldCustomFieldCheckbox(\n                            components.CustomFieldCheckbox{\n                                CreatedAt: types.MustTimeFromString(\"2023-05-05T17:22:39.312Z\"),\n                                ModifiedAt: types.MustNewTimeFromString(\"2022-04-14T22:18:43.778Z\"),\n                                ID: \"<value>\",\n                                Metadata: map[string]components.CustomFieldCheckboxMetadata{\n                                    \"key\": components.CreateCustomFieldCheckboxMetadataInteger(\n                                        628033,\n                                    ),\n                                },\n                                Slug: \"<value>\",\n                                Name: \"<value>\",\n                                OrganizationID: \"<value>\",\n                                Properties: components.CustomFieldCheckboxProperties{},\n                            },\n                        ),\n                        Order: 892169,\n                        Required: true,\n                    },\n                    components.AttachedCustomField{\n                        CustomFieldID: \"<value>\",\n                        CustomField: components.CreateCustomFieldCustomFieldCheckbox(\n                            components.CustomFieldCheckbox{\n                                CreatedAt: types.MustTimeFromString(\"2023-03-02T13:08:49.991Z\"),\n                                ModifiedAt: types.MustNewTimeFromString(\"2024-03-20T14:00:49.875Z\"),\n                                ID: \"<value>\",\n                                Metadata: map[string]components.CustomFieldCheckboxMetadata{\n                                    \"key\": components.CreateCustomFieldCheckboxMetadataStr(\n                                        \"<value>\",\n                                    ),\n                                },\n                                Slug: \"<value>\",\n                                Name: \"<value>\",\n                                OrganizationID: \"<value>\",\n                                Properties: components.CustomFieldCheckboxProperties{},\n                            },\n                        ),\n                        Order: 578881,\n                        Required: false,\n                    },\n                },\n            },\n            Price: components.CreateProductPriceRecurringProductPriceRecurringFree(\n                components.ProductPriceRecurringFree{\n                    CreatedAt: types.MustTimeFromString(\"2024-06-19T09:42:14.287Z\"),\n                    ModifiedAt: types.MustNewTimeFromString(\"2022-03-12T15:28:25.287Z\"),\n                    ID: \"<value>\",\n                    IsArchived: false,\n                    ProductID: \"<value>\",\n                    RecurringInterval: components.SubscriptionRecurringIntervalYear,\n                },\n            ),\n            Discount: components.CreateSubscriptionDiscountDiscountFixedOnceForeverDurationBase(\n                components.DiscountFixedOnceForeverDurationBase{\n                    Duration: components.DiscountDurationRepeating,\n                    Type: components.DiscountTypePercentage,\n                    Amount: 212227,\n                    Currency: \"Leone\",\n                    CreatedAt: types.MustTimeFromString(\"2023-08-20T10:09:40.057Z\"),\n                    ModifiedAt: types.MustNewTimeFromString(\"2024-03-03T12:17:34.471Z\"),\n                    ID: \"<value>\",\n                    Metadata: map[string]components.DiscountFixedOnceForeverDurationBaseMetadata{\n                        \"key\": components.CreateDiscountFixedOnceForeverDurationBaseMetadataInteger(\n                            925710,\n                        ),\n                    },\n                    Name: \"<value>\",\n                    Code: polargo.String(\"<value>\"),\n                    StartsAt: types.MustNewTimeFromString(\"2022-06-18T09:38:27.851Z\"),\n                    EndsAt: types.MustNewTimeFromString(\"2024-12-13T05:04:14.428Z\"),\n                    MaxRedemptions: polargo.Int64(341415),\n                    RedemptionsCount: 222865,\n                    OrganizationID: \"<value>\",\n                },\n            ),\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Any != nil {\n        // handle response\n    }\n}"
