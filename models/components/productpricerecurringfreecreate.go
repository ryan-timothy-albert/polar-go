// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/polarsource/polar-go/internal/utils"
)

// ProductPriceRecurringFreeCreate - Schema to create a free recurring product price, i.e. a subscription.
type ProductPriceRecurringFreeCreate struct {
	type_             string                        `const:"recurring" json:"type"`
	amountType        string                        `const:"free" json:"amount_type"`
	RecurringInterval SubscriptionRecurringInterval `json:"recurring_interval"`
}

func (p ProductPriceRecurringFreeCreate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProductPriceRecurringFreeCreate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ProductPriceRecurringFreeCreate) GetType() string {
	return "recurring"
}

func (o *ProductPriceRecurringFreeCreate) GetAmountType() string {
	return "free"
}

func (o *ProductPriceRecurringFreeCreate) GetRecurringInterval() SubscriptionRecurringInterval {
	if o == nil {
		return SubscriptionRecurringInterval("")
	}
	return o.RecurringInterval
}
