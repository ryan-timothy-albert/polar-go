// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
)

type CustomerBenefitGrantDownloadablesUpdateBenefitType string

const (
	CustomerBenefitGrantDownloadablesUpdateBenefitTypeDownloadables CustomerBenefitGrantDownloadablesUpdateBenefitType = "downloadables"
)

func (e CustomerBenefitGrantDownloadablesUpdateBenefitType) ToPointer() *CustomerBenefitGrantDownloadablesUpdateBenefitType {
	return &e
}
func (e *CustomerBenefitGrantDownloadablesUpdateBenefitType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "downloadables":
		*e = CustomerBenefitGrantDownloadablesUpdateBenefitType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CustomerBenefitGrantDownloadablesUpdateBenefitType: %v", v)
	}
}

type CustomerBenefitGrantDownloadablesUpdate struct {
	benefitType CustomerBenefitGrantDownloadablesUpdateBenefitType `const:"downloadables" json:"benefit_type"`
}

func (c CustomerBenefitGrantDownloadablesUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CustomerBenefitGrantDownloadablesUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CustomerBenefitGrantDownloadablesUpdate) GetBenefitType() CustomerBenefitGrantDownloadablesUpdateBenefitType {
	return CustomerBenefitGrantDownloadablesUpdateBenefitTypeDownloadables
}
