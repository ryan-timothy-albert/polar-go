// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
)

type CustomFieldUpdateDateMetadataType string

const (
	CustomFieldUpdateDateMetadataTypeStr     CustomFieldUpdateDateMetadataType = "str"
	CustomFieldUpdateDateMetadataTypeInteger CustomFieldUpdateDateMetadataType = "integer"
	CustomFieldUpdateDateMetadataTypeBoolean CustomFieldUpdateDateMetadataType = "boolean"
)

type CustomFieldUpdateDateMetadata struct {
	Str     *string `queryParam:"inline"`
	Integer *int64  `queryParam:"inline"`
	Boolean *bool   `queryParam:"inline"`

	Type CustomFieldUpdateDateMetadataType
}

func CreateCustomFieldUpdateDateMetadataStr(str string) CustomFieldUpdateDateMetadata {
	typ := CustomFieldUpdateDateMetadataTypeStr

	return CustomFieldUpdateDateMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateCustomFieldUpdateDateMetadataInteger(integer int64) CustomFieldUpdateDateMetadata {
	typ := CustomFieldUpdateDateMetadataTypeInteger

	return CustomFieldUpdateDateMetadata{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCustomFieldUpdateDateMetadataBoolean(boolean bool) CustomFieldUpdateDateMetadata {
	typ := CustomFieldUpdateDateMetadataTypeBoolean

	return CustomFieldUpdateDateMetadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CustomFieldUpdateDateMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CustomFieldUpdateDateMetadataTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = CustomFieldUpdateDateMetadataTypeInteger
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = CustomFieldUpdateDateMetadataTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomFieldUpdateDateMetadata", string(data))
}

func (u CustomFieldUpdateDateMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type CustomFieldUpdateDateMetadata: all fields are null")
}

type CustomFieldUpdateDateType string

const (
	CustomFieldUpdateDateTypeDate CustomFieldUpdateDateType = "date"
)

func (e CustomFieldUpdateDateType) ToPointer() *CustomFieldUpdateDateType {
	return &e
}
func (e *CustomFieldUpdateDateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = CustomFieldUpdateDateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CustomFieldUpdateDateType: %v", v)
	}
}

// CustomFieldUpdateDate - Schema to update a custom field of type date.
type CustomFieldUpdateDate struct {
	// Key-value object allowing you to store additional information.
	//
	// The key must be a string with a maximum length of **40 characters**.
	// The value must be either:
	//
	// * A string with a maximum length of **500 characters**
	// * An integer
	// * A boolean
	//
	// You can store up to **50 key-value pairs**.
	Metadata   map[string]CustomFieldUpdateDateMetadata `json:"metadata,omitempty"`
	Name       *string                                  `json:"name,omitempty"`
	Slug       *string                                  `json:"slug,omitempty"`
	type_      CustomFieldUpdateDateType                `const:"date" json:"type"`
	Properties *CustomFieldDateProperties               `json:"properties,omitempty"`
}

func (c CustomFieldUpdateDate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CustomFieldUpdateDate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CustomFieldUpdateDate) GetMetadata() map[string]CustomFieldUpdateDateMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CustomFieldUpdateDate) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CustomFieldUpdateDate) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CustomFieldUpdateDate) GetType() CustomFieldUpdateDateType {
	return CustomFieldUpdateDateTypeDate
}

func (o *CustomFieldUpdateDate) GetProperties() *CustomFieldDateProperties {
	if o == nil {
		return nil
	}
	return o.Properties
}
