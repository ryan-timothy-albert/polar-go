// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"polar/internal/utils"
)

type OAuth2ClientConfigurationTokenEndpointAuthMethod string

const (
	OAuth2ClientConfigurationTokenEndpointAuthMethodClientSecretBasic OAuth2ClientConfigurationTokenEndpointAuthMethod = "client_secret_basic"
	OAuth2ClientConfigurationTokenEndpointAuthMethodClientSecretPost  OAuth2ClientConfigurationTokenEndpointAuthMethod = "client_secret_post"
	OAuth2ClientConfigurationTokenEndpointAuthMethodNone              OAuth2ClientConfigurationTokenEndpointAuthMethod = "none"
)

func (e OAuth2ClientConfigurationTokenEndpointAuthMethod) ToPointer() *OAuth2ClientConfigurationTokenEndpointAuthMethod {
	return &e
}
func (e *OAuth2ClientConfigurationTokenEndpointAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "client_secret_basic":
		fallthrough
	case "client_secret_post":
		fallthrough
	case "none":
		*e = OAuth2ClientConfigurationTokenEndpointAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OAuth2ClientConfigurationTokenEndpointAuthMethod: %v", v)
	}
}

type OAuth2ClientConfigurationGrantTypes string

const (
	OAuth2ClientConfigurationGrantTypesAuthorizationCode OAuth2ClientConfigurationGrantTypes = "authorization_code"
	OAuth2ClientConfigurationGrantTypesRefreshToken      OAuth2ClientConfigurationGrantTypes = "refresh_token"
)

func (e OAuth2ClientConfigurationGrantTypes) ToPointer() *OAuth2ClientConfigurationGrantTypes {
	return &e
}
func (e *OAuth2ClientConfigurationGrantTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "authorization_code":
		fallthrough
	case "refresh_token":
		*e = OAuth2ClientConfigurationGrantTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OAuth2ClientConfigurationGrantTypes: %v", v)
	}
}

type OAuth2ClientConfigurationResponseTypes string

const (
	OAuth2ClientConfigurationResponseTypesCode OAuth2ClientConfigurationResponseTypes = "code"
)

func (e OAuth2ClientConfigurationResponseTypes) ToPointer() *OAuth2ClientConfigurationResponseTypes {
	return &e
}
func (e *OAuth2ClientConfigurationResponseTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "code":
		*e = OAuth2ClientConfigurationResponseTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OAuth2ClientConfigurationResponseTypes: %v", v)
	}
}

type OAuth2ClientConfiguration struct {
	RedirectUris            []string                                          `json:"redirect_uris"`
	TokenEndpointAuthMethod *OAuth2ClientConfigurationTokenEndpointAuthMethod `default:"client_secret_post" json:"token_endpoint_auth_method"`
	GrantTypes              []OAuth2ClientConfigurationGrantTypes             `json:"grant_types,omitempty"`
	ResponseTypes           []OAuth2ClientConfigurationResponseTypes          `json:"response_types,omitempty"`
	Scope                   *string                                           `default:"openid profile email user:read organizations:read organizations:write custom_fields:read custom_fields:write discounts:read discounts:write checkout_links:read checkout_links:write checkouts:read checkouts:write products:read products:write benefits:read benefits:write files:read files:write subscriptions:read subscriptions:write customers:read customers:write orders:read metrics:read webhooks:read webhooks:write external_organizations:read license_keys:read license_keys:write repositories:read repositories:write issues:read issues:write customer_portal:read customer_portal:write" json:"scope"`
	ClientName              string                                            `json:"client_name"`
	ClientURI               *string                                           `json:"client_uri,omitempty"`
	LogoURI                 *string                                           `json:"logo_uri,omitempty"`
	TosURI                  *string                                           `json:"tos_uri,omitempty"`
	PolicyURI               *string                                           `json:"policy_uri,omitempty"`
}

func (o OAuth2ClientConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OAuth2ClientConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OAuth2ClientConfiguration) GetRedirectUris() []string {
	if o == nil {
		return []string{}
	}
	return o.RedirectUris
}

func (o *OAuth2ClientConfiguration) GetTokenEndpointAuthMethod() *OAuth2ClientConfigurationTokenEndpointAuthMethod {
	if o == nil {
		return nil
	}
	return o.TokenEndpointAuthMethod
}

func (o *OAuth2ClientConfiguration) GetGrantTypes() []OAuth2ClientConfigurationGrantTypes {
	if o == nil {
		return nil
	}
	return o.GrantTypes
}

func (o *OAuth2ClientConfiguration) GetResponseTypes() []OAuth2ClientConfigurationResponseTypes {
	if o == nil {
		return nil
	}
	return o.ResponseTypes
}

func (o *OAuth2ClientConfiguration) GetScope() *string {
	if o == nil {
		return nil
	}
	return o.Scope
}

func (o *OAuth2ClientConfiguration) GetClientName() string {
	if o == nil {
		return ""
	}
	return o.ClientName
}

func (o *OAuth2ClientConfiguration) GetClientURI() *string {
	if o == nil {
		return nil
	}
	return o.ClientURI
}

func (o *OAuth2ClientConfiguration) GetLogoURI() *string {
	if o == nil {
		return nil
	}
	return o.LogoURI
}

func (o *OAuth2ClientConfiguration) GetTosURI() *string {
	if o == nil {
		return nil
	}
	return o.TosURI
}

func (o *OAuth2ClientConfiguration) GetPolicyURI() *string {
	if o == nil {
		return nil
	}
	return o.PolicyURI
}
