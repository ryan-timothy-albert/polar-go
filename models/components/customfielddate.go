// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
	"time"
)

type CustomFieldDateMetadataType string

const (
	CustomFieldDateMetadataTypeStr     CustomFieldDateMetadataType = "str"
	CustomFieldDateMetadataTypeInteger CustomFieldDateMetadataType = "integer"
	CustomFieldDateMetadataTypeBoolean CustomFieldDateMetadataType = "boolean"
)

type CustomFieldDateMetadata struct {
	Str     *string `queryParam:"inline"`
	Integer *int64  `queryParam:"inline"`
	Boolean *bool   `queryParam:"inline"`

	Type CustomFieldDateMetadataType
}

func CreateCustomFieldDateMetadataStr(str string) CustomFieldDateMetadata {
	typ := CustomFieldDateMetadataTypeStr

	return CustomFieldDateMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateCustomFieldDateMetadataInteger(integer int64) CustomFieldDateMetadata {
	typ := CustomFieldDateMetadataTypeInteger

	return CustomFieldDateMetadata{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCustomFieldDateMetadataBoolean(boolean bool) CustomFieldDateMetadata {
	typ := CustomFieldDateMetadataTypeBoolean

	return CustomFieldDateMetadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CustomFieldDateMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CustomFieldDateMetadataTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = CustomFieldDateMetadataTypeInteger
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = CustomFieldDateMetadataTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomFieldDateMetadata", string(data))
}

func (u CustomFieldDateMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type CustomFieldDateMetadata: all fields are null")
}

// CustomFieldDate - Schema for a custom field of type date.
type CustomFieldDate struct {
	// Creation timestamp of the object.
	CreatedAt time.Time `json:"created_at"`
	// Last modification timestamp of the object.
	ModifiedAt *time.Time `json:"modified_at"`
	// The ID of the object.
	ID       string                             `json:"id"`
	Metadata map[string]CustomFieldDateMetadata `json:"metadata"`
	type_    string                             `const:"date" json:"type"`
	// Identifier of the custom field. It'll be used as key when storing the value.
	Slug string `json:"slug"`
	// Name of the custom field.
	Name string `json:"name"`
	// The ID of the organization owning the custom field.
	OrganizationID string                    `json:"organization_id"`
	Properties     CustomFieldDateProperties `json:"properties"`
}

func (c CustomFieldDate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CustomFieldDate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CustomFieldDate) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *CustomFieldDate) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *CustomFieldDate) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CustomFieldDate) GetMetadata() map[string]CustomFieldDateMetadata {
	if o == nil {
		return map[string]CustomFieldDateMetadata{}
	}
	return o.Metadata
}

func (o *CustomFieldDate) GetType() string {
	return "date"
}

func (o *CustomFieldDate) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *CustomFieldDate) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CustomFieldDate) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *CustomFieldDate) GetProperties() CustomFieldDateProperties {
	if o == nil {
		return CustomFieldDateProperties{}
	}
	return o.Properties
}
