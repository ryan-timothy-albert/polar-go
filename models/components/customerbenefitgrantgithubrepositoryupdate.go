// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"polar/internal/utils"
)

type CustomerBenefitGrantGitHubRepositoryUpdateBenefitType string

const (
	CustomerBenefitGrantGitHubRepositoryUpdateBenefitTypeGithubRepository CustomerBenefitGrantGitHubRepositoryUpdateBenefitType = "github_repository"
)

func (e CustomerBenefitGrantGitHubRepositoryUpdateBenefitType) ToPointer() *CustomerBenefitGrantGitHubRepositoryUpdateBenefitType {
	return &e
}
func (e *CustomerBenefitGrantGitHubRepositoryUpdateBenefitType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github_repository":
		*e = CustomerBenefitGrantGitHubRepositoryUpdateBenefitType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CustomerBenefitGrantGitHubRepositoryUpdateBenefitType: %v", v)
	}
}

type CustomerBenefitGrantGitHubRepositoryUpdate struct {
	benefitType CustomerBenefitGrantGitHubRepositoryUpdateBenefitType `const:"github_repository" json:"benefit_type"`
	Properties  CustomerBenefitGrantGitHubRepositoryPropertiesUpdate  `json:"properties"`
}

func (c CustomerBenefitGrantGitHubRepositoryUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CustomerBenefitGrantGitHubRepositoryUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CustomerBenefitGrantGitHubRepositoryUpdate) GetBenefitType() CustomerBenefitGrantGitHubRepositoryUpdateBenefitType {
	return CustomerBenefitGrantGitHubRepositoryUpdateBenefitTypeGithubRepository
}

func (o *CustomerBenefitGrantGitHubRepositoryUpdate) GetProperties() CustomerBenefitGrantGitHubRepositoryPropertiesUpdate {
	if o == nil {
		return CustomerBenefitGrantGitHubRepositoryPropertiesUpdate{}
	}
	return o.Properties
}
