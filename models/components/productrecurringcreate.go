// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"polar/internal/utils"
)

type ProductRecurringCreateMetadataType string

const (
	ProductRecurringCreateMetadataTypeStr     ProductRecurringCreateMetadataType = "str"
	ProductRecurringCreateMetadataTypeInteger ProductRecurringCreateMetadataType = "integer"
	ProductRecurringCreateMetadataTypeBoolean ProductRecurringCreateMetadataType = "boolean"
)

type ProductRecurringCreateMetadata struct {
	Str     *string `queryParam:"inline"`
	Integer *int64  `queryParam:"inline"`
	Boolean *bool   `queryParam:"inline"`

	Type ProductRecurringCreateMetadataType
}

func CreateProductRecurringCreateMetadataStr(str string) ProductRecurringCreateMetadata {
	typ := ProductRecurringCreateMetadataTypeStr

	return ProductRecurringCreateMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateProductRecurringCreateMetadataInteger(integer int64) ProductRecurringCreateMetadata {
	typ := ProductRecurringCreateMetadataTypeInteger

	return ProductRecurringCreateMetadata{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateProductRecurringCreateMetadataBoolean(boolean bool) ProductRecurringCreateMetadata {
	typ := ProductRecurringCreateMetadataTypeBoolean

	return ProductRecurringCreateMetadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *ProductRecurringCreateMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ProductRecurringCreateMetadataTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = ProductRecurringCreateMetadataTypeInteger
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = ProductRecurringCreateMetadataTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ProductRecurringCreateMetadata", string(data))
}

func (u ProductRecurringCreateMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type ProductRecurringCreateMetadata: all fields are null")
}

type ProductRecurringCreatePricesType string

const (
	ProductRecurringCreatePricesTypeArrayOfProductPriceRecurringFixedCreate ProductRecurringCreatePricesType = "arrayOfProductPriceRecurringFixedCreate"
	ProductRecurringCreatePricesTypeArrayOfProductPriceRecurringFreeCreate  ProductRecurringCreatePricesType = "arrayOfProductPriceRecurringFreeCreate"
)

// ProductRecurringCreatePrices - List of available prices for this product.
type ProductRecurringCreatePrices struct {
	ArrayOfProductPriceRecurringFixedCreate []ProductPriceRecurringFixedCreate `queryParam:"inline"`
	ArrayOfProductPriceRecurringFreeCreate  []ProductPriceRecurringFreeCreate  `queryParam:"inline"`

	Type ProductRecurringCreatePricesType
}

func CreateProductRecurringCreatePricesArrayOfProductPriceRecurringFixedCreate(arrayOfProductPriceRecurringFixedCreate []ProductPriceRecurringFixedCreate) ProductRecurringCreatePrices {
	typ := ProductRecurringCreatePricesTypeArrayOfProductPriceRecurringFixedCreate

	return ProductRecurringCreatePrices{
		ArrayOfProductPriceRecurringFixedCreate: arrayOfProductPriceRecurringFixedCreate,
		Type:                                    typ,
	}
}

func CreateProductRecurringCreatePricesArrayOfProductPriceRecurringFreeCreate(arrayOfProductPriceRecurringFreeCreate []ProductPriceRecurringFreeCreate) ProductRecurringCreatePrices {
	typ := ProductRecurringCreatePricesTypeArrayOfProductPriceRecurringFreeCreate

	return ProductRecurringCreatePrices{
		ArrayOfProductPriceRecurringFreeCreate: arrayOfProductPriceRecurringFreeCreate,
		Type:                                   typ,
	}
}

func (u *ProductRecurringCreatePrices) UnmarshalJSON(data []byte) error {

	var arrayOfProductPriceRecurringFixedCreate []ProductPriceRecurringFixedCreate = []ProductPriceRecurringFixedCreate{}
	if err := utils.UnmarshalJSON(data, &arrayOfProductPriceRecurringFixedCreate, "", true, true); err == nil {
		u.ArrayOfProductPriceRecurringFixedCreate = arrayOfProductPriceRecurringFixedCreate
		u.Type = ProductRecurringCreatePricesTypeArrayOfProductPriceRecurringFixedCreate
		return nil
	}

	var arrayOfProductPriceRecurringFreeCreate []ProductPriceRecurringFreeCreate = []ProductPriceRecurringFreeCreate{}
	if err := utils.UnmarshalJSON(data, &arrayOfProductPriceRecurringFreeCreate, "", true, true); err == nil {
		u.ArrayOfProductPriceRecurringFreeCreate = arrayOfProductPriceRecurringFreeCreate
		u.Type = ProductRecurringCreatePricesTypeArrayOfProductPriceRecurringFreeCreate
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ProductRecurringCreatePrices", string(data))
}

func (u ProductRecurringCreatePrices) MarshalJSON() ([]byte, error) {
	if u.ArrayOfProductPriceRecurringFixedCreate != nil {
		return utils.MarshalJSON(u.ArrayOfProductPriceRecurringFixedCreate, "", true)
	}

	if u.ArrayOfProductPriceRecurringFreeCreate != nil {
		return utils.MarshalJSON(u.ArrayOfProductPriceRecurringFreeCreate, "", true)
	}

	return nil, errors.New("could not marshal union type ProductRecurringCreatePrices: all fields are null")
}

// ProductRecurringCreate - Schema to create a recurring product, i.e. a subscription.
type ProductRecurringCreate struct {
	// Key-value object allowing you to store additional information.
	//
	// The key must be a string with a maximum length of **40 characters**.
	// The value must be either:
	//
	// * A string with a maximum length of **500 characters**
	// * An integer
	// * A boolean
	//
	// You can store up to **50 key-value pairs**.
	Metadata map[string]ProductRecurringCreateMetadata `json:"metadata,omitempty"`
	// The name of the product.
	Name string `json:"name"`
	// The description of the product.
	Description *string `json:"description,omitempty"`
	// List of available prices for this product.
	Prices ProductRecurringCreatePrices `json:"prices"`
	// List of file IDs. Each one must be on the same organization as the product, of type `product_media` and correctly uploaded.
	Medias []string `json:"medias,omitempty"`
	// List of custom fields to attach.
	AttachedCustomFields []AttachedCustomFieldCreate `json:"attached_custom_fields,omitempty"`
	// The ID of the organization owning the product. **Required unless you use an organization token.**
	OrganizationID *string `json:"organization_id,omitempty"`
}

func (o *ProductRecurringCreate) GetMetadata() map[string]ProductRecurringCreateMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *ProductRecurringCreate) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ProductRecurringCreate) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ProductRecurringCreate) GetPrices() ProductRecurringCreatePrices {
	if o == nil {
		return ProductRecurringCreatePrices{}
	}
	return o.Prices
}

func (o *ProductRecurringCreate) GetMedias() []string {
	if o == nil {
		return nil
	}
	return o.Medias
}

func (o *ProductRecurringCreate) GetAttachedCustomFields() []AttachedCustomFieldCreate {
	if o == nil {
		return nil
	}
	return o.AttachedCustomFields
}

func (o *ProductRecurringCreate) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}
