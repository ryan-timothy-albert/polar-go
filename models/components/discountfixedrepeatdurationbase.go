// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
	"time"
)

type DiscountFixedRepeatDurationBaseMetadataType string

const (
	DiscountFixedRepeatDurationBaseMetadataTypeStr     DiscountFixedRepeatDurationBaseMetadataType = "str"
	DiscountFixedRepeatDurationBaseMetadataTypeInteger DiscountFixedRepeatDurationBaseMetadataType = "integer"
	DiscountFixedRepeatDurationBaseMetadataTypeBoolean DiscountFixedRepeatDurationBaseMetadataType = "boolean"
)

type DiscountFixedRepeatDurationBaseMetadata struct {
	Str     *string `queryParam:"inline"`
	Integer *int64  `queryParam:"inline"`
	Boolean *bool   `queryParam:"inline"`

	Type DiscountFixedRepeatDurationBaseMetadataType
}

func CreateDiscountFixedRepeatDurationBaseMetadataStr(str string) DiscountFixedRepeatDurationBaseMetadata {
	typ := DiscountFixedRepeatDurationBaseMetadataTypeStr

	return DiscountFixedRepeatDurationBaseMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateDiscountFixedRepeatDurationBaseMetadataInteger(integer int64) DiscountFixedRepeatDurationBaseMetadata {
	typ := DiscountFixedRepeatDurationBaseMetadataTypeInteger

	return DiscountFixedRepeatDurationBaseMetadata{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateDiscountFixedRepeatDurationBaseMetadataBoolean(boolean bool) DiscountFixedRepeatDurationBaseMetadata {
	typ := DiscountFixedRepeatDurationBaseMetadataTypeBoolean

	return DiscountFixedRepeatDurationBaseMetadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *DiscountFixedRepeatDurationBaseMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = DiscountFixedRepeatDurationBaseMetadataTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = DiscountFixedRepeatDurationBaseMetadataTypeInteger
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = DiscountFixedRepeatDurationBaseMetadataTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DiscountFixedRepeatDurationBaseMetadata", string(data))
}

func (u DiscountFixedRepeatDurationBaseMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type DiscountFixedRepeatDurationBaseMetadata: all fields are null")
}

type DiscountFixedRepeatDurationBase struct {
	Duration         DiscountDuration `json:"duration"`
	DurationInMonths int64            `json:"duration_in_months"`
	Type             DiscountType     `json:"type"`
	Amount           int64            `json:"amount"`
	Currency         string           `json:"currency"`
	// Creation timestamp of the object.
	CreatedAt time.Time `json:"created_at"`
	// Last modification timestamp of the object.
	ModifiedAt *time.Time `json:"modified_at"`
	// The ID of the object.
	ID       string                                             `json:"id"`
	Metadata map[string]DiscountFixedRepeatDurationBaseMetadata `json:"metadata"`
	// Name of the discount. Will be displayed to the customer when the discount is applied.
	Name string `json:"name"`
	// Code customers can use to apply the discount during checkout.
	Code *string `json:"code"`
	// Timestamp after which the discount is redeemable.
	StartsAt *time.Time `json:"starts_at"`
	// Timestamp after which the discount is no longer redeemable.
	EndsAt *time.Time `json:"ends_at"`
	// Maximum number of times the discount can be redeemed.
	MaxRedemptions *int64 `json:"max_redemptions"`
	// Number of times the discount has been redeemed.
	RedemptionsCount int64 `json:"redemptions_count"`
	// The organization ID.
	OrganizationID string `json:"organization_id"`
}

func (d DiscountFixedRepeatDurationBase) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DiscountFixedRepeatDurationBase) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DiscountFixedRepeatDurationBase) GetDuration() DiscountDuration {
	if o == nil {
		return DiscountDuration("")
	}
	return o.Duration
}

func (o *DiscountFixedRepeatDurationBase) GetDurationInMonths() int64 {
	if o == nil {
		return 0
	}
	return o.DurationInMonths
}

func (o *DiscountFixedRepeatDurationBase) GetType() DiscountType {
	if o == nil {
		return DiscountType("")
	}
	return o.Type
}

func (o *DiscountFixedRepeatDurationBase) GetAmount() int64 {
	if o == nil {
		return 0
	}
	return o.Amount
}

func (o *DiscountFixedRepeatDurationBase) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *DiscountFixedRepeatDurationBase) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *DiscountFixedRepeatDurationBase) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *DiscountFixedRepeatDurationBase) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DiscountFixedRepeatDurationBase) GetMetadata() map[string]DiscountFixedRepeatDurationBaseMetadata {
	if o == nil {
		return map[string]DiscountFixedRepeatDurationBaseMetadata{}
	}
	return o.Metadata
}

func (o *DiscountFixedRepeatDurationBase) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DiscountFixedRepeatDurationBase) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *DiscountFixedRepeatDurationBase) GetStartsAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartsAt
}

func (o *DiscountFixedRepeatDurationBase) GetEndsAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndsAt
}

func (o *DiscountFixedRepeatDurationBase) GetMaxRedemptions() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxRedemptions
}

func (o *DiscountFixedRepeatDurationBase) GetRedemptionsCount() int64 {
	if o == nil {
		return 0
	}
	return o.RedemptionsCount
}

func (o *DiscountFixedRepeatDurationBase) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}
