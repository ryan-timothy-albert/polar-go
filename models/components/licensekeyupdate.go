// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/polarsource/polar-go/internal/utils"
	"time"
)

type LicenseKeyUpdate struct {
	Status           *LicenseKeyStatus `json:"status,omitempty"`
	Usage            *int64            `default:"0" json:"usage"`
	LimitActivations *int64            `json:"limit_activations,omitempty"`
	LimitUsage       *int64            `json:"limit_usage,omitempty"`
	ExpiresAt        *time.Time        `json:"expires_at,omitempty"`
}

func (l LicenseKeyUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LicenseKeyUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *LicenseKeyUpdate) GetStatus() *LicenseKeyStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *LicenseKeyUpdate) GetUsage() *int64 {
	if o == nil {
		return nil
	}
	return o.Usage
}

func (o *LicenseKeyUpdate) GetLimitActivations() *int64 {
	if o == nil {
		return nil
	}
	return o.LimitActivations
}

func (o *LicenseKeyUpdate) GetLimitUsage() *int64 {
	if o == nil {
		return nil
	}
	return o.LimitUsage
}

func (o *LicenseKeyUpdate) GetExpiresAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}
