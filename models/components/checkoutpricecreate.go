// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
)

type CheckoutPriceCreateMetadataType string

const (
	CheckoutPriceCreateMetadataTypeStr     CheckoutPriceCreateMetadataType = "str"
	CheckoutPriceCreateMetadataTypeInteger CheckoutPriceCreateMetadataType = "integer"
	CheckoutPriceCreateMetadataTypeBoolean CheckoutPriceCreateMetadataType = "boolean"
)

type CheckoutPriceCreateMetadata struct {
	Str     *string `queryParam:"inline"`
	Integer *int64  `queryParam:"inline"`
	Boolean *bool   `queryParam:"inline"`

	Type CheckoutPriceCreateMetadataType
}

func CreateCheckoutPriceCreateMetadataStr(str string) CheckoutPriceCreateMetadata {
	typ := CheckoutPriceCreateMetadataTypeStr

	return CheckoutPriceCreateMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateCheckoutPriceCreateMetadataInteger(integer int64) CheckoutPriceCreateMetadata {
	typ := CheckoutPriceCreateMetadataTypeInteger

	return CheckoutPriceCreateMetadata{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCheckoutPriceCreateMetadataBoolean(boolean bool) CheckoutPriceCreateMetadata {
	typ := CheckoutPriceCreateMetadataTypeBoolean

	return CheckoutPriceCreateMetadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CheckoutPriceCreateMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CheckoutPriceCreateMetadataTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = CheckoutPriceCreateMetadataTypeInteger
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = CheckoutPriceCreateMetadataTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CheckoutPriceCreateMetadata", string(data))
}

func (u CheckoutPriceCreateMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type CheckoutPriceCreateMetadata: all fields are null")
}

// CheckoutPriceCreateCustomFieldData - Key-value object storing custom field values.
type CheckoutPriceCreateCustomFieldData struct {
}

// CheckoutPriceCreatePaymentProcessor - Payment processor to use. Currently only Stripe is supported.
type CheckoutPriceCreatePaymentProcessor string

const (
	CheckoutPriceCreatePaymentProcessorStripe CheckoutPriceCreatePaymentProcessor = "stripe"
)

func (e CheckoutPriceCreatePaymentProcessor) ToPointer() *CheckoutPriceCreatePaymentProcessor {
	return &e
}
func (e *CheckoutPriceCreatePaymentProcessor) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "stripe":
		*e = CheckoutPriceCreatePaymentProcessor(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckoutPriceCreatePaymentProcessor: %v", v)
	}
}

// CheckoutPriceCreate - Create a new checkout session from a product price.
//
// Metadata set on the checkout will be copied
// to the resulting order and/or subscription.
type CheckoutPriceCreate struct {
	// Key-value object allowing you to store additional information.
	//
	// The key must be a string with a maximum length of **40 characters**.
	// The value must be either:
	//
	// * A string with a maximum length of **500 characters**
	// * An integer
	// * A boolean
	//
	// You can store up to **50 key-value pairs**.
	Metadata map[string]CheckoutPriceCreateMetadata `json:"metadata,omitempty"`
	// Key-value object storing custom field values.
	CustomFieldData *CheckoutPriceCreateCustomFieldData `json:"custom_field_data,omitempty"`
	// Payment processor to use. Currently only Stripe is supported.
	paymentProcessor CheckoutPriceCreatePaymentProcessor `const:"stripe" json:"payment_processor"`
	// ID of the discount to apply to the checkout.
	DiscountID *string `json:"discount_id,omitempty"`
	// Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
	AllowDiscountCodes *bool  `default:"true" json:"allow_discount_codes"`
	Amount             *int64 `json:"amount,omitempty"`
	// ID of an existing customer in the organization. The customer data will be pre-filled in the checkout form. The resulting order will be linked to this customer.
	CustomerID             *string  `json:"customer_id,omitempty"`
	CustomerName           *string  `json:"customer_name,omitempty"`
	CustomerEmail          *string  `json:"customer_email,omitempty"`
	CustomerIPAddress      *string  `json:"customer_ip_address,omitempty"`
	CustomerBillingAddress *Address `json:"customer_billing_address,omitempty"`
	CustomerTaxID          *string  `json:"customer_tax_id,omitempty"`
	// ID of a subscription to upgrade. It must be on a free pricing. If checkout is successful, metadata set on this checkout will be copied to the subscription, and existing keys will be overwritten.
	SubscriptionID *string `json:"subscription_id,omitempty"`
	// URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id.
	SuccessURL *string `json:"success_url,omitempty"`
	// If you plan to embed the checkout session, set this to the Origin of the embedding page. It'll allow the Polar iframe to communicate with the parent page.
	EmbedOrigin *string `json:"embed_origin,omitempty"`
	// ID of the product price to checkout.
	ProductPriceID string `json:"product_price_id"`
}

func (c CheckoutPriceCreate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CheckoutPriceCreate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CheckoutPriceCreate) GetMetadata() map[string]CheckoutPriceCreateMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CheckoutPriceCreate) GetCustomFieldData() *CheckoutPriceCreateCustomFieldData {
	if o == nil {
		return nil
	}
	return o.CustomFieldData
}

func (o *CheckoutPriceCreate) GetPaymentProcessor() CheckoutPriceCreatePaymentProcessor {
	return CheckoutPriceCreatePaymentProcessorStripe
}

func (o *CheckoutPriceCreate) GetDiscountID() *string {
	if o == nil {
		return nil
	}
	return o.DiscountID
}

func (o *CheckoutPriceCreate) GetAllowDiscountCodes() *bool {
	if o == nil {
		return nil
	}
	return o.AllowDiscountCodes
}

func (o *CheckoutPriceCreate) GetAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CheckoutPriceCreate) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *CheckoutPriceCreate) GetCustomerName() *string {
	if o == nil {
		return nil
	}
	return o.CustomerName
}

func (o *CheckoutPriceCreate) GetCustomerEmail() *string {
	if o == nil {
		return nil
	}
	return o.CustomerEmail
}

func (o *CheckoutPriceCreate) GetCustomerIPAddress() *string {
	if o == nil {
		return nil
	}
	return o.CustomerIPAddress
}

func (o *CheckoutPriceCreate) GetCustomerBillingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.CustomerBillingAddress
}

func (o *CheckoutPriceCreate) GetCustomerTaxID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerTaxID
}

func (o *CheckoutPriceCreate) GetSubscriptionID() *string {
	if o == nil {
		return nil
	}
	return o.SubscriptionID
}

func (o *CheckoutPriceCreate) GetSuccessURL() *string {
	if o == nil {
		return nil
	}
	return o.SuccessURL
}

func (o *CheckoutPriceCreate) GetEmbedOrigin() *string {
	if o == nil {
		return nil
	}
	return o.EmbedOrigin
}

func (o *CheckoutPriceCreate) GetProductPriceID() string {
	if o == nil {
		return ""
	}
	return o.ProductPriceID
}
