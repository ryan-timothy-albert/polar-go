// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"polar/internal/utils"
	"time"
)

type Meta struct {
}

type LicenseKeyActivationBase struct {
	ID           string     `json:"id"`
	LicenseKeyID string     `json:"license_key_id"`
	Label        string     `json:"label"`
	Meta         Meta       `json:"meta"`
	CreatedAt    time.Time  `json:"created_at"`
	ModifiedAt   *time.Time `json:"modified_at"`
}

func (l LicenseKeyActivationBase) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LicenseKeyActivationBase) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *LicenseKeyActivationBase) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *LicenseKeyActivationBase) GetLicenseKeyID() string {
	if o == nil {
		return ""
	}
	return o.LicenseKeyID
}

func (o *LicenseKeyActivationBase) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *LicenseKeyActivationBase) GetMeta() Meta {
	if o == nil {
		return Meta{}
	}
	return o.Meta
}

func (o *LicenseKeyActivationBase) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *LicenseKeyActivationBase) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}
