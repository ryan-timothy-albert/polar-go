// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"polar/internal/utils"
)

type CustomFieldUpdateType string

const (
	CustomFieldUpdateTypeCheckbox CustomFieldUpdateType = "checkbox"
	CustomFieldUpdateTypeDate     CustomFieldUpdateType = "date"
	CustomFieldUpdateTypeNumber   CustomFieldUpdateType = "number"
	CustomFieldUpdateTypeSelect   CustomFieldUpdateType = "select"
	CustomFieldUpdateTypeText     CustomFieldUpdateType = "text"
)

type CustomFieldUpdate struct {
	CustomFieldUpdateText     *CustomFieldUpdateText     `queryParam:"inline"`
	CustomFieldUpdateNumber   *CustomFieldUpdateNumber   `queryParam:"inline"`
	CustomFieldUpdateDate     *CustomFieldUpdateDate     `queryParam:"inline"`
	CustomFieldUpdateCheckbox *CustomFieldUpdateCheckbox `queryParam:"inline"`
	CustomFieldUpdateSelect   *CustomFieldUpdateSelect   `queryParam:"inline"`

	Type CustomFieldUpdateType
}

func CreateCustomFieldUpdateCheckbox(checkbox CustomFieldUpdateCheckbox) CustomFieldUpdate {
	typ := CustomFieldUpdateTypeCheckbox

	return CustomFieldUpdate{
		CustomFieldUpdateCheckbox: &checkbox,
		Type:                      typ,
	}
}

func CreateCustomFieldUpdateDate(date CustomFieldUpdateDate) CustomFieldUpdate {
	typ := CustomFieldUpdateTypeDate

	return CustomFieldUpdate{
		CustomFieldUpdateDate: &date,
		Type:                  typ,
	}
}

func CreateCustomFieldUpdateNumber(number CustomFieldUpdateNumber) CustomFieldUpdate {
	typ := CustomFieldUpdateTypeNumber

	return CustomFieldUpdate{
		CustomFieldUpdateNumber: &number,
		Type:                    typ,
	}
}

func CreateCustomFieldUpdateSelect(selectT CustomFieldUpdateSelect) CustomFieldUpdate {
	typ := CustomFieldUpdateTypeSelect

	return CustomFieldUpdate{
		CustomFieldUpdateSelect: &selectT,
		Type:                    typ,
	}
}

func CreateCustomFieldUpdateText(text CustomFieldUpdateText) CustomFieldUpdate {
	typ := CustomFieldUpdateTypeText

	return CustomFieldUpdate{
		CustomFieldUpdateText: &text,
		Type:                  typ,
	}
}

func (u *CustomFieldUpdate) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "checkbox":
		customFieldUpdateCheckbox := new(CustomFieldUpdateCheckbox)
		if err := utils.UnmarshalJSON(data, &customFieldUpdateCheckbox, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == checkbox) type CustomFieldUpdateCheckbox within CustomFieldUpdate: %w", string(data), err)
		}

		u.CustomFieldUpdateCheckbox = customFieldUpdateCheckbox
		u.Type = CustomFieldUpdateTypeCheckbox
		return nil
	case "date":
		customFieldUpdateDate := new(CustomFieldUpdateDate)
		if err := utils.UnmarshalJSON(data, &customFieldUpdateDate, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == date) type CustomFieldUpdateDate within CustomFieldUpdate: %w", string(data), err)
		}

		u.CustomFieldUpdateDate = customFieldUpdateDate
		u.Type = CustomFieldUpdateTypeDate
		return nil
	case "number":
		customFieldUpdateNumber := new(CustomFieldUpdateNumber)
		if err := utils.UnmarshalJSON(data, &customFieldUpdateNumber, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == number) type CustomFieldUpdateNumber within CustomFieldUpdate: %w", string(data), err)
		}

		u.CustomFieldUpdateNumber = customFieldUpdateNumber
		u.Type = CustomFieldUpdateTypeNumber
		return nil
	case "select":
		customFieldUpdateSelect := new(CustomFieldUpdateSelect)
		if err := utils.UnmarshalJSON(data, &customFieldUpdateSelect, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == select) type CustomFieldUpdateSelect within CustomFieldUpdate: %w", string(data), err)
		}

		u.CustomFieldUpdateSelect = customFieldUpdateSelect
		u.Type = CustomFieldUpdateTypeSelect
		return nil
	case "text":
		customFieldUpdateText := new(CustomFieldUpdateText)
		if err := utils.UnmarshalJSON(data, &customFieldUpdateText, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == text) type CustomFieldUpdateText within CustomFieldUpdate: %w", string(data), err)
		}

		u.CustomFieldUpdateText = customFieldUpdateText
		u.Type = CustomFieldUpdateTypeText
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomFieldUpdate", string(data))
}

func (u CustomFieldUpdate) MarshalJSON() ([]byte, error) {
	if u.CustomFieldUpdateText != nil {
		return utils.MarshalJSON(u.CustomFieldUpdateText, "", true)
	}

	if u.CustomFieldUpdateNumber != nil {
		return utils.MarshalJSON(u.CustomFieldUpdateNumber, "", true)
	}

	if u.CustomFieldUpdateDate != nil {
		return utils.MarshalJSON(u.CustomFieldUpdateDate, "", true)
	}

	if u.CustomFieldUpdateCheckbox != nil {
		return utils.MarshalJSON(u.CustomFieldUpdateCheckbox, "", true)
	}

	if u.CustomFieldUpdateSelect != nil {
		return utils.MarshalJSON(u.CustomFieldUpdateSelect, "", true)
	}

	return nil, errors.New("could not marshal union type CustomFieldUpdate: all fields are null")
}
