// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"polar/internal/utils"
	"time"
)

type CustomerOrderSubscription struct {
	// Creation timestamp of the object.
	CreatedAt time.Time `json:"created_at"`
	// Last modification timestamp of the object.
	ModifiedAt *time.Time `json:"modified_at"`
	// The ID of the object.
	ID                 string                        `json:"id"`
	Amount             *int64                        `json:"amount"`
	Currency           *string                       `json:"currency"`
	RecurringInterval  SubscriptionRecurringInterval `json:"recurring_interval"`
	Status             SubscriptionStatus            `json:"status"`
	CurrentPeriodStart time.Time                     `json:"current_period_start"`
	CurrentPeriodEnd   *time.Time                    `json:"current_period_end"`
	CancelAtPeriodEnd  bool                          `json:"cancel_at_period_end"`
	StartedAt          *time.Time                    `json:"started_at"`
	EndedAt            *time.Time                    `json:"ended_at"`
	CustomerID         string                        `json:"customer_id"`
	ProductID          string                        `json:"product_id"`
	PriceID            string                        `json:"price_id"`
	DiscountID         *string                       `json:"discount_id"`
	CheckoutID         *string                       `json:"checkout_id"`
}

func (c CustomerOrderSubscription) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CustomerOrderSubscription) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CustomerOrderSubscription) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *CustomerOrderSubscription) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *CustomerOrderSubscription) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CustomerOrderSubscription) GetAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CustomerOrderSubscription) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *CustomerOrderSubscription) GetRecurringInterval() SubscriptionRecurringInterval {
	if o == nil {
		return SubscriptionRecurringInterval("")
	}
	return o.RecurringInterval
}

func (o *CustomerOrderSubscription) GetStatus() SubscriptionStatus {
	if o == nil {
		return SubscriptionStatus("")
	}
	return o.Status
}

func (o *CustomerOrderSubscription) GetCurrentPeriodStart() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CurrentPeriodStart
}

func (o *CustomerOrderSubscription) GetCurrentPeriodEnd() *time.Time {
	if o == nil {
		return nil
	}
	return o.CurrentPeriodEnd
}

func (o *CustomerOrderSubscription) GetCancelAtPeriodEnd() bool {
	if o == nil {
		return false
	}
	return o.CancelAtPeriodEnd
}

func (o *CustomerOrderSubscription) GetStartedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartedAt
}

func (o *CustomerOrderSubscription) GetEndedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndedAt
}

func (o *CustomerOrderSubscription) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *CustomerOrderSubscription) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *CustomerOrderSubscription) GetPriceID() string {
	if o == nil {
		return ""
	}
	return o.PriceID
}

func (o *CustomerOrderSubscription) GetDiscountID() *string {
	if o == nil {
		return nil
	}
	return o.DiscountID
}

func (o *CustomerOrderSubscription) GetCheckoutID() *string {
	if o == nil {
		return nil
	}
	return o.CheckoutID
}
