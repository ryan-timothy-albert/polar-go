// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"polar/internal/utils"
)

type WebhookBenefitUpdatedPayloadType string

const (
	WebhookBenefitUpdatedPayloadTypeBenefitUpdated WebhookBenefitUpdatedPayloadType = "benefit.updated"
)

func (e WebhookBenefitUpdatedPayloadType) ToPointer() *WebhookBenefitUpdatedPayloadType {
	return &e
}
func (e *WebhookBenefitUpdatedPayloadType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "benefit.updated":
		*e = WebhookBenefitUpdatedPayloadType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookBenefitUpdatedPayloadType: %v", v)
	}
}

// WebhookBenefitUpdatedPayload - Sent when a benefit is updated.
//
// **Discord & Slack support:** Basic
type WebhookBenefitUpdatedPayload struct {
	type_ WebhookBenefitUpdatedPayloadType `const:"benefit.updated" json:"type"`
	Data  Benefit                          `json:"data"`
}

func (w WebhookBenefitUpdatedPayload) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WebhookBenefitUpdatedPayload) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *WebhookBenefitUpdatedPayload) GetType() WebhookBenefitUpdatedPayloadType {
	return WebhookBenefitUpdatedPayloadTypeBenefitUpdated
}

func (o *WebhookBenefitUpdatedPayload) GetData() Benefit {
	if o == nil {
		return Benefit{}
	}
	return o.Data
}
