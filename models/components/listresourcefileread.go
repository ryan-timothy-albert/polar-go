// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"polar/internal/utils"
)

type FileReadType string

const (
	FileReadTypeDownloadable       FileReadType = "downloadable"
	FileReadTypeOrganizationAvatar FileReadType = "organization_avatar"
	FileReadTypeProductMedia       FileReadType = "product_media"
)

type FileRead struct {
	DownloadableFileRead       *DownloadableFileRead       `queryParam:"inline"`
	ProductMediaFileRead       *ProductMediaFileRead       `queryParam:"inline"`
	OrganizationAvatarFileRead *OrganizationAvatarFileRead `queryParam:"inline"`

	Type FileReadType
}

func CreateFileReadDownloadable(downloadable DownloadableFileRead) FileRead {
	typ := FileReadTypeDownloadable

	return FileRead{
		DownloadableFileRead: &downloadable,
		Type:                 typ,
	}
}

func CreateFileReadOrganizationAvatar(organizationAvatar OrganizationAvatarFileRead) FileRead {
	typ := FileReadTypeOrganizationAvatar

	return FileRead{
		OrganizationAvatarFileRead: &organizationAvatar,
		Type:                       typ,
	}
}

func CreateFileReadProductMedia(productMedia ProductMediaFileRead) FileRead {
	typ := FileReadTypeProductMedia

	return FileRead{
		ProductMediaFileRead: &productMedia,
		Type:                 typ,
	}
}

func (u *FileRead) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Service string `json:"service"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Service {
	case "downloadable":
		downloadableFileRead := new(DownloadableFileRead)
		if err := utils.UnmarshalJSON(data, &downloadableFileRead, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Service == downloadable) type DownloadableFileRead within FileRead: %w", string(data), err)
		}

		u.DownloadableFileRead = downloadableFileRead
		u.Type = FileReadTypeDownloadable
		return nil
	case "organization_avatar":
		organizationAvatarFileRead := new(OrganizationAvatarFileRead)
		if err := utils.UnmarshalJSON(data, &organizationAvatarFileRead, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Service == organization_avatar) type OrganizationAvatarFileRead within FileRead: %w", string(data), err)
		}

		u.OrganizationAvatarFileRead = organizationAvatarFileRead
		u.Type = FileReadTypeOrganizationAvatar
		return nil
	case "product_media":
		productMediaFileRead := new(ProductMediaFileRead)
		if err := utils.UnmarshalJSON(data, &productMediaFileRead, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Service == product_media) type ProductMediaFileRead within FileRead: %w", string(data), err)
		}

		u.ProductMediaFileRead = productMediaFileRead
		u.Type = FileReadTypeProductMedia
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FileRead", string(data))
}

func (u FileRead) MarshalJSON() ([]byte, error) {
	if u.DownloadableFileRead != nil {
		return utils.MarshalJSON(u.DownloadableFileRead, "", true)
	}

	if u.ProductMediaFileRead != nil {
		return utils.MarshalJSON(u.ProductMediaFileRead, "", true)
	}

	if u.OrganizationAvatarFileRead != nil {
		return utils.MarshalJSON(u.OrganizationAvatarFileRead, "", true)
	}

	return nil, errors.New("could not marshal union type FileRead: all fields are null")
}

type ListResourceFileRead struct {
	Items      []FileRead `json:"items"`
	Pagination Pagination `json:"pagination"`
}

func (o *ListResourceFileRead) GetItems() []FileRead {
	if o == nil {
		return []FileRead{}
	}
	return o.Items
}

func (o *ListResourceFileRead) GetPagination() Pagination {
	if o == nil {
		return Pagination{}
	}
	return o.Pagination
}
