// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"polar/internal/utils"
)

type ProductPriceUnionType string

const (
	ProductPriceUnionTypeProductPriceRecurring ProductPriceUnionType = "ProductPriceRecurring"
	ProductPriceUnionTypeProductPriceOneTime   ProductPriceUnionType = "ProductPriceOneTime"
)

type ProductPrice struct {
	ProductPriceRecurring *ProductPriceRecurring `queryParam:"inline"`
	ProductPriceOneTime   *ProductPriceOneTime   `queryParam:"inline"`

	Type ProductPriceUnionType
}

func CreateProductPriceProductPriceRecurring(productPriceRecurring ProductPriceRecurring) ProductPrice {
	typ := ProductPriceUnionTypeProductPriceRecurring

	return ProductPrice{
		ProductPriceRecurring: &productPriceRecurring,
		Type:                  typ,
	}
}

func CreateProductPriceProductPriceOneTime(productPriceOneTime ProductPriceOneTime) ProductPrice {
	typ := ProductPriceUnionTypeProductPriceOneTime

	return ProductPrice{
		ProductPriceOneTime: &productPriceOneTime,
		Type:                typ,
	}
}

func (u *ProductPrice) UnmarshalJSON(data []byte) error {

	var productPriceRecurring ProductPriceRecurring = ProductPriceRecurring{}
	if err := utils.UnmarshalJSON(data, &productPriceRecurring, "", true, true); err == nil {
		u.ProductPriceRecurring = &productPriceRecurring
		u.Type = ProductPriceUnionTypeProductPriceRecurring
		return nil
	}

	var productPriceOneTime ProductPriceOneTime = ProductPriceOneTime{}
	if err := utils.UnmarshalJSON(data, &productPriceOneTime, "", true, true); err == nil {
		u.ProductPriceOneTime = &productPriceOneTime
		u.Type = ProductPriceUnionTypeProductPriceOneTime
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ProductPrice", string(data))
}

func (u ProductPrice) MarshalJSON() ([]byte, error) {
	if u.ProductPriceRecurring != nil {
		return utils.MarshalJSON(u.ProductPriceRecurring, "", true)
	}

	if u.ProductPriceOneTime != nil {
		return utils.MarshalJSON(u.ProductPriceOneTime, "", true)
	}

	return nil, errors.New("could not marshal union type ProductPrice: all fields are null")
}
