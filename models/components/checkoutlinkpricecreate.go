// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
)

type CheckoutLinkPriceCreateMetadataType string

const (
	CheckoutLinkPriceCreateMetadataTypeStr     CheckoutLinkPriceCreateMetadataType = "str"
	CheckoutLinkPriceCreateMetadataTypeInteger CheckoutLinkPriceCreateMetadataType = "integer"
	CheckoutLinkPriceCreateMetadataTypeBoolean CheckoutLinkPriceCreateMetadataType = "boolean"
)

type CheckoutLinkPriceCreateMetadata struct {
	Str     *string `queryParam:"inline"`
	Integer *int64  `queryParam:"inline"`
	Boolean *bool   `queryParam:"inline"`

	Type CheckoutLinkPriceCreateMetadataType
}

func CreateCheckoutLinkPriceCreateMetadataStr(str string) CheckoutLinkPriceCreateMetadata {
	typ := CheckoutLinkPriceCreateMetadataTypeStr

	return CheckoutLinkPriceCreateMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateCheckoutLinkPriceCreateMetadataInteger(integer int64) CheckoutLinkPriceCreateMetadata {
	typ := CheckoutLinkPriceCreateMetadataTypeInteger

	return CheckoutLinkPriceCreateMetadata{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCheckoutLinkPriceCreateMetadataBoolean(boolean bool) CheckoutLinkPriceCreateMetadata {
	typ := CheckoutLinkPriceCreateMetadataTypeBoolean

	return CheckoutLinkPriceCreateMetadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CheckoutLinkPriceCreateMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CheckoutLinkPriceCreateMetadataTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = CheckoutLinkPriceCreateMetadataTypeInteger
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = CheckoutLinkPriceCreateMetadataTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CheckoutLinkPriceCreateMetadata", string(data))
}

func (u CheckoutLinkPriceCreateMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type CheckoutLinkPriceCreateMetadata: all fields are null")
}

type CheckoutLinkPriceCreate struct {
	// Key-value object allowing you to store additional information.
	//
	// The key must be a string with a maximum length of **40 characters**.
	// The value must be either:
	//
	// * A string with a maximum length of **500 characters**
	// * An integer
	// * A boolean
	//
	// You can store up to **50 key-value pairs**.
	Metadata map[string]CheckoutLinkPriceCreateMetadata `json:"metadata,omitempty"`
	// Payment processor to use. Currently only Stripe is supported.
	paymentProcessor string `const:"stripe" json:"payment_processor"`
	// Optional label to distinguish links internally
	Label *string `json:"label,omitempty"`
	// Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
	AllowDiscountCodes *bool `default:"true" json:"allow_discount_codes"`
	// ID of the discount to apply to the checkout. If the discount is not applicable anymore when opening the checkout link, it'll be ignored.
	DiscountID *string `json:"discount_id,omitempty"`
	// URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id.
	SuccessURL *string `json:"success_url,omitempty"`
	// ID of the product price to checkout.
	ProductPriceID string `json:"product_price_id"`
}

func (c CheckoutLinkPriceCreate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CheckoutLinkPriceCreate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CheckoutLinkPriceCreate) GetMetadata() map[string]CheckoutLinkPriceCreateMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CheckoutLinkPriceCreate) GetPaymentProcessor() string {
	return "stripe"
}

func (o *CheckoutLinkPriceCreate) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *CheckoutLinkPriceCreate) GetAllowDiscountCodes() *bool {
	if o == nil {
		return nil
	}
	return o.AllowDiscountCodes
}

func (o *CheckoutLinkPriceCreate) GetDiscountID() *string {
	if o == nil {
		return nil
	}
	return o.DiscountID
}

func (o *CheckoutLinkPriceCreate) GetSuccessURL() *string {
	if o == nil {
		return nil
	}
	return o.SuccessURL
}

func (o *CheckoutLinkPriceCreate) GetProductPriceID() string {
	if o == nil {
		return ""
	}
	return o.ProductPriceID
}
