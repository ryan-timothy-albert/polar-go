// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"polar/internal/utils"
)

type CustomFieldData struct {
}

type CheckoutUpdateMetadataType string

const (
	CheckoutUpdateMetadataTypeStr     CheckoutUpdateMetadataType = "str"
	CheckoutUpdateMetadataTypeInteger CheckoutUpdateMetadataType = "integer"
	CheckoutUpdateMetadataTypeBoolean CheckoutUpdateMetadataType = "boolean"
)

type CheckoutUpdateMetadata struct {
	Str     *string `queryParam:"inline"`
	Integer *int64  `queryParam:"inline"`
	Boolean *bool   `queryParam:"inline"`

	Type CheckoutUpdateMetadataType
}

func CreateCheckoutUpdateMetadataStr(str string) CheckoutUpdateMetadata {
	typ := CheckoutUpdateMetadataTypeStr

	return CheckoutUpdateMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateCheckoutUpdateMetadataInteger(integer int64) CheckoutUpdateMetadata {
	typ := CheckoutUpdateMetadataTypeInteger

	return CheckoutUpdateMetadata{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCheckoutUpdateMetadataBoolean(boolean bool) CheckoutUpdateMetadata {
	typ := CheckoutUpdateMetadataTypeBoolean

	return CheckoutUpdateMetadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CheckoutUpdateMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CheckoutUpdateMetadataTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = CheckoutUpdateMetadataTypeInteger
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = CheckoutUpdateMetadataTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CheckoutUpdateMetadata", string(data))
}

func (u CheckoutUpdateMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type CheckoutUpdateMetadata: all fields are null")
}

type CheckoutUpdateCustomerMetadataType string

const (
	CheckoutUpdateCustomerMetadataTypeStr     CheckoutUpdateCustomerMetadataType = "str"
	CheckoutUpdateCustomerMetadataTypeInteger CheckoutUpdateCustomerMetadataType = "integer"
	CheckoutUpdateCustomerMetadataTypeBoolean CheckoutUpdateCustomerMetadataType = "boolean"
)

type CheckoutUpdateCustomerMetadata struct {
	Str     *string `queryParam:"inline"`
	Integer *int64  `queryParam:"inline"`
	Boolean *bool   `queryParam:"inline"`

	Type CheckoutUpdateCustomerMetadataType
}

func CreateCheckoutUpdateCustomerMetadataStr(str string) CheckoutUpdateCustomerMetadata {
	typ := CheckoutUpdateCustomerMetadataTypeStr

	return CheckoutUpdateCustomerMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateCheckoutUpdateCustomerMetadataInteger(integer int64) CheckoutUpdateCustomerMetadata {
	typ := CheckoutUpdateCustomerMetadataTypeInteger

	return CheckoutUpdateCustomerMetadata{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCheckoutUpdateCustomerMetadataBoolean(boolean bool) CheckoutUpdateCustomerMetadata {
	typ := CheckoutUpdateCustomerMetadataTypeBoolean

	return CheckoutUpdateCustomerMetadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CheckoutUpdateCustomerMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CheckoutUpdateCustomerMetadataTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = CheckoutUpdateCustomerMetadataTypeInteger
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = CheckoutUpdateCustomerMetadataTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CheckoutUpdateCustomerMetadata", string(data))
}

func (u CheckoutUpdateCustomerMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type CheckoutUpdateCustomerMetadata: all fields are null")
}

// CheckoutUpdate - Update an existing checkout session using an access token.
type CheckoutUpdate struct {
	// Key-value object storing custom field values.
	CustomFieldData *CustomFieldData `json:"custom_field_data,omitempty"`
	// ID of the product price to checkout. Must correspond to a price linked to the same product.
	ProductPriceID         *string                           `json:"product_price_id,omitempty"`
	Amount                 *int64                            `json:"amount,omitempty"`
	CustomerName           *string                           `json:"customer_name,omitempty"`
	CustomerEmail          *string                           `json:"customer_email,omitempty"`
	CustomerBillingAddress *Address                          `json:"customer_billing_address,omitempty"`
	CustomerTaxID          *string                           `json:"customer_tax_id,omitempty"`
	Metadata               map[string]CheckoutUpdateMetadata `json:"metadata,omitempty"`
	// ID of the discount to apply to the checkout.
	DiscountID *string `json:"discount_id,omitempty"`
	// Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
	AllowDiscountCodes *bool   `json:"allow_discount_codes,omitempty"`
	CustomerIPAddress  *string `json:"customer_ip_address,omitempty"`
	// Key-value object allowing you to store additional information that'll be copied to the created customer.
	//
	// The key must be a string with a maximum length of **40 characters**.
	// The value must be either:
	//
	// * A string with a maximum length of **500 characters**
	// * An integer
	// * A boolean
	//
	// You can store up to **50 key-value pairs**.
	CustomerMetadata map[string]CheckoutUpdateCustomerMetadata `json:"customer_metadata,omitempty"`
	// URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id.
	SuccessURL *string `json:"success_url,omitempty"`
	// If you plan to embed the checkout session, set this to the Origin of the embedding page. It'll allow the Polar iframe to communicate with the parent page.
	EmbedOrigin *string `json:"embed_origin,omitempty"`
}

func (o *CheckoutUpdate) GetCustomFieldData() *CustomFieldData {
	if o == nil {
		return nil
	}
	return o.CustomFieldData
}

func (o *CheckoutUpdate) GetProductPriceID() *string {
	if o == nil {
		return nil
	}
	return o.ProductPriceID
}

func (o *CheckoutUpdate) GetAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CheckoutUpdate) GetCustomerName() *string {
	if o == nil {
		return nil
	}
	return o.CustomerName
}

func (o *CheckoutUpdate) GetCustomerEmail() *string {
	if o == nil {
		return nil
	}
	return o.CustomerEmail
}

func (o *CheckoutUpdate) GetCustomerBillingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.CustomerBillingAddress
}

func (o *CheckoutUpdate) GetCustomerTaxID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerTaxID
}

func (o *CheckoutUpdate) GetMetadata() map[string]CheckoutUpdateMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CheckoutUpdate) GetDiscountID() *string {
	if o == nil {
		return nil
	}
	return o.DiscountID
}

func (o *CheckoutUpdate) GetAllowDiscountCodes() *bool {
	if o == nil {
		return nil
	}
	return o.AllowDiscountCodes
}

func (o *CheckoutUpdate) GetCustomerIPAddress() *string {
	if o == nil {
		return nil
	}
	return o.CustomerIPAddress
}

func (o *CheckoutUpdate) GetCustomerMetadata() map[string]CheckoutUpdateCustomerMetadata {
	if o == nil {
		return nil
	}
	return o.CustomerMetadata
}

func (o *CheckoutUpdate) GetSuccessURL() *string {
	if o == nil {
		return nil
	}
	return o.SuccessURL
}

func (o *CheckoutUpdate) GetEmbedOrigin() *string {
	if o == nil {
		return nil
	}
	return o.EmbedOrigin
}
