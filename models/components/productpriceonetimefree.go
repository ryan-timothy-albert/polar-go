// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
	"time"
)

type ProductPriceOneTimeFreeAmountType string

const (
	ProductPriceOneTimeFreeAmountTypeFree ProductPriceOneTimeFreeAmountType = "free"
)

func (e ProductPriceOneTimeFreeAmountType) ToPointer() *ProductPriceOneTimeFreeAmountType {
	return &e
}
func (e *ProductPriceOneTimeFreeAmountType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "free":
		*e = ProductPriceOneTimeFreeAmountType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductPriceOneTimeFreeAmountType: %v", v)
	}
}

// ProductPriceOneTimeFreeType - The type of the price.
type ProductPriceOneTimeFreeType string

const (
	ProductPriceOneTimeFreeTypeOneTime ProductPriceOneTimeFreeType = "one_time"
)

func (e ProductPriceOneTimeFreeType) ToPointer() *ProductPriceOneTimeFreeType {
	return &e
}
func (e *ProductPriceOneTimeFreeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "one_time":
		*e = ProductPriceOneTimeFreeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductPriceOneTimeFreeType: %v", v)
	}
}

// ProductPriceOneTimeFree - A free one-time price for a product.
type ProductPriceOneTimeFree struct {
	// Creation timestamp of the object.
	CreatedAt time.Time `json:"created_at"`
	// Last modification timestamp of the object.
	ModifiedAt *time.Time `json:"modified_at"`
	// The ID of the price.
	ID         string                            `json:"id"`
	amountType ProductPriceOneTimeFreeAmountType `const:"free" json:"amount_type"`
	// Whether the price is archived and no longer available.
	IsArchived bool `json:"is_archived"`
	// The ID of the product owning the price.
	ProductID string `json:"product_id"`
	// The type of the price.
	type_ ProductPriceOneTimeFreeType `const:"one_time" json:"type"`
}

func (p ProductPriceOneTimeFree) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProductPriceOneTimeFree) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ProductPriceOneTimeFree) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ProductPriceOneTimeFree) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *ProductPriceOneTimeFree) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ProductPriceOneTimeFree) GetAmountType() ProductPriceOneTimeFreeAmountType {
	return ProductPriceOneTimeFreeAmountTypeFree
}

func (o *ProductPriceOneTimeFree) GetIsArchived() bool {
	if o == nil {
		return false
	}
	return o.IsArchived
}

func (o *ProductPriceOneTimeFree) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *ProductPriceOneTimeFree) GetType() ProductPriceOneTimeFreeType {
	return ProductPriceOneTimeFreeTypeOneTime
}
