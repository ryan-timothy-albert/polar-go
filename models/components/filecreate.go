// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"polar/internal/utils"
)

type FileCreateType string

const (
	FileCreateTypeDownloadable       FileCreateType = "downloadable"
	FileCreateTypeOrganizationAvatar FileCreateType = "organization_avatar"
	FileCreateTypeProductMedia       FileCreateType = "product_media"
)

type FileCreate struct {
	DownloadableFileCreate       *DownloadableFileCreate       `queryParam:"inline"`
	ProductMediaFileCreate       *ProductMediaFileCreate       `queryParam:"inline"`
	OrganizationAvatarFileCreate *OrganizationAvatarFileCreate `queryParam:"inline"`

	Type FileCreateType
}

func CreateFileCreateDownloadable(downloadable DownloadableFileCreate) FileCreate {
	typ := FileCreateTypeDownloadable

	return FileCreate{
		DownloadableFileCreate: &downloadable,
		Type:                   typ,
	}
}

func CreateFileCreateOrganizationAvatar(organizationAvatar OrganizationAvatarFileCreate) FileCreate {
	typ := FileCreateTypeOrganizationAvatar

	return FileCreate{
		OrganizationAvatarFileCreate: &organizationAvatar,
		Type:                         typ,
	}
}

func CreateFileCreateProductMedia(productMedia ProductMediaFileCreate) FileCreate {
	typ := FileCreateTypeProductMedia

	return FileCreate{
		ProductMediaFileCreate: &productMedia,
		Type:                   typ,
	}
}

func (u *FileCreate) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Service string `json:"service"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Service {
	case "downloadable":
		downloadableFileCreate := new(DownloadableFileCreate)
		if err := utils.UnmarshalJSON(data, &downloadableFileCreate, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Service == downloadable) type DownloadableFileCreate within FileCreate: %w", string(data), err)
		}

		u.DownloadableFileCreate = downloadableFileCreate
		u.Type = FileCreateTypeDownloadable
		return nil
	case "organization_avatar":
		organizationAvatarFileCreate := new(OrganizationAvatarFileCreate)
		if err := utils.UnmarshalJSON(data, &organizationAvatarFileCreate, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Service == organization_avatar) type OrganizationAvatarFileCreate within FileCreate: %w", string(data), err)
		}

		u.OrganizationAvatarFileCreate = organizationAvatarFileCreate
		u.Type = FileCreateTypeOrganizationAvatar
		return nil
	case "product_media":
		productMediaFileCreate := new(ProductMediaFileCreate)
		if err := utils.UnmarshalJSON(data, &productMediaFileCreate, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Service == product_media) type ProductMediaFileCreate within FileCreate: %w", string(data), err)
		}

		u.ProductMediaFileCreate = productMediaFileCreate
		u.Type = FileCreateTypeProductMedia
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FileCreate", string(data))
}

func (u FileCreate) MarshalJSON() ([]byte, error) {
	if u.DownloadableFileCreate != nil {
		return utils.MarshalJSON(u.DownloadableFileCreate, "", true)
	}

	if u.ProductMediaFileCreate != nil {
		return utils.MarshalJSON(u.ProductMediaFileCreate, "", true)
	}

	if u.OrganizationAvatarFileCreate != nil {
		return utils.MarshalJSON(u.OrganizationAvatarFileCreate, "", true)
	}

	return nil, errors.New("could not marshal union type FileCreate: all fields are null")
}
