// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/polarsource/polar-go/internal/utils"
)

// ProductPriceOneTimeCustomCreate - Schema to create a pay-what-you-want price for a one-time product.
type ProductPriceOneTimeCustomCreate struct {
	type_      string `const:"one_time" json:"type"`
	amountType string `const:"custom" json:"amount_type"`
	// The currency. Currently, only `usd` is supported.
	PriceCurrency *string `default:"usd" json:"price_currency"`
	// The minimum amount the customer can pay.
	MinimumAmount *int64 `json:"minimum_amount,omitempty"`
	// The maximum amount the customer can pay.
	MaximumAmount *int64 `json:"maximum_amount,omitempty"`
	// The initial amount shown to the customer.
	PresetAmount *int64 `json:"preset_amount,omitempty"`
}

func (p ProductPriceOneTimeCustomCreate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProductPriceOneTimeCustomCreate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ProductPriceOneTimeCustomCreate) GetType() string {
	return "one_time"
}

func (o *ProductPriceOneTimeCustomCreate) GetAmountType() string {
	return "custom"
}

func (o *ProductPriceOneTimeCustomCreate) GetPriceCurrency() *string {
	if o == nil {
		return nil
	}
	return o.PriceCurrency
}

func (o *ProductPriceOneTimeCustomCreate) GetMinimumAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.MinimumAmount
}

func (o *ProductPriceOneTimeCustomCreate) GetMaximumAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.MaximumAmount
}

func (o *ProductPriceOneTimeCustomCreate) GetPresetAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.PresetAmount
}
