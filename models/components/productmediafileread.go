// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
	"time"
)

type Service string

const (
	ServiceProductMedia Service = "product_media"
)

func (e Service) ToPointer() *Service {
	return &e
}
func (e *Service) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "product_media":
		*e = Service(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Service: %v", v)
	}
}

// ProductMediaFileRead - File to be used as a product media file.
type ProductMediaFileRead struct {
	// The ID of the object.
	ID                   string     `json:"id"`
	OrganizationID       string     `json:"organization_id"`
	Name                 string     `json:"name"`
	Path                 string     `json:"path"`
	MimeType             string     `json:"mime_type"`
	Size                 int64      `json:"size"`
	StorageVersion       *string    `json:"storage_version"`
	ChecksumEtag         *string    `json:"checksum_etag"`
	ChecksumSha256Base64 *string    `json:"checksum_sha256_base64"`
	ChecksumSha256Hex    *string    `json:"checksum_sha256_hex"`
	LastModifiedAt       *time.Time `json:"last_modified_at"`
	Version              *string    `json:"version"`
	service              Service    `const:"product_media" json:"service"`
	IsUploaded           bool       `json:"is_uploaded"`
	CreatedAt            time.Time  `json:"created_at"`
	SizeReadable         string     `json:"size_readable"`
	PublicURL            string     `json:"public_url"`
}

func (p ProductMediaFileRead) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProductMediaFileRead) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ProductMediaFileRead) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ProductMediaFileRead) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *ProductMediaFileRead) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ProductMediaFileRead) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *ProductMediaFileRead) GetMimeType() string {
	if o == nil {
		return ""
	}
	return o.MimeType
}

func (o *ProductMediaFileRead) GetSize() int64 {
	if o == nil {
		return 0
	}
	return o.Size
}

func (o *ProductMediaFileRead) GetStorageVersion() *string {
	if o == nil {
		return nil
	}
	return o.StorageVersion
}

func (o *ProductMediaFileRead) GetChecksumEtag() *string {
	if o == nil {
		return nil
	}
	return o.ChecksumEtag
}

func (o *ProductMediaFileRead) GetChecksumSha256Base64() *string {
	if o == nil {
		return nil
	}
	return o.ChecksumSha256Base64
}

func (o *ProductMediaFileRead) GetChecksumSha256Hex() *string {
	if o == nil {
		return nil
	}
	return o.ChecksumSha256Hex
}

func (o *ProductMediaFileRead) GetLastModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastModifiedAt
}

func (o *ProductMediaFileRead) GetVersion() *string {
	if o == nil {
		return nil
	}
	return o.Version
}

func (o *ProductMediaFileRead) GetService() Service {
	return ServiceProductMedia
}

func (o *ProductMediaFileRead) GetIsUploaded() bool {
	if o == nil {
		return false
	}
	return o.IsUploaded
}

func (o *ProductMediaFileRead) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ProductMediaFileRead) GetSizeReadable() string {
	if o == nil {
		return ""
	}
	return o.SizeReadable
}

func (o *ProductMediaFileRead) GetPublicURL() string {
	if o == nil {
		return ""
	}
	return o.PublicURL
}
