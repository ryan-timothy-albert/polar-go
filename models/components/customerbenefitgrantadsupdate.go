// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
)

type CustomerBenefitGrantAdsUpdateBenefitType string

const (
	CustomerBenefitGrantAdsUpdateBenefitTypeAds CustomerBenefitGrantAdsUpdateBenefitType = "ads"
)

func (e CustomerBenefitGrantAdsUpdateBenefitType) ToPointer() *CustomerBenefitGrantAdsUpdateBenefitType {
	return &e
}
func (e *CustomerBenefitGrantAdsUpdateBenefitType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ads":
		*e = CustomerBenefitGrantAdsUpdateBenefitType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CustomerBenefitGrantAdsUpdateBenefitType: %v", v)
	}
}

type CustomerBenefitGrantAdsUpdate struct {
	benefitType CustomerBenefitGrantAdsUpdateBenefitType `const:"ads" json:"benefit_type"`
}

func (c CustomerBenefitGrantAdsUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CustomerBenefitGrantAdsUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CustomerBenefitGrantAdsUpdate) GetBenefitType() CustomerBenefitGrantAdsUpdateBenefitType {
	return CustomerBenefitGrantAdsUpdateBenefitTypeAds
}
