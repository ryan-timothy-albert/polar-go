// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
)

type ProductPriceOneTimeFreeCreateType string

const (
	ProductPriceOneTimeFreeCreateTypeOneTime ProductPriceOneTimeFreeCreateType = "one_time"
)

func (e ProductPriceOneTimeFreeCreateType) ToPointer() *ProductPriceOneTimeFreeCreateType {
	return &e
}
func (e *ProductPriceOneTimeFreeCreateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "one_time":
		*e = ProductPriceOneTimeFreeCreateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductPriceOneTimeFreeCreateType: %v", v)
	}
}

type ProductPriceOneTimeFreeCreateAmountType string

const (
	ProductPriceOneTimeFreeCreateAmountTypeFree ProductPriceOneTimeFreeCreateAmountType = "free"
)

func (e ProductPriceOneTimeFreeCreateAmountType) ToPointer() *ProductPriceOneTimeFreeCreateAmountType {
	return &e
}
func (e *ProductPriceOneTimeFreeCreateAmountType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "free":
		*e = ProductPriceOneTimeFreeCreateAmountType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductPriceOneTimeFreeCreateAmountType: %v", v)
	}
}

// ProductPriceOneTimeFreeCreate - Schema to create a free one-time product price.
type ProductPriceOneTimeFreeCreate struct {
	type_      ProductPriceOneTimeFreeCreateType       `const:"one_time" json:"type"`
	amountType ProductPriceOneTimeFreeCreateAmountType `const:"free" json:"amount_type"`
}

func (p ProductPriceOneTimeFreeCreate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProductPriceOneTimeFreeCreate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ProductPriceOneTimeFreeCreate) GetType() ProductPriceOneTimeFreeCreateType {
	return ProductPriceOneTimeFreeCreateTypeOneTime
}

func (o *ProductPriceOneTimeFreeCreate) GetAmountType() ProductPriceOneTimeFreeCreateAmountType {
	return ProductPriceOneTimeFreeCreateAmountTypeFree
}
