// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
	"time"
)

type AmountType string

const (
	AmountTypeFixed AmountType = "fixed"
)

func (e AmountType) ToPointer() *AmountType {
	return &e
}
func (e *AmountType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed":
		*e = AmountType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AmountType: %v", v)
	}
}

// Type - The type of the price.
type Type string

const (
	TypeRecurring Type = "recurring"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "recurring":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

// ProductPriceRecurringFixed - A recurring price for a product, i.e. a subscription.
type ProductPriceRecurringFixed struct {
	// Creation timestamp of the object.
	CreatedAt time.Time `json:"created_at"`
	// Last modification timestamp of the object.
	ModifiedAt *time.Time `json:"modified_at"`
	// The ID of the price.
	ID         string     `json:"id"`
	amountType AmountType `const:"fixed" json:"amount_type"`
	// Whether the price is archived and no longer available.
	IsArchived bool `json:"is_archived"`
	// The ID of the product owning the price.
	ProductID string `json:"product_id"`
	// The currency.
	PriceCurrency string `json:"price_currency"`
	// The price in cents.
	PriceAmount int64 `json:"price_amount"`
	// The type of the price.
	type_             Type                          `const:"recurring" json:"type"`
	RecurringInterval SubscriptionRecurringInterval `json:"recurring_interval"`
}

func (p ProductPriceRecurringFixed) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProductPriceRecurringFixed) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ProductPriceRecurringFixed) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ProductPriceRecurringFixed) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *ProductPriceRecurringFixed) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ProductPriceRecurringFixed) GetAmountType() AmountType {
	return AmountTypeFixed
}

func (o *ProductPriceRecurringFixed) GetIsArchived() bool {
	if o == nil {
		return false
	}
	return o.IsArchived
}

func (o *ProductPriceRecurringFixed) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *ProductPriceRecurringFixed) GetPriceCurrency() string {
	if o == nil {
		return ""
	}
	return o.PriceCurrency
}

func (o *ProductPriceRecurringFixed) GetPriceAmount() int64 {
	if o == nil {
		return 0
	}
	return o.PriceAmount
}

func (o *ProductPriceRecurringFixed) GetType() Type {
	return TypeRecurring
}

func (o *ProductPriceRecurringFixed) GetRecurringInterval() SubscriptionRecurringInterval {
	if o == nil {
		return SubscriptionRecurringInterval("")
	}
	return o.RecurringInterval
}
