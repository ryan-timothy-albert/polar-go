// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"polar/internal/utils"
)

type CustomFieldUnionType string

const (
	CustomFieldUnionTypeCheckbox CustomFieldUnionType = "checkbox"
	CustomFieldUnionTypeDate     CustomFieldUnionType = "date"
	CustomFieldUnionTypeNumber   CustomFieldUnionType = "number"
	CustomFieldUnionTypeSelect   CustomFieldUnionType = "select"
	CustomFieldUnionTypeText     CustomFieldUnionType = "text"
)

type CustomField struct {
	CustomFieldText     *CustomFieldText     `queryParam:"inline"`
	CustomFieldNumber   *CustomFieldNumber   `queryParam:"inline"`
	CustomFieldDate     *CustomFieldDate     `queryParam:"inline"`
	CustomFieldCheckbox *CustomFieldCheckbox `queryParam:"inline"`
	CustomFieldSelect   *CustomFieldSelect   `queryParam:"inline"`

	Type CustomFieldUnionType
}

func CreateCustomFieldCheckbox(checkbox CustomFieldCheckbox) CustomField {
	typ := CustomFieldUnionTypeCheckbox

	return CustomField{
		CustomFieldCheckbox: &checkbox,
		Type:                typ,
	}
}

func CreateCustomFieldDate(date CustomFieldDate) CustomField {
	typ := CustomFieldUnionTypeDate

	return CustomField{
		CustomFieldDate: &date,
		Type:            typ,
	}
}

func CreateCustomFieldNumber(number CustomFieldNumber) CustomField {
	typ := CustomFieldUnionTypeNumber

	return CustomField{
		CustomFieldNumber: &number,
		Type:              typ,
	}
}

func CreateCustomFieldSelect(selectT CustomFieldSelect) CustomField {
	typ := CustomFieldUnionTypeSelect

	return CustomField{
		CustomFieldSelect: &selectT,
		Type:              typ,
	}
}

func CreateCustomFieldText(text CustomFieldText) CustomField {
	typ := CustomFieldUnionTypeText

	return CustomField{
		CustomFieldText: &text,
		Type:            typ,
	}
}

func (u *CustomField) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "checkbox":
		customFieldCheckbox := new(CustomFieldCheckbox)
		if err := utils.UnmarshalJSON(data, &customFieldCheckbox, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == checkbox) type CustomFieldCheckbox within CustomField: %w", string(data), err)
		}

		u.CustomFieldCheckbox = customFieldCheckbox
		u.Type = CustomFieldUnionTypeCheckbox
		return nil
	case "date":
		customFieldDate := new(CustomFieldDate)
		if err := utils.UnmarshalJSON(data, &customFieldDate, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == date) type CustomFieldDate within CustomField: %w", string(data), err)
		}

		u.CustomFieldDate = customFieldDate
		u.Type = CustomFieldUnionTypeDate
		return nil
	case "number":
		customFieldNumber := new(CustomFieldNumber)
		if err := utils.UnmarshalJSON(data, &customFieldNumber, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == number) type CustomFieldNumber within CustomField: %w", string(data), err)
		}

		u.CustomFieldNumber = customFieldNumber
		u.Type = CustomFieldUnionTypeNumber
		return nil
	case "select":
		customFieldSelect := new(CustomFieldSelect)
		if err := utils.UnmarshalJSON(data, &customFieldSelect, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == select) type CustomFieldSelect within CustomField: %w", string(data), err)
		}

		u.CustomFieldSelect = customFieldSelect
		u.Type = CustomFieldUnionTypeSelect
		return nil
	case "text":
		customFieldText := new(CustomFieldText)
		if err := utils.UnmarshalJSON(data, &customFieldText, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == text) type CustomFieldText within CustomField: %w", string(data), err)
		}

		u.CustomFieldText = customFieldText
		u.Type = CustomFieldUnionTypeText
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomField", string(data))
}

func (u CustomField) MarshalJSON() ([]byte, error) {
	if u.CustomFieldText != nil {
		return utils.MarshalJSON(u.CustomFieldText, "", true)
	}

	if u.CustomFieldNumber != nil {
		return utils.MarshalJSON(u.CustomFieldNumber, "", true)
	}

	if u.CustomFieldDate != nil {
		return utils.MarshalJSON(u.CustomFieldDate, "", true)
	}

	if u.CustomFieldCheckbox != nil {
		return utils.MarshalJSON(u.CustomFieldCheckbox, "", true)
	}

	if u.CustomFieldSelect != nil {
		return utils.MarshalJSON(u.CustomFieldSelect, "", true)
	}

	return nil, errors.New("could not marshal union type CustomField: all fields are null")
}
