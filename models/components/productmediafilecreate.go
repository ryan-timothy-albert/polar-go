// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
)

type ProductMediaFileCreateService string

const (
	ProductMediaFileCreateServiceProductMedia ProductMediaFileCreateService = "product_media"
)

func (e ProductMediaFileCreateService) ToPointer() *ProductMediaFileCreateService {
	return &e
}
func (e *ProductMediaFileCreateService) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "product_media":
		*e = ProductMediaFileCreateService(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductMediaFileCreateService: %v", v)
	}
}

// ProductMediaFileCreate - Schema to create a file to be used as a product media file.
type ProductMediaFileCreate struct {
	OrganizationID *string `json:"organization_id,omitempty"`
	Name           string  `json:"name"`
	// MIME type of the file. Only images are supported for this type of file.
	MimeType string `json:"mime_type"`
	// Size of the file. A maximum of 10 MB is allowed for this type of file.
	Size                 int64                         `json:"size"`
	ChecksumSha256Base64 *string                       `json:"checksum_sha256_base64,omitempty"`
	Upload               S3FileCreateMultipart         `json:"upload"`
	service              ProductMediaFileCreateService `const:"product_media" json:"service"`
	Version              *string                       `json:"version,omitempty"`
}

func (p ProductMediaFileCreate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProductMediaFileCreate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ProductMediaFileCreate) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *ProductMediaFileCreate) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ProductMediaFileCreate) GetMimeType() string {
	if o == nil {
		return ""
	}
	return o.MimeType
}

func (o *ProductMediaFileCreate) GetSize() int64 {
	if o == nil {
		return 0
	}
	return o.Size
}

func (o *ProductMediaFileCreate) GetChecksumSha256Base64() *string {
	if o == nil {
		return nil
	}
	return o.ChecksumSha256Base64
}

func (o *ProductMediaFileCreate) GetUpload() S3FileCreateMultipart {
	if o == nil {
		return S3FileCreateMultipart{}
	}
	return o.Upload
}

func (o *ProductMediaFileCreate) GetService() ProductMediaFileCreateService {
	return ProductMediaFileCreateServiceProductMedia
}

func (o *ProductMediaFileCreate) GetVersion() *string {
	if o == nil {
		return nil
	}
	return o.Version
}
