// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// TaxIDFormat - List of supported tax ID formats.
//
// Ref: https://docs.stripe.com/billing/customer/tax-ids#supported-tax-id
type TaxIDFormat string

const (
	TaxIDFormatAdNrt    TaxIDFormat = "ad_nrt"
	TaxIDFormatAeTrn    TaxIDFormat = "ae_trn"
	TaxIDFormatArCuit   TaxIDFormat = "ar_cuit"
	TaxIDFormatAuAbn    TaxIDFormat = "au_abn"
	TaxIDFormatAuArn    TaxIDFormat = "au_arn"
	TaxIDFormatBgUic    TaxIDFormat = "bg_uic"
	TaxIDFormatBhVat    TaxIDFormat = "bh_vat"
	TaxIDFormatBoTin    TaxIDFormat = "bo_tin"
	TaxIDFormatBrCnpj   TaxIDFormat = "br_cnpj"
	TaxIDFormatBrCpf    TaxIDFormat = "br_cpf"
	TaxIDFormatCaBn     TaxIDFormat = "ca_bn"
	TaxIDFormatCaGstHst TaxIDFormat = "ca_gst_hst"
	TaxIDFormatCaPstBc  TaxIDFormat = "ca_pst_bc"
	TaxIDFormatCaPstMb  TaxIDFormat = "ca_pst_mb"
	TaxIDFormatCaPstSk  TaxIDFormat = "ca_pst_sk"
	TaxIDFormatCaQst    TaxIDFormat = "ca_qst"
	TaxIDFormatChUID    TaxIDFormat = "ch_uid"
	TaxIDFormatChVat    TaxIDFormat = "ch_vat"
	TaxIDFormatClTin    TaxIDFormat = "cl_tin"
	TaxIDFormatCnTin    TaxIDFormat = "cn_tin"
	TaxIDFormatCoNit    TaxIDFormat = "co_nit"
	TaxIDFormatCrTin    TaxIDFormat = "cr_tin"
	TaxIDFormatDeStn    TaxIDFormat = "de_stn"
	TaxIDFormatDoRcn    TaxIDFormat = "do_rcn"
	TaxIDFormatEcRuc    TaxIDFormat = "ec_ruc"
	TaxIDFormatEgTin    TaxIDFormat = "eg_tin"
	TaxIDFormatEsCif    TaxIDFormat = "es_cif"
	TaxIDFormatEuOssVat TaxIDFormat = "eu_oss_vat"
	TaxIDFormatEuVat    TaxIDFormat = "eu_vat"
	TaxIDFormatGbVat    TaxIDFormat = "gb_vat"
	TaxIDFormatGeVat    TaxIDFormat = "ge_vat"
	TaxIDFormatHkBr     TaxIDFormat = "hk_br"
	TaxIDFormatHrOib    TaxIDFormat = "hr_oib"
	TaxIDFormatHuTin    TaxIDFormat = "hu_tin"
	TaxIDFormatIDNpwp   TaxIDFormat = "id_npwp"
	TaxIDFormatIlVat    TaxIDFormat = "il_vat"
	TaxIDFormatInGst    TaxIDFormat = "in_gst"
	TaxIDFormatIsVat    TaxIDFormat = "is_vat"
	TaxIDFormatJpCn     TaxIDFormat = "jp_cn"
	TaxIDFormatJpRn     TaxIDFormat = "jp_rn"
	TaxIDFormatJpTrn    TaxIDFormat = "jp_trn"
	TaxIDFormatKePin    TaxIDFormat = "ke_pin"
	TaxIDFormatKrBrn    TaxIDFormat = "kr_brn"
	TaxIDFormatKzBin    TaxIDFormat = "kz_bin"
	TaxIDFormatLiUID    TaxIDFormat = "li_uid"
	TaxIDFormatMxRfc    TaxIDFormat = "mx_rfc"
	TaxIDFormatMyFrp    TaxIDFormat = "my_frp"
	TaxIDFormatMyItn    TaxIDFormat = "my_itn"
	TaxIDFormatMySst    TaxIDFormat = "my_sst"
	TaxIDFormatNgTin    TaxIDFormat = "ng_tin"
	TaxIDFormatNoVat    TaxIDFormat = "no_vat"
	TaxIDFormatNoVoec   TaxIDFormat = "no_voec"
	TaxIDFormatNzGst    TaxIDFormat = "nz_gst"
	TaxIDFormatOmVat    TaxIDFormat = "om_vat"
	TaxIDFormatPeRuc    TaxIDFormat = "pe_ruc"
	TaxIDFormatPhTin    TaxIDFormat = "ph_tin"
	TaxIDFormatRoTin    TaxIDFormat = "ro_tin"
	TaxIDFormatRsPib    TaxIDFormat = "rs_pib"
	TaxIDFormatRuInn    TaxIDFormat = "ru_inn"
	TaxIDFormatRuKpp    TaxIDFormat = "ru_kpp"
	TaxIDFormatSaVat    TaxIDFormat = "sa_vat"
	TaxIDFormatSgGst    TaxIDFormat = "sg_gst"
	TaxIDFormatSgUen    TaxIDFormat = "sg_uen"
	TaxIDFormatSiTin    TaxIDFormat = "si_tin"
	TaxIDFormatSvNit    TaxIDFormat = "sv_nit"
	TaxIDFormatThVat    TaxIDFormat = "th_vat"
	TaxIDFormatTrTin    TaxIDFormat = "tr_tin"
	TaxIDFormatTwVat    TaxIDFormat = "tw_vat"
	TaxIDFormatUaVat    TaxIDFormat = "ua_vat"
	TaxIDFormatUsEin    TaxIDFormat = "us_ein"
	TaxIDFormatUyRuc    TaxIDFormat = "uy_ruc"
	TaxIDFormatVeRif    TaxIDFormat = "ve_rif"
	TaxIDFormatVnTin    TaxIDFormat = "vn_tin"
	TaxIDFormatZaVat    TaxIDFormat = "za_vat"
)

func (e TaxIDFormat) ToPointer() *TaxIDFormat {
	return &e
}
func (e *TaxIDFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ad_nrt":
		fallthrough
	case "ae_trn":
		fallthrough
	case "ar_cuit":
		fallthrough
	case "au_abn":
		fallthrough
	case "au_arn":
		fallthrough
	case "bg_uic":
		fallthrough
	case "bh_vat":
		fallthrough
	case "bo_tin":
		fallthrough
	case "br_cnpj":
		fallthrough
	case "br_cpf":
		fallthrough
	case "ca_bn":
		fallthrough
	case "ca_gst_hst":
		fallthrough
	case "ca_pst_bc":
		fallthrough
	case "ca_pst_mb":
		fallthrough
	case "ca_pst_sk":
		fallthrough
	case "ca_qst":
		fallthrough
	case "ch_uid":
		fallthrough
	case "ch_vat":
		fallthrough
	case "cl_tin":
		fallthrough
	case "cn_tin":
		fallthrough
	case "co_nit":
		fallthrough
	case "cr_tin":
		fallthrough
	case "de_stn":
		fallthrough
	case "do_rcn":
		fallthrough
	case "ec_ruc":
		fallthrough
	case "eg_tin":
		fallthrough
	case "es_cif":
		fallthrough
	case "eu_oss_vat":
		fallthrough
	case "eu_vat":
		fallthrough
	case "gb_vat":
		fallthrough
	case "ge_vat":
		fallthrough
	case "hk_br":
		fallthrough
	case "hr_oib":
		fallthrough
	case "hu_tin":
		fallthrough
	case "id_npwp":
		fallthrough
	case "il_vat":
		fallthrough
	case "in_gst":
		fallthrough
	case "is_vat":
		fallthrough
	case "jp_cn":
		fallthrough
	case "jp_rn":
		fallthrough
	case "jp_trn":
		fallthrough
	case "ke_pin":
		fallthrough
	case "kr_brn":
		fallthrough
	case "kz_bin":
		fallthrough
	case "li_uid":
		fallthrough
	case "mx_rfc":
		fallthrough
	case "my_frp":
		fallthrough
	case "my_itn":
		fallthrough
	case "my_sst":
		fallthrough
	case "ng_tin":
		fallthrough
	case "no_vat":
		fallthrough
	case "no_voec":
		fallthrough
	case "nz_gst":
		fallthrough
	case "om_vat":
		fallthrough
	case "pe_ruc":
		fallthrough
	case "ph_tin":
		fallthrough
	case "ro_tin":
		fallthrough
	case "rs_pib":
		fallthrough
	case "ru_inn":
		fallthrough
	case "ru_kpp":
		fallthrough
	case "sa_vat":
		fallthrough
	case "sg_gst":
		fallthrough
	case "sg_uen":
		fallthrough
	case "si_tin":
		fallthrough
	case "sv_nit":
		fallthrough
	case "th_vat":
		fallthrough
	case "tr_tin":
		fallthrough
	case "tw_vat":
		fallthrough
	case "ua_vat":
		fallthrough
	case "us_ein":
		fallthrough
	case "uy_ruc":
		fallthrough
	case "ve_rif":
		fallthrough
	case "vn_tin":
		fallthrough
	case "za_vat":
		*e = TaxIDFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TaxIDFormat: %v", v)
	}
}
