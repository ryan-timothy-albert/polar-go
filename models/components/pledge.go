// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/polarsource/polar-go/internal/utils"
	"time"
)

type Pledge struct {
	// Creation timestamp of the object.
	CreatedAt time.Time `json:"created_at"`
	// Last modification timestamp of the object.
	ModifiedAt *time.Time `json:"modified_at"`
	// The ID of the object.
	ID string `json:"id"`
	// Amount pledged towards the issue
	Amount   int64       `json:"amount"`
	Currency string      `json:"currency"`
	State    PledgeState `json:"state"`
	Type     PledgeType  `json:"type"`
	// If and when the pledge was refunded to the pledger
	RefundedAt *time.Time `json:"refunded_at,omitempty"`
	// When the payout is scheduled to be made to the maintainers behind the issue. Disputes must be made before this date.
	ScheduledPayoutAt *time.Time `json:"scheduled_payout_at,omitempty"`
	Issue             Issue      `json:"issue"`
	// The user or organization that made this pledge
	Pledger *Pledger `json:"pledger,omitempty"`
	// URL of invoice for this pledge
	HostedInvoiceURL *string `json:"hosted_invoice_url,omitempty"`
	// If the currently authenticated subject can perform admin actions on behalf of the maker of the peldge
	AuthedCanAdminSender *bool `default:"false" json:"authed_can_admin_sender"`
	// If the currently authenticated subject can perform admin actions on behalf of the receiver of the peldge
	AuthedCanAdminReceived *bool `default:"false" json:"authed_can_admin_received"`
	// For pledges made by an organization, or on behalf of an organization. This is the user that made the pledge. Only visible for members of said organization.
	CreatedBy *Pledger `json:"created_by,omitempty"`
}

func (p Pledge) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Pledge) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Pledge) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *Pledge) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *Pledge) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Pledge) GetAmount() int64 {
	if o == nil {
		return 0
	}
	return o.Amount
}

func (o *Pledge) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *Pledge) GetState() PledgeState {
	if o == nil {
		return PledgeState("")
	}
	return o.State
}

func (o *Pledge) GetType() PledgeType {
	if o == nil {
		return PledgeType("")
	}
	return o.Type
}

func (o *Pledge) GetRefundedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RefundedAt
}

func (o *Pledge) GetScheduledPayoutAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ScheduledPayoutAt
}

func (o *Pledge) GetIssue() Issue {
	if o == nil {
		return Issue{}
	}
	return o.Issue
}

func (o *Pledge) GetPledger() *Pledger {
	if o == nil {
		return nil
	}
	return o.Pledger
}

func (o *Pledge) GetHostedInvoiceURL() *string {
	if o == nil {
		return nil
	}
	return o.HostedInvoiceURL
}

func (o *Pledge) GetAuthedCanAdminSender() *bool {
	if o == nil {
		return nil
	}
	return o.AuthedCanAdminSender
}

func (o *Pledge) GetAuthedCanAdminReceived() *bool {
	if o == nil {
		return nil
	}
	return o.AuthedCanAdminReceived
}

func (o *Pledge) GetCreatedBy() *Pledger {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}
