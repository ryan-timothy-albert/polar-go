// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"polar/internal/utils"
)

type WebhookProductCreatedPayloadType string

const (
	WebhookProductCreatedPayloadTypeProductCreated WebhookProductCreatedPayloadType = "product.created"
)

func (e WebhookProductCreatedPayloadType) ToPointer() *WebhookProductCreatedPayloadType {
	return &e
}
func (e *WebhookProductCreatedPayloadType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "product.created":
		*e = WebhookProductCreatedPayloadType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookProductCreatedPayloadType: %v", v)
	}
}

// WebhookProductCreatedPayload - Sent when a new product is created.
//
// **Discord & Slack support:** Basic
type WebhookProductCreatedPayload struct {
	type_ WebhookProductCreatedPayloadType `const:"product.created" json:"type"`
	// A product.
	Data Product `json:"data"`
}

func (w WebhookProductCreatedPayload) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WebhookProductCreatedPayload) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *WebhookProductCreatedPayload) GetType() WebhookProductCreatedPayloadType {
	return WebhookProductCreatedPayloadTypeProductCreated
}

func (o *WebhookProductCreatedPayload) GetData() Product {
	if o == nil {
		return Product{}
	}
	return o.Data
}
