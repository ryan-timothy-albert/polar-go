// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Scope string

const (
	ScopeOpenid                    Scope = "openid"
	ScopeProfile                   Scope = "profile"
	ScopeEmail                     Scope = "email"
	ScopeUserRead                  Scope = "user:read"
	ScopeAdmin                     Scope = "admin"
	ScopeWebDefault                Scope = "web_default"
	ScopeOrganizationsRead         Scope = "organizations:read"
	ScopeOrganizationsWrite        Scope = "organizations:write"
	ScopeCustomFieldsRead          Scope = "custom_fields:read"
	ScopeCustomFieldsWrite         Scope = "custom_fields:write"
	ScopeDiscountsRead             Scope = "discounts:read"
	ScopeDiscountsWrite            Scope = "discounts:write"
	ScopeCheckoutLinksRead         Scope = "checkout_links:read"
	ScopeCheckoutLinksWrite        Scope = "checkout_links:write"
	ScopeCheckoutsRead             Scope = "checkouts:read"
	ScopeCheckoutsWrite            Scope = "checkouts:write"
	ScopeProductsRead              Scope = "products:read"
	ScopeProductsWrite             Scope = "products:write"
	ScopeBenefitsRead              Scope = "benefits:read"
	ScopeBenefitsWrite             Scope = "benefits:write"
	ScopeFilesRead                 Scope = "files:read"
	ScopeFilesWrite                Scope = "files:write"
	ScopeSubscriptionsRead         Scope = "subscriptions:read"
	ScopeSubscriptionsWrite        Scope = "subscriptions:write"
	ScopeCustomersRead             Scope = "customers:read"
	ScopeCustomersWrite            Scope = "customers:write"
	ScopeCustomerSessionsWrite     Scope = "customer_sessions:write"
	ScopeOrdersRead                Scope = "orders:read"
	ScopeMetricsRead               Scope = "metrics:read"
	ScopeWebhooksRead              Scope = "webhooks:read"
	ScopeWebhooksWrite             Scope = "webhooks:write"
	ScopeExternalOrganizationsRead Scope = "external_organizations:read"
	ScopeLicenseKeysRead           Scope = "license_keys:read"
	ScopeLicenseKeysWrite          Scope = "license_keys:write"
	ScopeRepositoriesRead          Scope = "repositories:read"
	ScopeRepositoriesWrite         Scope = "repositories:write"
	ScopeIssuesRead                Scope = "issues:read"
	ScopeIssuesWrite               Scope = "issues:write"
	ScopeCustomerPortalRead        Scope = "customer_portal:read"
	ScopeCustomerPortalWrite       Scope = "customer_portal:write"
)

func (e Scope) ToPointer() *Scope {
	return &e
}
func (e *Scope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "openid":
		fallthrough
	case "profile":
		fallthrough
	case "email":
		fallthrough
	case "user:read":
		fallthrough
	case "admin":
		fallthrough
	case "web_default":
		fallthrough
	case "organizations:read":
		fallthrough
	case "organizations:write":
		fallthrough
	case "custom_fields:read":
		fallthrough
	case "custom_fields:write":
		fallthrough
	case "discounts:read":
		fallthrough
	case "discounts:write":
		fallthrough
	case "checkout_links:read":
		fallthrough
	case "checkout_links:write":
		fallthrough
	case "checkouts:read":
		fallthrough
	case "checkouts:write":
		fallthrough
	case "products:read":
		fallthrough
	case "products:write":
		fallthrough
	case "benefits:read":
		fallthrough
	case "benefits:write":
		fallthrough
	case "files:read":
		fallthrough
	case "files:write":
		fallthrough
	case "subscriptions:read":
		fallthrough
	case "subscriptions:write":
		fallthrough
	case "customers:read":
		fallthrough
	case "customers:write":
		fallthrough
	case "customer_sessions:write":
		fallthrough
	case "orders:read":
		fallthrough
	case "metrics:read":
		fallthrough
	case "webhooks:read":
		fallthrough
	case "webhooks:write":
		fallthrough
	case "external_organizations:read":
		fallthrough
	case "license_keys:read":
		fallthrough
	case "license_keys:write":
		fallthrough
	case "repositories:read":
		fallthrough
	case "repositories:write":
		fallthrough
	case "issues:read":
		fallthrough
	case "issues:write":
		fallthrough
	case "customer_portal:read":
		fallthrough
	case "customer_portal:write":
		*e = Scope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Scope: %v", v)
	}
}
