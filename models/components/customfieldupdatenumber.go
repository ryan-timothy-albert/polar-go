// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
)

type CustomFieldUpdateNumberMetadataType string

const (
	CustomFieldUpdateNumberMetadataTypeStr     CustomFieldUpdateNumberMetadataType = "str"
	CustomFieldUpdateNumberMetadataTypeInteger CustomFieldUpdateNumberMetadataType = "integer"
	CustomFieldUpdateNumberMetadataTypeBoolean CustomFieldUpdateNumberMetadataType = "boolean"
)

type CustomFieldUpdateNumberMetadata struct {
	Str     *string `queryParam:"inline"`
	Integer *int64  `queryParam:"inline"`
	Boolean *bool   `queryParam:"inline"`

	Type CustomFieldUpdateNumberMetadataType
}

func CreateCustomFieldUpdateNumberMetadataStr(str string) CustomFieldUpdateNumberMetadata {
	typ := CustomFieldUpdateNumberMetadataTypeStr

	return CustomFieldUpdateNumberMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateCustomFieldUpdateNumberMetadataInteger(integer int64) CustomFieldUpdateNumberMetadata {
	typ := CustomFieldUpdateNumberMetadataTypeInteger

	return CustomFieldUpdateNumberMetadata{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCustomFieldUpdateNumberMetadataBoolean(boolean bool) CustomFieldUpdateNumberMetadata {
	typ := CustomFieldUpdateNumberMetadataTypeBoolean

	return CustomFieldUpdateNumberMetadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CustomFieldUpdateNumberMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CustomFieldUpdateNumberMetadataTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = CustomFieldUpdateNumberMetadataTypeInteger
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = CustomFieldUpdateNumberMetadataTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomFieldUpdateNumberMetadata", string(data))
}

func (u CustomFieldUpdateNumberMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type CustomFieldUpdateNumberMetadata: all fields are null")
}

// CustomFieldUpdateNumber - Schema to update a custom field of type number.
type CustomFieldUpdateNumber struct {
	Metadata   map[string]CustomFieldUpdateNumberMetadata `json:"metadata,omitempty"`
	Name       *string                                    `json:"name,omitempty"`
	Slug       *string                                    `json:"slug,omitempty"`
	type_      string                                     `const:"number" json:"type"`
	Properties *CustomFieldNumberProperties               `json:"properties,omitempty"`
}

func (c CustomFieldUpdateNumber) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CustomFieldUpdateNumber) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CustomFieldUpdateNumber) GetMetadata() map[string]CustomFieldUpdateNumberMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CustomFieldUpdateNumber) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CustomFieldUpdateNumber) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CustomFieldUpdateNumber) GetType() string {
	return "number"
}

func (o *CustomFieldUpdateNumber) GetProperties() *CustomFieldNumberProperties {
	if o == nil {
		return nil
	}
	return o.Properties
}
