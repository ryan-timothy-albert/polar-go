// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"polar/internal/utils"
)

type ProductPriceOneTimeFixedCreateType string

const (
	ProductPriceOneTimeFixedCreateTypeOneTime ProductPriceOneTimeFixedCreateType = "one_time"
)

func (e ProductPriceOneTimeFixedCreateType) ToPointer() *ProductPriceOneTimeFixedCreateType {
	return &e
}
func (e *ProductPriceOneTimeFixedCreateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "one_time":
		*e = ProductPriceOneTimeFixedCreateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductPriceOneTimeFixedCreateType: %v", v)
	}
}

type ProductPriceOneTimeFixedCreateAmountType string

const (
	ProductPriceOneTimeFixedCreateAmountTypeFixed ProductPriceOneTimeFixedCreateAmountType = "fixed"
)

func (e ProductPriceOneTimeFixedCreateAmountType) ToPointer() *ProductPriceOneTimeFixedCreateAmountType {
	return &e
}
func (e *ProductPriceOneTimeFixedCreateAmountType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed":
		*e = ProductPriceOneTimeFixedCreateAmountType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductPriceOneTimeFixedCreateAmountType: %v", v)
	}
}

// ProductPriceOneTimeFixedCreate - Schema to create a one-time product price.
type ProductPriceOneTimeFixedCreate struct {
	type_      ProductPriceOneTimeFixedCreateType       `const:"one_time" json:"type"`
	amountType ProductPriceOneTimeFixedCreateAmountType `const:"fixed" json:"amount_type"`
	// The price in cents.
	PriceAmount int64 `json:"price_amount"`
	// The currency. Currently, only `usd` is supported.
	PriceCurrency *string `default:"usd" json:"price_currency"`
}

func (p ProductPriceOneTimeFixedCreate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProductPriceOneTimeFixedCreate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ProductPriceOneTimeFixedCreate) GetType() ProductPriceOneTimeFixedCreateType {
	return ProductPriceOneTimeFixedCreateTypeOneTime
}

func (o *ProductPriceOneTimeFixedCreate) GetAmountType() ProductPriceOneTimeFixedCreateAmountType {
	return ProductPriceOneTimeFixedCreateAmountTypeFixed
}

func (o *ProductPriceOneTimeFixedCreate) GetPriceAmount() int64 {
	if o == nil {
		return 0
	}
	return o.PriceAmount
}

func (o *ProductPriceOneTimeFixedCreate) GetPriceCurrency() *string {
	if o == nil {
		return nil
	}
	return o.PriceCurrency
}
