// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/polarsource/polar-go/internal/utils"
)

// ProductPriceOneTimeFixedCreate - Schema to create a one-time product price.
type ProductPriceOneTimeFixedCreate struct {
	type_      string `const:"one_time" json:"type"`
	amountType string `const:"fixed" json:"amount_type"`
	// The price in cents.
	PriceAmount int64 `json:"price_amount"`
	// The currency. Currently, only `usd` is supported.
	PriceCurrency *string `default:"usd" json:"price_currency"`
}

func (p ProductPriceOneTimeFixedCreate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProductPriceOneTimeFixedCreate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ProductPriceOneTimeFixedCreate) GetType() string {
	return "one_time"
}

func (o *ProductPriceOneTimeFixedCreate) GetAmountType() string {
	return "fixed"
}

func (o *ProductPriceOneTimeFixedCreate) GetPriceAmount() int64 {
	if o == nil {
		return 0
	}
	return o.PriceAmount
}

func (o *ProductPriceOneTimeFixedCreate) GetPriceCurrency() *string {
	if o == nil {
		return nil
	}
	return o.PriceCurrency
}
