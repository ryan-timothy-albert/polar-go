// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"polar/internal/utils"
	"time"
)

// CheckoutPublicCustomFieldData - Key-value object storing custom field values.
type CheckoutPublicCustomFieldData struct {
}

type CheckoutPublicPaymentProcessorMetadata struct {
}

type CheckoutPublicDiscountType string

const (
	CheckoutPublicDiscountTypeCheckoutDiscountFixedOnceForeverDuration      CheckoutPublicDiscountType = "CheckoutDiscountFixedOnceForeverDuration"
	CheckoutPublicDiscountTypeCheckoutDiscountFixedRepeatDuration           CheckoutPublicDiscountType = "CheckoutDiscountFixedRepeatDuration"
	CheckoutPublicDiscountTypeCheckoutDiscountPercentageOnceForeverDuration CheckoutPublicDiscountType = "CheckoutDiscountPercentageOnceForeverDuration"
	CheckoutPublicDiscountTypeCheckoutDiscountPercentageRepeatDuration      CheckoutPublicDiscountType = "CheckoutDiscountPercentageRepeatDuration"
)

type CheckoutPublicDiscount struct {
	CheckoutDiscountFixedOnceForeverDuration      *CheckoutDiscountFixedOnceForeverDuration      `queryParam:"inline"`
	CheckoutDiscountFixedRepeatDuration           *CheckoutDiscountFixedRepeatDuration           `queryParam:"inline"`
	CheckoutDiscountPercentageOnceForeverDuration *CheckoutDiscountPercentageOnceForeverDuration `queryParam:"inline"`
	CheckoutDiscountPercentageRepeatDuration      *CheckoutDiscountPercentageRepeatDuration      `queryParam:"inline"`

	Type CheckoutPublicDiscountType
}

func CreateCheckoutPublicDiscountCheckoutDiscountFixedOnceForeverDuration(checkoutDiscountFixedOnceForeverDuration CheckoutDiscountFixedOnceForeverDuration) CheckoutPublicDiscount {
	typ := CheckoutPublicDiscountTypeCheckoutDiscountFixedOnceForeverDuration

	return CheckoutPublicDiscount{
		CheckoutDiscountFixedOnceForeverDuration: &checkoutDiscountFixedOnceForeverDuration,
		Type:                                     typ,
	}
}

func CreateCheckoutPublicDiscountCheckoutDiscountFixedRepeatDuration(checkoutDiscountFixedRepeatDuration CheckoutDiscountFixedRepeatDuration) CheckoutPublicDiscount {
	typ := CheckoutPublicDiscountTypeCheckoutDiscountFixedRepeatDuration

	return CheckoutPublicDiscount{
		CheckoutDiscountFixedRepeatDuration: &checkoutDiscountFixedRepeatDuration,
		Type:                                typ,
	}
}

func CreateCheckoutPublicDiscountCheckoutDiscountPercentageOnceForeverDuration(checkoutDiscountPercentageOnceForeverDuration CheckoutDiscountPercentageOnceForeverDuration) CheckoutPublicDiscount {
	typ := CheckoutPublicDiscountTypeCheckoutDiscountPercentageOnceForeverDuration

	return CheckoutPublicDiscount{
		CheckoutDiscountPercentageOnceForeverDuration: &checkoutDiscountPercentageOnceForeverDuration,
		Type: typ,
	}
}

func CreateCheckoutPublicDiscountCheckoutDiscountPercentageRepeatDuration(checkoutDiscountPercentageRepeatDuration CheckoutDiscountPercentageRepeatDuration) CheckoutPublicDiscount {
	typ := CheckoutPublicDiscountTypeCheckoutDiscountPercentageRepeatDuration

	return CheckoutPublicDiscount{
		CheckoutDiscountPercentageRepeatDuration: &checkoutDiscountPercentageRepeatDuration,
		Type:                                     typ,
	}
}

func (u *CheckoutPublicDiscount) UnmarshalJSON(data []byte) error {

	var checkoutDiscountPercentageOnceForeverDuration CheckoutDiscountPercentageOnceForeverDuration = CheckoutDiscountPercentageOnceForeverDuration{}
	if err := utils.UnmarshalJSON(data, &checkoutDiscountPercentageOnceForeverDuration, "", true, true); err == nil {
		u.CheckoutDiscountPercentageOnceForeverDuration = &checkoutDiscountPercentageOnceForeverDuration
		u.Type = CheckoutPublicDiscountTypeCheckoutDiscountPercentageOnceForeverDuration
		return nil
	}

	var checkoutDiscountFixedOnceForeverDuration CheckoutDiscountFixedOnceForeverDuration = CheckoutDiscountFixedOnceForeverDuration{}
	if err := utils.UnmarshalJSON(data, &checkoutDiscountFixedOnceForeverDuration, "", true, true); err == nil {
		u.CheckoutDiscountFixedOnceForeverDuration = &checkoutDiscountFixedOnceForeverDuration
		u.Type = CheckoutPublicDiscountTypeCheckoutDiscountFixedOnceForeverDuration
		return nil
	}

	var checkoutDiscountPercentageRepeatDuration CheckoutDiscountPercentageRepeatDuration = CheckoutDiscountPercentageRepeatDuration{}
	if err := utils.UnmarshalJSON(data, &checkoutDiscountPercentageRepeatDuration, "", true, true); err == nil {
		u.CheckoutDiscountPercentageRepeatDuration = &checkoutDiscountPercentageRepeatDuration
		u.Type = CheckoutPublicDiscountTypeCheckoutDiscountPercentageRepeatDuration
		return nil
	}

	var checkoutDiscountFixedRepeatDuration CheckoutDiscountFixedRepeatDuration = CheckoutDiscountFixedRepeatDuration{}
	if err := utils.UnmarshalJSON(data, &checkoutDiscountFixedRepeatDuration, "", true, true); err == nil {
		u.CheckoutDiscountFixedRepeatDuration = &checkoutDiscountFixedRepeatDuration
		u.Type = CheckoutPublicDiscountTypeCheckoutDiscountFixedRepeatDuration
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CheckoutPublicDiscount", string(data))
}

func (u CheckoutPublicDiscount) MarshalJSON() ([]byte, error) {
	if u.CheckoutDiscountFixedOnceForeverDuration != nil {
		return utils.MarshalJSON(u.CheckoutDiscountFixedOnceForeverDuration, "", true)
	}

	if u.CheckoutDiscountFixedRepeatDuration != nil {
		return utils.MarshalJSON(u.CheckoutDiscountFixedRepeatDuration, "", true)
	}

	if u.CheckoutDiscountPercentageOnceForeverDuration != nil {
		return utils.MarshalJSON(u.CheckoutDiscountPercentageOnceForeverDuration, "", true)
	}

	if u.CheckoutDiscountPercentageRepeatDuration != nil {
		return utils.MarshalJSON(u.CheckoutDiscountPercentageRepeatDuration, "", true)
	}

	return nil, errors.New("could not marshal union type CheckoutPublicDiscount: all fields are null")
}

// CheckoutPublic - Checkout session data retrieved using the client secret.
type CheckoutPublic struct {
	// Creation timestamp of the object.
	CreatedAt time.Time `json:"created_at"`
	// Last modification timestamp of the object.
	ModifiedAt *time.Time `json:"modified_at"`
	// The ID of the object.
	ID string `json:"id"`
	// Key-value object storing custom field values.
	CustomFieldData  *CheckoutPublicCustomFieldData `json:"custom_field_data,omitempty"`
	paymentProcessor PaymentProcessor               `const:"stripe" json:"payment_processor"`
	Status           CheckoutStatus                 `json:"status"`
	// Client secret used to update and complete the checkout session from the client.
	ClientSecret string `json:"client_secret"`
	// URL where the customer can access the checkout session.
	URL string `json:"url"`
	// Expiration date and time of the checkout session.
	ExpiresAt time.Time `json:"expires_at"`
	// URL where the customer will be redirected after a successful payment.
	SuccessURL string `json:"success_url"`
	// When checkout is embedded, represents the Origin of the page embedding the checkout. Used as a security measure to send messages only to the embedding page.
	EmbedOrigin *string `json:"embed_origin"`
	Amount      *int64  `json:"amount"`
	// Computed tax amount to pay in cents.
	TaxAmount *int64 `json:"tax_amount"`
	// Currency code of the checkout session.
	Currency *string `json:"currency"`
	// Subtotal amount in cents, including discounts and before tax.
	SubtotalAmount *int64 `json:"subtotal_amount"`
	// Total amount to pay in cents, including discounts and after tax.
	TotalAmount *int64 `json:"total_amount"`
	// ID of the product to checkout.
	ProductID string `json:"product_id"`
	// ID of the product price to checkout.
	ProductPriceID string `json:"product_price_id"`
	// ID of the discount applied to the checkout.
	DiscountID *string `json:"discount_id"`
	// Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
	AllowDiscountCodes bool `json:"allow_discount_codes"`
	// Whether the discount is applicable to the checkout. Typically, free and custom prices are not discountable.
	IsDiscountApplicable bool `json:"is_discount_applicable"`
	// Whether the product price is free, regardless of discounts.
	IsFreeProductPrice bool `json:"is_free_product_price"`
	// Whether the checkout requires payment, e.g. in case of free products or discounts that cover the total amount.
	IsPaymentRequired bool `json:"is_payment_required"`
	// Whether the checkout requires setting up a payment method, regardless of the amount, e.g. subscriptions that have first free cycles.
	IsPaymentSetupRequired bool `json:"is_payment_setup_required"`
	// Whether the checkout requires a payment form, whether because of a payment or payment method setup.
	IsPaymentFormRequired    bool                                   `json:"is_payment_form_required"`
	CustomerID               *string                                `json:"customer_id"`
	CustomerName             *string                                `json:"customer_name"`
	CustomerEmail            *string                                `json:"customer_email"`
	CustomerIPAddress        *string                                `json:"customer_ip_address"`
	CustomerBillingAddress   *Address                               `json:"customer_billing_address"`
	CustomerTaxID            *string                                `json:"customer_tax_id"`
	PaymentProcessorMetadata CheckoutPublicPaymentProcessorMetadata `json:"payment_processor_metadata"`
	// Product data for a checkout session.
	Product              CheckoutProduct         `json:"product"`
	ProductPrice         ProductPrice            `json:"product_price"`
	Discount             *CheckoutPublicDiscount `json:"discount"`
	Organization         Organization            `json:"organization"`
	AttachedCustomFields []AttachedCustomField   `json:"attached_custom_fields"`
}

func (c CheckoutPublic) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CheckoutPublic) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CheckoutPublic) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *CheckoutPublic) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *CheckoutPublic) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CheckoutPublic) GetCustomFieldData() *CheckoutPublicCustomFieldData {
	if o == nil {
		return nil
	}
	return o.CustomFieldData
}

func (o *CheckoutPublic) GetPaymentProcessor() PaymentProcessor {
	return PaymentProcessorStripe
}

func (o *CheckoutPublic) GetStatus() CheckoutStatus {
	if o == nil {
		return CheckoutStatus("")
	}
	return o.Status
}

func (o *CheckoutPublic) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *CheckoutPublic) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CheckoutPublic) GetExpiresAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ExpiresAt
}

func (o *CheckoutPublic) GetSuccessURL() string {
	if o == nil {
		return ""
	}
	return o.SuccessURL
}

func (o *CheckoutPublic) GetEmbedOrigin() *string {
	if o == nil {
		return nil
	}
	return o.EmbedOrigin
}

func (o *CheckoutPublic) GetAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CheckoutPublic) GetTaxAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.TaxAmount
}

func (o *CheckoutPublic) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *CheckoutPublic) GetSubtotalAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.SubtotalAmount
}

func (o *CheckoutPublic) GetTotalAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}

func (o *CheckoutPublic) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *CheckoutPublic) GetProductPriceID() string {
	if o == nil {
		return ""
	}
	return o.ProductPriceID
}

func (o *CheckoutPublic) GetDiscountID() *string {
	if o == nil {
		return nil
	}
	return o.DiscountID
}

func (o *CheckoutPublic) GetAllowDiscountCodes() bool {
	if o == nil {
		return false
	}
	return o.AllowDiscountCodes
}

func (o *CheckoutPublic) GetIsDiscountApplicable() bool {
	if o == nil {
		return false
	}
	return o.IsDiscountApplicable
}

func (o *CheckoutPublic) GetIsFreeProductPrice() bool {
	if o == nil {
		return false
	}
	return o.IsFreeProductPrice
}

func (o *CheckoutPublic) GetIsPaymentRequired() bool {
	if o == nil {
		return false
	}
	return o.IsPaymentRequired
}

func (o *CheckoutPublic) GetIsPaymentSetupRequired() bool {
	if o == nil {
		return false
	}
	return o.IsPaymentSetupRequired
}

func (o *CheckoutPublic) GetIsPaymentFormRequired() bool {
	if o == nil {
		return false
	}
	return o.IsPaymentFormRequired
}

func (o *CheckoutPublic) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *CheckoutPublic) GetCustomerName() *string {
	if o == nil {
		return nil
	}
	return o.CustomerName
}

func (o *CheckoutPublic) GetCustomerEmail() *string {
	if o == nil {
		return nil
	}
	return o.CustomerEmail
}

func (o *CheckoutPublic) GetCustomerIPAddress() *string {
	if o == nil {
		return nil
	}
	return o.CustomerIPAddress
}

func (o *CheckoutPublic) GetCustomerBillingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.CustomerBillingAddress
}

func (o *CheckoutPublic) GetCustomerTaxID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerTaxID
}

func (o *CheckoutPublic) GetPaymentProcessorMetadata() CheckoutPublicPaymentProcessorMetadata {
	if o == nil {
		return CheckoutPublicPaymentProcessorMetadata{}
	}
	return o.PaymentProcessorMetadata
}

func (o *CheckoutPublic) GetProduct() CheckoutProduct {
	if o == nil {
		return CheckoutProduct{}
	}
	return o.Product
}

func (o *CheckoutPublic) GetProductPrice() ProductPrice {
	if o == nil {
		return ProductPrice{}
	}
	return o.ProductPrice
}

func (o *CheckoutPublic) GetDiscount() *CheckoutPublicDiscount {
	if o == nil {
		return nil
	}
	return o.Discount
}

func (o *CheckoutPublic) GetOrganization() Organization {
	if o == nil {
		return Organization{}
	}
	return o.Organization
}

func (o *CheckoutPublic) GetAttachedCustomFields() []AttachedCustomField {
	if o == nil {
		return []AttachedCustomField{}
	}
	return o.AttachedCustomFields
}
