// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
)

type CustomFieldCreateType string

const (
	CustomFieldCreateTypeCheckbox CustomFieldCreateType = "checkbox"
	CustomFieldCreateTypeDate     CustomFieldCreateType = "date"
	CustomFieldCreateTypeNumber   CustomFieldCreateType = "number"
	CustomFieldCreateTypeSelect   CustomFieldCreateType = "select"
	CustomFieldCreateTypeText     CustomFieldCreateType = "text"
)

type CustomFieldCreate struct {
	CustomFieldCreateText     *CustomFieldCreateText     `queryParam:"inline"`
	CustomFieldCreateNumber   *CustomFieldCreateNumber   `queryParam:"inline"`
	CustomFieldCreateDate     *CustomFieldCreateDate     `queryParam:"inline"`
	CustomFieldCreateCheckbox *CustomFieldCreateCheckbox `queryParam:"inline"`
	CustomFieldCreateSelect   *CustomFieldCreateSelect   `queryParam:"inline"`

	Type CustomFieldCreateType
}

func CreateCustomFieldCreateCheckbox(checkbox CustomFieldCreateCheckbox) CustomFieldCreate {
	typ := CustomFieldCreateTypeCheckbox

	return CustomFieldCreate{
		CustomFieldCreateCheckbox: &checkbox,
		Type:                      typ,
	}
}

func CreateCustomFieldCreateDate(date CustomFieldCreateDate) CustomFieldCreate {
	typ := CustomFieldCreateTypeDate

	return CustomFieldCreate{
		CustomFieldCreateDate: &date,
		Type:                  typ,
	}
}

func CreateCustomFieldCreateNumber(number CustomFieldCreateNumber) CustomFieldCreate {
	typ := CustomFieldCreateTypeNumber

	return CustomFieldCreate{
		CustomFieldCreateNumber: &number,
		Type:                    typ,
	}
}

func CreateCustomFieldCreateSelect(selectT CustomFieldCreateSelect) CustomFieldCreate {
	typ := CustomFieldCreateTypeSelect

	return CustomFieldCreate{
		CustomFieldCreateSelect: &selectT,
		Type:                    typ,
	}
}

func CreateCustomFieldCreateText(text CustomFieldCreateText) CustomFieldCreate {
	typ := CustomFieldCreateTypeText

	return CustomFieldCreate{
		CustomFieldCreateText: &text,
		Type:                  typ,
	}
}

func (u *CustomFieldCreate) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "checkbox":
		customFieldCreateCheckbox := new(CustomFieldCreateCheckbox)
		if err := utils.UnmarshalJSON(data, &customFieldCreateCheckbox, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == checkbox) type CustomFieldCreateCheckbox within CustomFieldCreate: %w", string(data), err)
		}

		u.CustomFieldCreateCheckbox = customFieldCreateCheckbox
		u.Type = CustomFieldCreateTypeCheckbox
		return nil
	case "date":
		customFieldCreateDate := new(CustomFieldCreateDate)
		if err := utils.UnmarshalJSON(data, &customFieldCreateDate, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == date) type CustomFieldCreateDate within CustomFieldCreate: %w", string(data), err)
		}

		u.CustomFieldCreateDate = customFieldCreateDate
		u.Type = CustomFieldCreateTypeDate
		return nil
	case "number":
		customFieldCreateNumber := new(CustomFieldCreateNumber)
		if err := utils.UnmarshalJSON(data, &customFieldCreateNumber, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == number) type CustomFieldCreateNumber within CustomFieldCreate: %w", string(data), err)
		}

		u.CustomFieldCreateNumber = customFieldCreateNumber
		u.Type = CustomFieldCreateTypeNumber
		return nil
	case "select":
		customFieldCreateSelect := new(CustomFieldCreateSelect)
		if err := utils.UnmarshalJSON(data, &customFieldCreateSelect, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == select) type CustomFieldCreateSelect within CustomFieldCreate: %w", string(data), err)
		}

		u.CustomFieldCreateSelect = customFieldCreateSelect
		u.Type = CustomFieldCreateTypeSelect
		return nil
	case "text":
		customFieldCreateText := new(CustomFieldCreateText)
		if err := utils.UnmarshalJSON(data, &customFieldCreateText, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == text) type CustomFieldCreateText within CustomFieldCreate: %w", string(data), err)
		}

		u.CustomFieldCreateText = customFieldCreateText
		u.Type = CustomFieldCreateTypeText
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomFieldCreate", string(data))
}

func (u CustomFieldCreate) MarshalJSON() ([]byte, error) {
	if u.CustomFieldCreateText != nil {
		return utils.MarshalJSON(u.CustomFieldCreateText, "", true)
	}

	if u.CustomFieldCreateNumber != nil {
		return utils.MarshalJSON(u.CustomFieldCreateNumber, "", true)
	}

	if u.CustomFieldCreateDate != nil {
		return utils.MarshalJSON(u.CustomFieldCreateDate, "", true)
	}

	if u.CustomFieldCreateCheckbox != nil {
		return utils.MarshalJSON(u.CustomFieldCreateCheckbox, "", true)
	}

	if u.CustomFieldCreateSelect != nil {
		return utils.MarshalJSON(u.CustomFieldCreateSelect, "", true)
	}

	return nil, errors.New("could not marshal union type CustomFieldCreate: all fields are null")
}
