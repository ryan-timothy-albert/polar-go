// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"polar/internal/utils"
)

type CustomerBenefitGrantUpdateType string

const (
	CustomerBenefitGrantUpdateTypeAds              CustomerBenefitGrantUpdateType = "ads"
	CustomerBenefitGrantUpdateTypeCustom           CustomerBenefitGrantUpdateType = "custom"
	CustomerBenefitGrantUpdateTypeDiscord          CustomerBenefitGrantUpdateType = "discord"
	CustomerBenefitGrantUpdateTypeDownloadables    CustomerBenefitGrantUpdateType = "downloadables"
	CustomerBenefitGrantUpdateTypeGithubRepository CustomerBenefitGrantUpdateType = "github_repository"
	CustomerBenefitGrantUpdateTypeLicenseKeys      CustomerBenefitGrantUpdateType = "license_keys"
)

type CustomerBenefitGrantUpdate struct {
	CustomerBenefitGrantDiscordUpdate          *CustomerBenefitGrantDiscordUpdate          `queryParam:"inline"`
	CustomerBenefitGrantGitHubRepositoryUpdate *CustomerBenefitGrantGitHubRepositoryUpdate `queryParam:"inline"`
	CustomerBenefitGrantDownloadablesUpdate    *CustomerBenefitGrantDownloadablesUpdate    `queryParam:"inline"`
	CustomerBenefitGrantLicenseKeysUpdate      *CustomerBenefitGrantLicenseKeysUpdate      `queryParam:"inline"`
	CustomerBenefitGrantAdsUpdate              *CustomerBenefitGrantAdsUpdate              `queryParam:"inline"`
	CustomerBenefitGrantCustomUpdate           *CustomerBenefitGrantCustomUpdate           `queryParam:"inline"`

	Type CustomerBenefitGrantUpdateType
}

func CreateCustomerBenefitGrantUpdateAds(ads CustomerBenefitGrantAdsUpdate) CustomerBenefitGrantUpdate {
	typ := CustomerBenefitGrantUpdateTypeAds

	return CustomerBenefitGrantUpdate{
		CustomerBenefitGrantAdsUpdate: &ads,
		Type:                          typ,
	}
}

func CreateCustomerBenefitGrantUpdateCustom(custom CustomerBenefitGrantCustomUpdate) CustomerBenefitGrantUpdate {
	typ := CustomerBenefitGrantUpdateTypeCustom

	return CustomerBenefitGrantUpdate{
		CustomerBenefitGrantCustomUpdate: &custom,
		Type:                             typ,
	}
}

func CreateCustomerBenefitGrantUpdateDiscord(discord CustomerBenefitGrantDiscordUpdate) CustomerBenefitGrantUpdate {
	typ := CustomerBenefitGrantUpdateTypeDiscord

	return CustomerBenefitGrantUpdate{
		CustomerBenefitGrantDiscordUpdate: &discord,
		Type:                              typ,
	}
}

func CreateCustomerBenefitGrantUpdateDownloadables(downloadables CustomerBenefitGrantDownloadablesUpdate) CustomerBenefitGrantUpdate {
	typ := CustomerBenefitGrantUpdateTypeDownloadables

	return CustomerBenefitGrantUpdate{
		CustomerBenefitGrantDownloadablesUpdate: &downloadables,
		Type:                                    typ,
	}
}

func CreateCustomerBenefitGrantUpdateGithubRepository(githubRepository CustomerBenefitGrantGitHubRepositoryUpdate) CustomerBenefitGrantUpdate {
	typ := CustomerBenefitGrantUpdateTypeGithubRepository

	return CustomerBenefitGrantUpdate{
		CustomerBenefitGrantGitHubRepositoryUpdate: &githubRepository,
		Type: typ,
	}
}

func CreateCustomerBenefitGrantUpdateLicenseKeys(licenseKeys CustomerBenefitGrantLicenseKeysUpdate) CustomerBenefitGrantUpdate {
	typ := CustomerBenefitGrantUpdateTypeLicenseKeys

	return CustomerBenefitGrantUpdate{
		CustomerBenefitGrantLicenseKeysUpdate: &licenseKeys,
		Type:                                  typ,
	}
}

func (u *CustomerBenefitGrantUpdate) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		BenefitType string `json:"benefit_type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.BenefitType {
	case "ads":
		customerBenefitGrantAdsUpdate := new(CustomerBenefitGrantAdsUpdate)
		if err := utils.UnmarshalJSON(data, &customerBenefitGrantAdsUpdate, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (BenefitType == ads) type CustomerBenefitGrantAdsUpdate within CustomerBenefitGrantUpdate: %w", string(data), err)
		}

		u.CustomerBenefitGrantAdsUpdate = customerBenefitGrantAdsUpdate
		u.Type = CustomerBenefitGrantUpdateTypeAds
		return nil
	case "custom":
		customerBenefitGrantCustomUpdate := new(CustomerBenefitGrantCustomUpdate)
		if err := utils.UnmarshalJSON(data, &customerBenefitGrantCustomUpdate, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (BenefitType == custom) type CustomerBenefitGrantCustomUpdate within CustomerBenefitGrantUpdate: %w", string(data), err)
		}

		u.CustomerBenefitGrantCustomUpdate = customerBenefitGrantCustomUpdate
		u.Type = CustomerBenefitGrantUpdateTypeCustom
		return nil
	case "discord":
		customerBenefitGrantDiscordUpdate := new(CustomerBenefitGrantDiscordUpdate)
		if err := utils.UnmarshalJSON(data, &customerBenefitGrantDiscordUpdate, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (BenefitType == discord) type CustomerBenefitGrantDiscordUpdate within CustomerBenefitGrantUpdate: %w", string(data), err)
		}

		u.CustomerBenefitGrantDiscordUpdate = customerBenefitGrantDiscordUpdate
		u.Type = CustomerBenefitGrantUpdateTypeDiscord
		return nil
	case "downloadables":
		customerBenefitGrantDownloadablesUpdate := new(CustomerBenefitGrantDownloadablesUpdate)
		if err := utils.UnmarshalJSON(data, &customerBenefitGrantDownloadablesUpdate, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (BenefitType == downloadables) type CustomerBenefitGrantDownloadablesUpdate within CustomerBenefitGrantUpdate: %w", string(data), err)
		}

		u.CustomerBenefitGrantDownloadablesUpdate = customerBenefitGrantDownloadablesUpdate
		u.Type = CustomerBenefitGrantUpdateTypeDownloadables
		return nil
	case "github_repository":
		customerBenefitGrantGitHubRepositoryUpdate := new(CustomerBenefitGrantGitHubRepositoryUpdate)
		if err := utils.UnmarshalJSON(data, &customerBenefitGrantGitHubRepositoryUpdate, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (BenefitType == github_repository) type CustomerBenefitGrantGitHubRepositoryUpdate within CustomerBenefitGrantUpdate: %w", string(data), err)
		}

		u.CustomerBenefitGrantGitHubRepositoryUpdate = customerBenefitGrantGitHubRepositoryUpdate
		u.Type = CustomerBenefitGrantUpdateTypeGithubRepository
		return nil
	case "license_keys":
		customerBenefitGrantLicenseKeysUpdate := new(CustomerBenefitGrantLicenseKeysUpdate)
		if err := utils.UnmarshalJSON(data, &customerBenefitGrantLicenseKeysUpdate, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (BenefitType == license_keys) type CustomerBenefitGrantLicenseKeysUpdate within CustomerBenefitGrantUpdate: %w", string(data), err)
		}

		u.CustomerBenefitGrantLicenseKeysUpdate = customerBenefitGrantLicenseKeysUpdate
		u.Type = CustomerBenefitGrantUpdateTypeLicenseKeys
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomerBenefitGrantUpdate", string(data))
}

func (u CustomerBenefitGrantUpdate) MarshalJSON() ([]byte, error) {
	if u.CustomerBenefitGrantDiscordUpdate != nil {
		return utils.MarshalJSON(u.CustomerBenefitGrantDiscordUpdate, "", true)
	}

	if u.CustomerBenefitGrantGitHubRepositoryUpdate != nil {
		return utils.MarshalJSON(u.CustomerBenefitGrantGitHubRepositoryUpdate, "", true)
	}

	if u.CustomerBenefitGrantDownloadablesUpdate != nil {
		return utils.MarshalJSON(u.CustomerBenefitGrantDownloadablesUpdate, "", true)
	}

	if u.CustomerBenefitGrantLicenseKeysUpdate != nil {
		return utils.MarshalJSON(u.CustomerBenefitGrantLicenseKeysUpdate, "", true)
	}

	if u.CustomerBenefitGrantAdsUpdate != nil {
		return utils.MarshalJSON(u.CustomerBenefitGrantAdsUpdate, "", true)
	}

	if u.CustomerBenefitGrantCustomUpdate != nil {
		return utils.MarshalJSON(u.CustomerBenefitGrantCustomUpdate, "", true)
	}

	return nil, errors.New("could not marshal union type CustomerBenefitGrantUpdate: all fields are null")
}
