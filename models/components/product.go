// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
	"time"
)

type ProductMetadataType string

const (
	ProductMetadataTypeStr     ProductMetadataType = "str"
	ProductMetadataTypeInteger ProductMetadataType = "integer"
	ProductMetadataTypeBoolean ProductMetadataType = "boolean"
)

type ProductMetadata struct {
	Str     *string `queryParam:"inline"`
	Integer *int64  `queryParam:"inline"`
	Boolean *bool   `queryParam:"inline"`

	Type ProductMetadataType
}

func CreateProductMetadataStr(str string) ProductMetadata {
	typ := ProductMetadataTypeStr

	return ProductMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateProductMetadataInteger(integer int64) ProductMetadata {
	typ := ProductMetadataTypeInteger

	return ProductMetadata{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateProductMetadataBoolean(boolean bool) ProductMetadata {
	typ := ProductMetadataTypeBoolean

	return ProductMetadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *ProductMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ProductMetadataTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = ProductMetadataTypeInteger
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = ProductMetadataTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ProductMetadata", string(data))
}

func (u ProductMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type ProductMetadata: all fields are null")
}

// Product - A product.
type Product struct {
	// Creation timestamp of the object.
	CreatedAt time.Time `json:"created_at"`
	// Last modification timestamp of the object.
	ModifiedAt *time.Time `json:"modified_at"`
	// The ID of the product.
	ID string `json:"id"`
	// The name of the product.
	Name string `json:"name"`
	// The description of the product.
	Description *string `json:"description"`
	// Whether the product is a subscription tier.
	IsRecurring bool `json:"is_recurring"`
	// Whether the product is archived and no longer available.
	IsArchived bool `json:"is_archived"`
	// The ID of the organization owning the product.
	OrganizationID string                     `json:"organization_id"`
	Metadata       map[string]ProductMetadata `json:"metadata"`
	// List of prices for this product.
	Prices []ProductPrice `json:"prices"`
	// List of benefits granted by the product.
	Benefits []Benefit `json:"benefits"`
	// List of medias associated to the product.
	Medias []ProductMediaFileRead `json:"medias"`
	// List of custom fields attached to the product.
	AttachedCustomFields []AttachedCustomField `json:"attached_custom_fields"`
}

func (p Product) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Product) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Product) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *Product) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *Product) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Product) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Product) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Product) GetIsRecurring() bool {
	if o == nil {
		return false
	}
	return o.IsRecurring
}

func (o *Product) GetIsArchived() bool {
	if o == nil {
		return false
	}
	return o.IsArchived
}

func (o *Product) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *Product) GetMetadata() map[string]ProductMetadata {
	if o == nil {
		return map[string]ProductMetadata{}
	}
	return o.Metadata
}

func (o *Product) GetPrices() []ProductPrice {
	if o == nil {
		return []ProductPrice{}
	}
	return o.Prices
}

func (o *Product) GetBenefits() []Benefit {
	if o == nil {
		return []Benefit{}
	}
	return o.Benefits
}

func (o *Product) GetMedias() []ProductMediaFileRead {
	if o == nil {
		return []ProductMediaFileRead{}
	}
	return o.Medias
}

func (o *Product) GetAttachedCustomFields() []AttachedCustomField {
	if o == nil {
		return []AttachedCustomField{}
	}
	return o.AttachedCustomFields
}
