// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
	"time"
)

type DiscountFixedRepeatDurationCreateMetadataType string

const (
	DiscountFixedRepeatDurationCreateMetadataTypeStr     DiscountFixedRepeatDurationCreateMetadataType = "str"
	DiscountFixedRepeatDurationCreateMetadataTypeInteger DiscountFixedRepeatDurationCreateMetadataType = "integer"
	DiscountFixedRepeatDurationCreateMetadataTypeBoolean DiscountFixedRepeatDurationCreateMetadataType = "boolean"
)

type DiscountFixedRepeatDurationCreateMetadata struct {
	Str     *string `queryParam:"inline"`
	Integer *int64  `queryParam:"inline"`
	Boolean *bool   `queryParam:"inline"`

	Type DiscountFixedRepeatDurationCreateMetadataType
}

func CreateDiscountFixedRepeatDurationCreateMetadataStr(str string) DiscountFixedRepeatDurationCreateMetadata {
	typ := DiscountFixedRepeatDurationCreateMetadataTypeStr

	return DiscountFixedRepeatDurationCreateMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateDiscountFixedRepeatDurationCreateMetadataInteger(integer int64) DiscountFixedRepeatDurationCreateMetadata {
	typ := DiscountFixedRepeatDurationCreateMetadataTypeInteger

	return DiscountFixedRepeatDurationCreateMetadata{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateDiscountFixedRepeatDurationCreateMetadataBoolean(boolean bool) DiscountFixedRepeatDurationCreateMetadata {
	typ := DiscountFixedRepeatDurationCreateMetadataTypeBoolean

	return DiscountFixedRepeatDurationCreateMetadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *DiscountFixedRepeatDurationCreateMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = DiscountFixedRepeatDurationCreateMetadataTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = DiscountFixedRepeatDurationCreateMetadataTypeInteger
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = DiscountFixedRepeatDurationCreateMetadataTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DiscountFixedRepeatDurationCreateMetadata", string(data))
}

func (u DiscountFixedRepeatDurationCreateMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type DiscountFixedRepeatDurationCreateMetadata: all fields are null")
}

// DiscountFixedRepeatDurationCreate - Schema to create a fixed amount discount that is applied on every invoice
// for a certain number of months.
type DiscountFixedRepeatDurationCreate struct {
	Duration DiscountDuration `json:"duration"`
	// Number of months the discount should be applied.
	//
	// For this to work on yearly pricing, you should multiply this by 12.
	// For example, to apply the discount for 2 years, set this to 24.
	DurationInMonths int64        `json:"duration_in_months"`
	Type             DiscountType `json:"type"`
	// Fixed amount to discount from the invoice total.
	Amount int64 `json:"amount"`
	// The currency. Currently, only `usd` is supported.
	Currency *string `default:"usd" json:"currency"`
	// Key-value object allowing you to store additional information.
	//
	// The key must be a string with a maximum length of **40 characters**.
	// The value must be either:
	//
	// * A string with a maximum length of **500 characters**
	// * An integer
	// * A boolean
	//
	// You can store up to **50 key-value pairs**.
	Metadata map[string]DiscountFixedRepeatDurationCreateMetadata `json:"metadata,omitempty"`
	// Name of the discount. Will be displayed to the customer when the discount is applied.
	Name string `json:"name"`
	// Code customers can use to apply the discount during checkout. Must be between 3 and 256 characters long and contain only alphanumeric characters.If not provided, the discount can only be applied via the API.
	Code *string `json:"code,omitempty"`
	// Optional timestamp after which the discount is redeemable.
	StartsAt *time.Time `json:"starts_at,omitempty"`
	// Optional timestamp after which the discount is no longer redeemable.
	EndsAt *time.Time `json:"ends_at,omitempty"`
	// Optional maximum number of times the discount can be redeemed.
	MaxRedemptions *int64   `json:"max_redemptions,omitempty"`
	Products       []string `json:"products,omitempty"`
	// The ID of the organization owning the discount. **Required unless you use an organization token.**
	OrganizationID *string `json:"organization_id,omitempty"`
}

func (d DiscountFixedRepeatDurationCreate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DiscountFixedRepeatDurationCreate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DiscountFixedRepeatDurationCreate) GetDuration() DiscountDuration {
	if o == nil {
		return DiscountDuration("")
	}
	return o.Duration
}

func (o *DiscountFixedRepeatDurationCreate) GetDurationInMonths() int64 {
	if o == nil {
		return 0
	}
	return o.DurationInMonths
}

func (o *DiscountFixedRepeatDurationCreate) GetType() DiscountType {
	if o == nil {
		return DiscountType("")
	}
	return o.Type
}

func (o *DiscountFixedRepeatDurationCreate) GetAmount() int64 {
	if o == nil {
		return 0
	}
	return o.Amount
}

func (o *DiscountFixedRepeatDurationCreate) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *DiscountFixedRepeatDurationCreate) GetMetadata() map[string]DiscountFixedRepeatDurationCreateMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *DiscountFixedRepeatDurationCreate) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DiscountFixedRepeatDurationCreate) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *DiscountFixedRepeatDurationCreate) GetStartsAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartsAt
}

func (o *DiscountFixedRepeatDurationCreate) GetEndsAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndsAt
}

func (o *DiscountFixedRepeatDurationCreate) GetMaxRedemptions() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxRedemptions
}

func (o *DiscountFixedRepeatDurationCreate) GetProducts() []string {
	if o == nil {
		return nil
	}
	return o.Products
}

func (o *DiscountFixedRepeatDurationCreate) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}
