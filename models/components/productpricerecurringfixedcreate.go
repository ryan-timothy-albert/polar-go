// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/polarsource/polar-go/internal/utils"
)

// ProductPriceRecurringFixedCreate - Schema to create a recurring product price, i.e. a subscription.
type ProductPriceRecurringFixedCreate struct {
	type_      string `const:"recurring" json:"type"`
	amountType string `const:"fixed" json:"amount_type"`
	// The price in cents.
	PriceAmount int64 `json:"price_amount"`
	// The currency. Currently, only `usd` is supported.
	PriceCurrency     *string                       `default:"usd" json:"price_currency"`
	RecurringInterval SubscriptionRecurringInterval `json:"recurring_interval"`
}

func (p ProductPriceRecurringFixedCreate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProductPriceRecurringFixedCreate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ProductPriceRecurringFixedCreate) GetType() string {
	return "recurring"
}

func (o *ProductPriceRecurringFixedCreate) GetAmountType() string {
	return "fixed"
}

func (o *ProductPriceRecurringFixedCreate) GetPriceAmount() int64 {
	if o == nil {
		return 0
	}
	return o.PriceAmount
}

func (o *ProductPriceRecurringFixedCreate) GetPriceCurrency() *string {
	if o == nil {
		return nil
	}
	return o.PriceCurrency
}

func (o *ProductPriceRecurringFixedCreate) GetRecurringInterval() SubscriptionRecurringInterval {
	if o == nil {
		return SubscriptionRecurringInterval("")
	}
	return o.RecurringInterval
}
