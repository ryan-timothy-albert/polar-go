// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"polar/internal/utils"
)

type CheckoutLinkUpdateMetadataType string

const (
	CheckoutLinkUpdateMetadataTypeStr     CheckoutLinkUpdateMetadataType = "str"
	CheckoutLinkUpdateMetadataTypeInteger CheckoutLinkUpdateMetadataType = "integer"
	CheckoutLinkUpdateMetadataTypeBoolean CheckoutLinkUpdateMetadataType = "boolean"
)

type CheckoutLinkUpdateMetadata struct {
	Str     *string `queryParam:"inline"`
	Integer *int64  `queryParam:"inline"`
	Boolean *bool   `queryParam:"inline"`

	Type CheckoutLinkUpdateMetadataType
}

func CreateCheckoutLinkUpdateMetadataStr(str string) CheckoutLinkUpdateMetadata {
	typ := CheckoutLinkUpdateMetadataTypeStr

	return CheckoutLinkUpdateMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateCheckoutLinkUpdateMetadataInteger(integer int64) CheckoutLinkUpdateMetadata {
	typ := CheckoutLinkUpdateMetadataTypeInteger

	return CheckoutLinkUpdateMetadata{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCheckoutLinkUpdateMetadataBoolean(boolean bool) CheckoutLinkUpdateMetadata {
	typ := CheckoutLinkUpdateMetadataTypeBoolean

	return CheckoutLinkUpdateMetadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CheckoutLinkUpdateMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CheckoutLinkUpdateMetadataTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = CheckoutLinkUpdateMetadataTypeInteger
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = CheckoutLinkUpdateMetadataTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CheckoutLinkUpdateMetadata", string(data))
}

func (u CheckoutLinkUpdateMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type CheckoutLinkUpdateMetadata: all fields are null")
}

// CheckoutLinkUpdate - Schema to update an existing checkout link.
type CheckoutLinkUpdate struct {
	Metadata map[string]CheckoutLinkUpdateMetadata `json:"metadata,omitempty"`
	Label    *string                               `json:"label,omitempty"`
	// Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
	AllowDiscountCodes *bool   `json:"allow_discount_codes,omitempty"`
	ProductPriceID     *string `json:"product_price_id,omitempty"`
	// ID of the discount to apply to the checkout. If the discount is not applicable anymore when opening the checkout link, it'll be ignored.
	DiscountID *string `json:"discount_id,omitempty"`
	// URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id.
	SuccessURL *string `json:"success_url,omitempty"`
}

func (o *CheckoutLinkUpdate) GetMetadata() map[string]CheckoutLinkUpdateMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CheckoutLinkUpdate) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *CheckoutLinkUpdate) GetAllowDiscountCodes() *bool {
	if o == nil {
		return nil
	}
	return o.AllowDiscountCodes
}

func (o *CheckoutLinkUpdate) GetProductPriceID() *string {
	if o == nil {
		return nil
	}
	return o.ProductPriceID
}

func (o *CheckoutLinkUpdate) GetDiscountID() *string {
	if o == nil {
		return nil
	}
	return o.DiscountID
}

func (o *CheckoutLinkUpdate) GetSuccessURL() *string {
	if o == nil {
		return nil
	}
	return o.SuccessURL
}
