// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"polar/internal/utils"
)

type CustomerBenefitGrantType string

const (
	CustomerBenefitGrantTypeCustomerBenefitGrantDiscord          CustomerBenefitGrantType = "CustomerBenefitGrantDiscord"
	CustomerBenefitGrantTypeCustomerBenefitGrantGitHubRepository CustomerBenefitGrantType = "CustomerBenefitGrantGitHubRepository"
	CustomerBenefitGrantTypeCustomerBenefitGrantDownloadables    CustomerBenefitGrantType = "CustomerBenefitGrantDownloadables"
	CustomerBenefitGrantTypeCustomerBenefitGrantLicenseKeys      CustomerBenefitGrantType = "CustomerBenefitGrantLicenseKeys"
	CustomerBenefitGrantTypeCustomerBenefitGrantAds              CustomerBenefitGrantType = "CustomerBenefitGrantAds"
	CustomerBenefitGrantTypeCustomerBenefitGrantCustom           CustomerBenefitGrantType = "CustomerBenefitGrantCustom"
)

type CustomerBenefitGrant struct {
	CustomerBenefitGrantDiscord          *CustomerBenefitGrantDiscord          `queryParam:"inline"`
	CustomerBenefitGrantGitHubRepository *CustomerBenefitGrantGitHubRepository `queryParam:"inline"`
	CustomerBenefitGrantDownloadables    *CustomerBenefitGrantDownloadables    `queryParam:"inline"`
	CustomerBenefitGrantLicenseKeys      *CustomerBenefitGrantLicenseKeys      `queryParam:"inline"`
	CustomerBenefitGrantAds              *CustomerBenefitGrantAds              `queryParam:"inline"`
	CustomerBenefitGrantCustom           *CustomerBenefitGrantCustom           `queryParam:"inline"`

	Type CustomerBenefitGrantType
}

func CreateCustomerBenefitGrantCustomerBenefitGrantDiscord(customerBenefitGrantDiscord CustomerBenefitGrantDiscord) CustomerBenefitGrant {
	typ := CustomerBenefitGrantTypeCustomerBenefitGrantDiscord

	return CustomerBenefitGrant{
		CustomerBenefitGrantDiscord: &customerBenefitGrantDiscord,
		Type:                        typ,
	}
}

func CreateCustomerBenefitGrantCustomerBenefitGrantGitHubRepository(customerBenefitGrantGitHubRepository CustomerBenefitGrantGitHubRepository) CustomerBenefitGrant {
	typ := CustomerBenefitGrantTypeCustomerBenefitGrantGitHubRepository

	return CustomerBenefitGrant{
		CustomerBenefitGrantGitHubRepository: &customerBenefitGrantGitHubRepository,
		Type:                                 typ,
	}
}

func CreateCustomerBenefitGrantCustomerBenefitGrantDownloadables(customerBenefitGrantDownloadables CustomerBenefitGrantDownloadables) CustomerBenefitGrant {
	typ := CustomerBenefitGrantTypeCustomerBenefitGrantDownloadables

	return CustomerBenefitGrant{
		CustomerBenefitGrantDownloadables: &customerBenefitGrantDownloadables,
		Type:                              typ,
	}
}

func CreateCustomerBenefitGrantCustomerBenefitGrantLicenseKeys(customerBenefitGrantLicenseKeys CustomerBenefitGrantLicenseKeys) CustomerBenefitGrant {
	typ := CustomerBenefitGrantTypeCustomerBenefitGrantLicenseKeys

	return CustomerBenefitGrant{
		CustomerBenefitGrantLicenseKeys: &customerBenefitGrantLicenseKeys,
		Type:                            typ,
	}
}

func CreateCustomerBenefitGrantCustomerBenefitGrantAds(customerBenefitGrantAds CustomerBenefitGrantAds) CustomerBenefitGrant {
	typ := CustomerBenefitGrantTypeCustomerBenefitGrantAds

	return CustomerBenefitGrant{
		CustomerBenefitGrantAds: &customerBenefitGrantAds,
		Type:                    typ,
	}
}

func CreateCustomerBenefitGrantCustomerBenefitGrantCustom(customerBenefitGrantCustom CustomerBenefitGrantCustom) CustomerBenefitGrant {
	typ := CustomerBenefitGrantTypeCustomerBenefitGrantCustom

	return CustomerBenefitGrant{
		CustomerBenefitGrantCustom: &customerBenefitGrantCustom,
		Type:                       typ,
	}
}

func (u *CustomerBenefitGrant) UnmarshalJSON(data []byte) error {

	var customerBenefitGrantDiscord CustomerBenefitGrantDiscord = CustomerBenefitGrantDiscord{}
	if err := utils.UnmarshalJSON(data, &customerBenefitGrantDiscord, "", true, true); err == nil {
		u.CustomerBenefitGrantDiscord = &customerBenefitGrantDiscord
		u.Type = CustomerBenefitGrantTypeCustomerBenefitGrantDiscord
		return nil
	}

	var customerBenefitGrantGitHubRepository CustomerBenefitGrantGitHubRepository = CustomerBenefitGrantGitHubRepository{}
	if err := utils.UnmarshalJSON(data, &customerBenefitGrantGitHubRepository, "", true, true); err == nil {
		u.CustomerBenefitGrantGitHubRepository = &customerBenefitGrantGitHubRepository
		u.Type = CustomerBenefitGrantTypeCustomerBenefitGrantGitHubRepository
		return nil
	}

	var customerBenefitGrantDownloadables CustomerBenefitGrantDownloadables = CustomerBenefitGrantDownloadables{}
	if err := utils.UnmarshalJSON(data, &customerBenefitGrantDownloadables, "", true, true); err == nil {
		u.CustomerBenefitGrantDownloadables = &customerBenefitGrantDownloadables
		u.Type = CustomerBenefitGrantTypeCustomerBenefitGrantDownloadables
		return nil
	}

	var customerBenefitGrantLicenseKeys CustomerBenefitGrantLicenseKeys = CustomerBenefitGrantLicenseKeys{}
	if err := utils.UnmarshalJSON(data, &customerBenefitGrantLicenseKeys, "", true, true); err == nil {
		u.CustomerBenefitGrantLicenseKeys = &customerBenefitGrantLicenseKeys
		u.Type = CustomerBenefitGrantTypeCustomerBenefitGrantLicenseKeys
		return nil
	}

	var customerBenefitGrantAds CustomerBenefitGrantAds = CustomerBenefitGrantAds{}
	if err := utils.UnmarshalJSON(data, &customerBenefitGrantAds, "", true, true); err == nil {
		u.CustomerBenefitGrantAds = &customerBenefitGrantAds
		u.Type = CustomerBenefitGrantTypeCustomerBenefitGrantAds
		return nil
	}

	var customerBenefitGrantCustom CustomerBenefitGrantCustom = CustomerBenefitGrantCustom{}
	if err := utils.UnmarshalJSON(data, &customerBenefitGrantCustom, "", true, true); err == nil {
		u.CustomerBenefitGrantCustom = &customerBenefitGrantCustom
		u.Type = CustomerBenefitGrantTypeCustomerBenefitGrantCustom
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomerBenefitGrant", string(data))
}

func (u CustomerBenefitGrant) MarshalJSON() ([]byte, error) {
	if u.CustomerBenefitGrantDiscord != nil {
		return utils.MarshalJSON(u.CustomerBenefitGrantDiscord, "", true)
	}

	if u.CustomerBenefitGrantGitHubRepository != nil {
		return utils.MarshalJSON(u.CustomerBenefitGrantGitHubRepository, "", true)
	}

	if u.CustomerBenefitGrantDownloadables != nil {
		return utils.MarshalJSON(u.CustomerBenefitGrantDownloadables, "", true)
	}

	if u.CustomerBenefitGrantLicenseKeys != nil {
		return utils.MarshalJSON(u.CustomerBenefitGrantLicenseKeys, "", true)
	}

	if u.CustomerBenefitGrantAds != nil {
		return utils.MarshalJSON(u.CustomerBenefitGrantAds, "", true)
	}

	if u.CustomerBenefitGrantCustom != nil {
		return utils.MarshalJSON(u.CustomerBenefitGrantCustom, "", true)
	}

	return nil, errors.New("could not marshal union type CustomerBenefitGrant: all fields are null")
}
