// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
	"time"
)

type OrderMetadataType string

const (
	OrderMetadataTypeStr     OrderMetadataType = "str"
	OrderMetadataTypeInteger OrderMetadataType = "integer"
	OrderMetadataTypeBoolean OrderMetadataType = "boolean"
)

type OrderMetadata struct {
	Str     *string `queryParam:"inline"`
	Integer *int64  `queryParam:"inline"`
	Boolean *bool   `queryParam:"inline"`

	Type OrderMetadataType
}

func CreateOrderMetadataStr(str string) OrderMetadata {
	typ := OrderMetadataTypeStr

	return OrderMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateOrderMetadataInteger(integer int64) OrderMetadata {
	typ := OrderMetadataTypeInteger

	return OrderMetadata{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateOrderMetadataBoolean(boolean bool) OrderMetadata {
	typ := OrderMetadataTypeBoolean

	return OrderMetadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *OrderMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = OrderMetadataTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = OrderMetadataTypeInteger
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = OrderMetadataTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OrderMetadata", string(data))
}

func (u OrderMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type OrderMetadata: all fields are null")
}

// OrderCustomFieldData - Key-value object storing custom field values.
type OrderCustomFieldData struct {
}

type OrderDiscountType string

const (
	OrderDiscountTypeDiscountFixedOnceForeverDurationBase      OrderDiscountType = "DiscountFixedOnceForeverDurationBase"
	OrderDiscountTypeDiscountFixedRepeatDurationBase           OrderDiscountType = "DiscountFixedRepeatDurationBase"
	OrderDiscountTypeDiscountPercentageOnceForeverDurationBase OrderDiscountType = "DiscountPercentageOnceForeverDurationBase"
	OrderDiscountTypeDiscountPercentageRepeatDurationBase      OrderDiscountType = "DiscountPercentageRepeatDurationBase"
)

type OrderDiscount struct {
	DiscountFixedOnceForeverDurationBase      *DiscountFixedOnceForeverDurationBase      `queryParam:"inline"`
	DiscountFixedRepeatDurationBase           *DiscountFixedRepeatDurationBase           `queryParam:"inline"`
	DiscountPercentageOnceForeverDurationBase *DiscountPercentageOnceForeverDurationBase `queryParam:"inline"`
	DiscountPercentageRepeatDurationBase      *DiscountPercentageRepeatDurationBase      `queryParam:"inline"`

	Type OrderDiscountType
}

func CreateOrderDiscountDiscountFixedOnceForeverDurationBase(discountFixedOnceForeverDurationBase DiscountFixedOnceForeverDurationBase) OrderDiscount {
	typ := OrderDiscountTypeDiscountFixedOnceForeverDurationBase

	return OrderDiscount{
		DiscountFixedOnceForeverDurationBase: &discountFixedOnceForeverDurationBase,
		Type:                                 typ,
	}
}

func CreateOrderDiscountDiscountFixedRepeatDurationBase(discountFixedRepeatDurationBase DiscountFixedRepeatDurationBase) OrderDiscount {
	typ := OrderDiscountTypeDiscountFixedRepeatDurationBase

	return OrderDiscount{
		DiscountFixedRepeatDurationBase: &discountFixedRepeatDurationBase,
		Type:                            typ,
	}
}

func CreateOrderDiscountDiscountPercentageOnceForeverDurationBase(discountPercentageOnceForeverDurationBase DiscountPercentageOnceForeverDurationBase) OrderDiscount {
	typ := OrderDiscountTypeDiscountPercentageOnceForeverDurationBase

	return OrderDiscount{
		DiscountPercentageOnceForeverDurationBase: &discountPercentageOnceForeverDurationBase,
		Type: typ,
	}
}

func CreateOrderDiscountDiscountPercentageRepeatDurationBase(discountPercentageRepeatDurationBase DiscountPercentageRepeatDurationBase) OrderDiscount {
	typ := OrderDiscountTypeDiscountPercentageRepeatDurationBase

	return OrderDiscount{
		DiscountPercentageRepeatDurationBase: &discountPercentageRepeatDurationBase,
		Type:                                 typ,
	}
}

func (u *OrderDiscount) UnmarshalJSON(data []byte) error {

	var discountPercentageOnceForeverDurationBase DiscountPercentageOnceForeverDurationBase = DiscountPercentageOnceForeverDurationBase{}
	if err := utils.UnmarshalJSON(data, &discountPercentageOnceForeverDurationBase, "", true, true); err == nil {
		u.DiscountPercentageOnceForeverDurationBase = &discountPercentageOnceForeverDurationBase
		u.Type = OrderDiscountTypeDiscountPercentageOnceForeverDurationBase
		return nil
	}

	var discountFixedOnceForeverDurationBase DiscountFixedOnceForeverDurationBase = DiscountFixedOnceForeverDurationBase{}
	if err := utils.UnmarshalJSON(data, &discountFixedOnceForeverDurationBase, "", true, true); err == nil {
		u.DiscountFixedOnceForeverDurationBase = &discountFixedOnceForeverDurationBase
		u.Type = OrderDiscountTypeDiscountFixedOnceForeverDurationBase
		return nil
	}

	var discountPercentageRepeatDurationBase DiscountPercentageRepeatDurationBase = DiscountPercentageRepeatDurationBase{}
	if err := utils.UnmarshalJSON(data, &discountPercentageRepeatDurationBase, "", true, true); err == nil {
		u.DiscountPercentageRepeatDurationBase = &discountPercentageRepeatDurationBase
		u.Type = OrderDiscountTypeDiscountPercentageRepeatDurationBase
		return nil
	}

	var discountFixedRepeatDurationBase DiscountFixedRepeatDurationBase = DiscountFixedRepeatDurationBase{}
	if err := utils.UnmarshalJSON(data, &discountFixedRepeatDurationBase, "", true, true); err == nil {
		u.DiscountFixedRepeatDurationBase = &discountFixedRepeatDurationBase
		u.Type = OrderDiscountTypeDiscountFixedRepeatDurationBase
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OrderDiscount", string(data))
}

func (u OrderDiscount) MarshalJSON() ([]byte, error) {
	if u.DiscountFixedOnceForeverDurationBase != nil {
		return utils.MarshalJSON(u.DiscountFixedOnceForeverDurationBase, "", true)
	}

	if u.DiscountFixedRepeatDurationBase != nil {
		return utils.MarshalJSON(u.DiscountFixedRepeatDurationBase, "", true)
	}

	if u.DiscountPercentageOnceForeverDurationBase != nil {
		return utils.MarshalJSON(u.DiscountPercentageOnceForeverDurationBase, "", true)
	}

	if u.DiscountPercentageRepeatDurationBase != nil {
		return utils.MarshalJSON(u.DiscountPercentageRepeatDurationBase, "", true)
	}

	return nil, errors.New("could not marshal union type OrderDiscount: all fields are null")
}

type Order struct {
	// Creation timestamp of the object.
	CreatedAt time.Time `json:"created_at"`
	// Last modification timestamp of the object.
	ModifiedAt *time.Time `json:"modified_at"`
	// The ID of the object.
	ID       string                   `json:"id"`
	Metadata map[string]OrderMetadata `json:"metadata"`
	// Key-value object storing custom field values.
	CustomFieldData *OrderCustomFieldData `json:"custom_field_data,omitempty"`
	Amount          int64                 `json:"amount"`
	TaxAmount       int64                 `json:"tax_amount"`
	Currency        string                `json:"currency"`
	BillingReason   OrderBillingReason    `json:"billing_reason"`
	BillingAddress  *Address              `json:"billing_address"`
	CustomerID      string                `json:"customer_id"`
	ProductID       string                `json:"product_id"`
	ProductPriceID  string                `json:"product_price_id"`
	DiscountID      *string               `json:"discount_id"`
	SubscriptionID  *string               `json:"subscription_id"`
	CheckoutID      *string               `json:"checkout_id"`
	Customer        OrderCustomer         `json:"customer"`
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	UserID       string             `json:"user_id"`
	User         OrderUser          `json:"user"`
	Product      OrderProduct       `json:"product"`
	ProductPrice ProductPrice       `json:"product_price"`
	Discount     *OrderDiscount     `json:"discount"`
	Subscription *OrderSubscription `json:"subscription"`
}

func (o Order) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *Order) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Order) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *Order) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *Order) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Order) GetMetadata() map[string]OrderMetadata {
	if o == nil {
		return map[string]OrderMetadata{}
	}
	return o.Metadata
}

func (o *Order) GetCustomFieldData() *OrderCustomFieldData {
	if o == nil {
		return nil
	}
	return o.CustomFieldData
}

func (o *Order) GetAmount() int64 {
	if o == nil {
		return 0
	}
	return o.Amount
}

func (o *Order) GetTaxAmount() int64 {
	if o == nil {
		return 0
	}
	return o.TaxAmount
}

func (o *Order) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *Order) GetBillingReason() OrderBillingReason {
	if o == nil {
		return OrderBillingReason("")
	}
	return o.BillingReason
}

func (o *Order) GetBillingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *Order) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *Order) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *Order) GetProductPriceID() string {
	if o == nil {
		return ""
	}
	return o.ProductPriceID
}

func (o *Order) GetDiscountID() *string {
	if o == nil {
		return nil
	}
	return o.DiscountID
}

func (o *Order) GetSubscriptionID() *string {
	if o == nil {
		return nil
	}
	return o.SubscriptionID
}

func (o *Order) GetCheckoutID() *string {
	if o == nil {
		return nil
	}
	return o.CheckoutID
}

func (o *Order) GetCustomer() OrderCustomer {
	if o == nil {
		return OrderCustomer{}
	}
	return o.Customer
}

func (o *Order) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *Order) GetUser() OrderUser {
	if o == nil {
		return OrderUser{}
	}
	return o.User
}

func (o *Order) GetProduct() OrderProduct {
	if o == nil {
		return OrderProduct{}
	}
	return o.Product
}

func (o *Order) GetProductPrice() ProductPrice {
	if o == nil {
		return ProductPrice{}
	}
	return o.ProductPrice
}

func (o *Order) GetDiscount() *OrderDiscount {
	if o == nil {
		return nil
	}
	return o.Discount
}

func (o *Order) GetSubscription() *OrderSubscription {
	if o == nil {
		return nil
	}
	return o.Subscription
}
