// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
	"time"
)

type MetadataType string

const (
	MetadataTypeStr     MetadataType = "str"
	MetadataTypeInteger MetadataType = "integer"
	MetadataTypeBoolean MetadataType = "boolean"
)

type Metadata struct {
	Str     *string `queryParam:"inline"`
	Integer *int64  `queryParam:"inline"`
	Boolean *bool   `queryParam:"inline"`

	Type MetadataType
}

func CreateMetadataStr(str string) Metadata {
	typ := MetadataTypeStr

	return Metadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateMetadataInteger(integer int64) Metadata {
	typ := MetadataTypeInteger

	return Metadata{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateMetadataBoolean(boolean bool) Metadata {
	typ := MetadataTypeBoolean

	return Metadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *Metadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = MetadataTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = MetadataTypeInteger
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = MetadataTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Metadata", string(data))
}

func (u Metadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type Metadata: all fields are null")
}

// SubscriptionCustomFieldData - Key-value object storing custom field values.
type SubscriptionCustomFieldData struct {
}

type SubscriptionDiscountType string

const (
	SubscriptionDiscountTypeDiscountFixedOnceForeverDurationBase      SubscriptionDiscountType = "DiscountFixedOnceForeverDurationBase"
	SubscriptionDiscountTypeDiscountFixedRepeatDurationBase           SubscriptionDiscountType = "DiscountFixedRepeatDurationBase"
	SubscriptionDiscountTypeDiscountPercentageOnceForeverDurationBase SubscriptionDiscountType = "DiscountPercentageOnceForeverDurationBase"
	SubscriptionDiscountTypeDiscountPercentageRepeatDurationBase      SubscriptionDiscountType = "DiscountPercentageRepeatDurationBase"
)

type SubscriptionDiscount struct {
	DiscountFixedOnceForeverDurationBase      *DiscountFixedOnceForeverDurationBase      `queryParam:"inline"`
	DiscountFixedRepeatDurationBase           *DiscountFixedRepeatDurationBase           `queryParam:"inline"`
	DiscountPercentageOnceForeverDurationBase *DiscountPercentageOnceForeverDurationBase `queryParam:"inline"`
	DiscountPercentageRepeatDurationBase      *DiscountPercentageRepeatDurationBase      `queryParam:"inline"`

	Type SubscriptionDiscountType
}

func CreateSubscriptionDiscountDiscountFixedOnceForeverDurationBase(discountFixedOnceForeverDurationBase DiscountFixedOnceForeverDurationBase) SubscriptionDiscount {
	typ := SubscriptionDiscountTypeDiscountFixedOnceForeverDurationBase

	return SubscriptionDiscount{
		DiscountFixedOnceForeverDurationBase: &discountFixedOnceForeverDurationBase,
		Type:                                 typ,
	}
}

func CreateSubscriptionDiscountDiscountFixedRepeatDurationBase(discountFixedRepeatDurationBase DiscountFixedRepeatDurationBase) SubscriptionDiscount {
	typ := SubscriptionDiscountTypeDiscountFixedRepeatDurationBase

	return SubscriptionDiscount{
		DiscountFixedRepeatDurationBase: &discountFixedRepeatDurationBase,
		Type:                            typ,
	}
}

func CreateSubscriptionDiscountDiscountPercentageOnceForeverDurationBase(discountPercentageOnceForeverDurationBase DiscountPercentageOnceForeverDurationBase) SubscriptionDiscount {
	typ := SubscriptionDiscountTypeDiscountPercentageOnceForeverDurationBase

	return SubscriptionDiscount{
		DiscountPercentageOnceForeverDurationBase: &discountPercentageOnceForeverDurationBase,
		Type: typ,
	}
}

func CreateSubscriptionDiscountDiscountPercentageRepeatDurationBase(discountPercentageRepeatDurationBase DiscountPercentageRepeatDurationBase) SubscriptionDiscount {
	typ := SubscriptionDiscountTypeDiscountPercentageRepeatDurationBase

	return SubscriptionDiscount{
		DiscountPercentageRepeatDurationBase: &discountPercentageRepeatDurationBase,
		Type:                                 typ,
	}
}

func (u *SubscriptionDiscount) UnmarshalJSON(data []byte) error {

	var discountPercentageOnceForeverDurationBase DiscountPercentageOnceForeverDurationBase = DiscountPercentageOnceForeverDurationBase{}
	if err := utils.UnmarshalJSON(data, &discountPercentageOnceForeverDurationBase, "", true, true); err == nil {
		u.DiscountPercentageOnceForeverDurationBase = &discountPercentageOnceForeverDurationBase
		u.Type = SubscriptionDiscountTypeDiscountPercentageOnceForeverDurationBase
		return nil
	}

	var discountFixedOnceForeverDurationBase DiscountFixedOnceForeverDurationBase = DiscountFixedOnceForeverDurationBase{}
	if err := utils.UnmarshalJSON(data, &discountFixedOnceForeverDurationBase, "", true, true); err == nil {
		u.DiscountFixedOnceForeverDurationBase = &discountFixedOnceForeverDurationBase
		u.Type = SubscriptionDiscountTypeDiscountFixedOnceForeverDurationBase
		return nil
	}

	var discountPercentageRepeatDurationBase DiscountPercentageRepeatDurationBase = DiscountPercentageRepeatDurationBase{}
	if err := utils.UnmarshalJSON(data, &discountPercentageRepeatDurationBase, "", true, true); err == nil {
		u.DiscountPercentageRepeatDurationBase = &discountPercentageRepeatDurationBase
		u.Type = SubscriptionDiscountTypeDiscountPercentageRepeatDurationBase
		return nil
	}

	var discountFixedRepeatDurationBase DiscountFixedRepeatDurationBase = DiscountFixedRepeatDurationBase{}
	if err := utils.UnmarshalJSON(data, &discountFixedRepeatDurationBase, "", true, true); err == nil {
		u.DiscountFixedRepeatDurationBase = &discountFixedRepeatDurationBase
		u.Type = SubscriptionDiscountTypeDiscountFixedRepeatDurationBase
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SubscriptionDiscount", string(data))
}

func (u SubscriptionDiscount) MarshalJSON() ([]byte, error) {
	if u.DiscountFixedOnceForeverDurationBase != nil {
		return utils.MarshalJSON(u.DiscountFixedOnceForeverDurationBase, "", true)
	}

	if u.DiscountFixedRepeatDurationBase != nil {
		return utils.MarshalJSON(u.DiscountFixedRepeatDurationBase, "", true)
	}

	if u.DiscountPercentageOnceForeverDurationBase != nil {
		return utils.MarshalJSON(u.DiscountPercentageOnceForeverDurationBase, "", true)
	}

	if u.DiscountPercentageRepeatDurationBase != nil {
		return utils.MarshalJSON(u.DiscountPercentageRepeatDurationBase, "", true)
	}

	return nil, errors.New("could not marshal union type SubscriptionDiscount: all fields are null")
}

type Subscription struct {
	// Creation timestamp of the object.
	CreatedAt time.Time `json:"created_at"`
	// Last modification timestamp of the object.
	ModifiedAt *time.Time `json:"modified_at"`
	// The ID of the object.
	ID                 string                        `json:"id"`
	Amount             *int64                        `json:"amount"`
	Currency           *string                       `json:"currency"`
	RecurringInterval  SubscriptionRecurringInterval `json:"recurring_interval"`
	Status             SubscriptionStatus            `json:"status"`
	CurrentPeriodStart time.Time                     `json:"current_period_start"`
	CurrentPeriodEnd   *time.Time                    `json:"current_period_end"`
	CancelAtPeriodEnd  bool                          `json:"cancel_at_period_end"`
	StartedAt          *time.Time                    `json:"started_at"`
	EndedAt            *time.Time                    `json:"ended_at"`
	CustomerID         string                        `json:"customer_id"`
	ProductID          string                        `json:"product_id"`
	PriceID            string                        `json:"price_id"`
	DiscountID         *string                       `json:"discount_id"`
	CheckoutID         *string                       `json:"checkout_id"`
	Metadata           map[string]Metadata           `json:"metadata"`
	// Key-value object storing custom field values.
	CustomFieldData *SubscriptionCustomFieldData `json:"custom_field_data,omitempty"`
	Customer        SubscriptionCustomer         `json:"customer"`
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	UserID string           `json:"user_id"`
	User   SubscriptionUser `json:"user"`
	// A product.
	Product  Product               `json:"product"`
	Price    ProductPriceRecurring `json:"price"`
	Discount *SubscriptionDiscount `json:"discount"`
}

func (s Subscription) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *Subscription) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Subscription) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *Subscription) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *Subscription) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Subscription) GetAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *Subscription) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *Subscription) GetRecurringInterval() SubscriptionRecurringInterval {
	if o == nil {
		return SubscriptionRecurringInterval("")
	}
	return o.RecurringInterval
}

func (o *Subscription) GetStatus() SubscriptionStatus {
	if o == nil {
		return SubscriptionStatus("")
	}
	return o.Status
}

func (o *Subscription) GetCurrentPeriodStart() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CurrentPeriodStart
}

func (o *Subscription) GetCurrentPeriodEnd() *time.Time {
	if o == nil {
		return nil
	}
	return o.CurrentPeriodEnd
}

func (o *Subscription) GetCancelAtPeriodEnd() bool {
	if o == nil {
		return false
	}
	return o.CancelAtPeriodEnd
}

func (o *Subscription) GetStartedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartedAt
}

func (o *Subscription) GetEndedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndedAt
}

func (o *Subscription) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *Subscription) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *Subscription) GetPriceID() string {
	if o == nil {
		return ""
	}
	return o.PriceID
}

func (o *Subscription) GetDiscountID() *string {
	if o == nil {
		return nil
	}
	return o.DiscountID
}

func (o *Subscription) GetCheckoutID() *string {
	if o == nil {
		return nil
	}
	return o.CheckoutID
}

func (o *Subscription) GetMetadata() map[string]Metadata {
	if o == nil {
		return map[string]Metadata{}
	}
	return o.Metadata
}

func (o *Subscription) GetCustomFieldData() *SubscriptionCustomFieldData {
	if o == nil {
		return nil
	}
	return o.CustomFieldData
}

func (o *Subscription) GetCustomer() SubscriptionCustomer {
	if o == nil {
		return SubscriptionCustomer{}
	}
	return o.Customer
}

func (o *Subscription) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *Subscription) GetUser() SubscriptionUser {
	if o == nil {
		return SubscriptionUser{}
	}
	return o.User
}

func (o *Subscription) GetProduct() Product {
	if o == nil {
		return Product{}
	}
	return o.Product
}

func (o *Subscription) GetPrice() ProductPriceRecurring {
	if o == nil {
		return ProductPriceRecurring{}
	}
	return o.Price
}

func (o *Subscription) GetDiscount() *SubscriptionDiscount {
	if o == nil {
		return nil
	}
	return o.Discount
}
