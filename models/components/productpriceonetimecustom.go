// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
	"time"
)

type ProductPriceOneTimeCustomAmountType string

const (
	ProductPriceOneTimeCustomAmountTypeCustom ProductPriceOneTimeCustomAmountType = "custom"
)

func (e ProductPriceOneTimeCustomAmountType) ToPointer() *ProductPriceOneTimeCustomAmountType {
	return &e
}
func (e *ProductPriceOneTimeCustomAmountType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom":
		*e = ProductPriceOneTimeCustomAmountType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductPriceOneTimeCustomAmountType: %v", v)
	}
}

// ProductPriceOneTimeCustomType - The type of the price.
type ProductPriceOneTimeCustomType string

const (
	ProductPriceOneTimeCustomTypeOneTime ProductPriceOneTimeCustomType = "one_time"
)

func (e ProductPriceOneTimeCustomType) ToPointer() *ProductPriceOneTimeCustomType {
	return &e
}
func (e *ProductPriceOneTimeCustomType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "one_time":
		*e = ProductPriceOneTimeCustomType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductPriceOneTimeCustomType: %v", v)
	}
}

// ProductPriceOneTimeCustom - A pay-what-you-want price for a one-time product.
type ProductPriceOneTimeCustom struct {
	// Creation timestamp of the object.
	CreatedAt time.Time `json:"created_at"`
	// Last modification timestamp of the object.
	ModifiedAt *time.Time `json:"modified_at"`
	// The ID of the price.
	ID         string                              `json:"id"`
	amountType ProductPriceOneTimeCustomAmountType `const:"custom" json:"amount_type"`
	// Whether the price is archived and no longer available.
	IsArchived bool `json:"is_archived"`
	// The ID of the product owning the price.
	ProductID string `json:"product_id"`
	// The currency.
	PriceCurrency string `json:"price_currency"`
	// The minimum amount the customer can pay.
	MinimumAmount *int64 `json:"minimum_amount"`
	// The maximum amount the customer can pay.
	MaximumAmount *int64 `json:"maximum_amount"`
	// The initial amount shown to the customer.
	PresetAmount *int64 `json:"preset_amount"`
	// The type of the price.
	type_ ProductPriceOneTimeCustomType `const:"one_time" json:"type"`
}

func (p ProductPriceOneTimeCustom) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProductPriceOneTimeCustom) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ProductPriceOneTimeCustom) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ProductPriceOneTimeCustom) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *ProductPriceOneTimeCustom) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ProductPriceOneTimeCustom) GetAmountType() ProductPriceOneTimeCustomAmountType {
	return ProductPriceOneTimeCustomAmountTypeCustom
}

func (o *ProductPriceOneTimeCustom) GetIsArchived() bool {
	if o == nil {
		return false
	}
	return o.IsArchived
}

func (o *ProductPriceOneTimeCustom) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *ProductPriceOneTimeCustom) GetPriceCurrency() string {
	if o == nil {
		return ""
	}
	return o.PriceCurrency
}

func (o *ProductPriceOneTimeCustom) GetMinimumAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.MinimumAmount
}

func (o *ProductPriceOneTimeCustom) GetMaximumAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.MaximumAmount
}

func (o *ProductPriceOneTimeCustom) GetPresetAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.PresetAmount
}

func (o *ProductPriceOneTimeCustom) GetType() ProductPriceOneTimeCustomType {
	return ProductPriceOneTimeCustomTypeOneTime
}
