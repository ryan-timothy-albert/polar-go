// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/polarsource/polar-go/internal/utils"
	"time"
)

type Issue struct {
	ID       string    `json:"id"`
	Platform Platforms `json:"platform"`
	// GitHub #number
	Number int64 `json:"number"`
	// GitHub issue title
	Title string `json:"title"`
	// GitHub issue body
	Body *string `json:"body,omitempty"`
	// Number of GitHub comments made on the issue
	Comments *int64  `json:"comments,omitempty"`
	Labels   []Label `json:"labels,omitempty"`
	// GitHub author
	Author *Author `json:"author,omitempty"`
	// GitHub assignees
	Assignees []Assignee `json:"assignees,omitempty"`
	// GitHub reactions
	Reactions       *Reactions `json:"reactions,omitempty"`
	State           State      `json:"state"`
	IssueClosedAt   *time.Time `json:"issue_closed_at,omitempty"`
	IssueModifiedAt *time.Time `json:"issue_modified_at,omitempty"`
	IssueCreatedAt  time.Time  `json:"issue_created_at"`
	// If a maintainer needs to mark this issue as solved
	NeedsConfirmationSolved bool `json:"needs_confirmation_solved"`
	// If this issue has been marked as confirmed solved through Polar
	ConfirmedSolvedAt *time.Time `json:"confirmed_solved_at,omitempty"`
	Funding           Funding    `json:"funding"`
	Repository        Repository `json:"repository"`
	// Share of rewrads that will be rewarded to contributors of this issue. A number between 0 and 100 (inclusive).
	UpfrontSplitToContributors *int64 `json:"upfront_split_to_contributors,omitempty"`
	// If this issue currently has the Polar badge SVG embedded
	PledgeBadgeCurrentlyEmbedded bool `json:"pledge_badge_currently_embedded"`
	// Optional custom badge SVG promotional content
	BadgeCustomContent *string `json:"badge_custom_content,omitempty"`
}

func (i Issue) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *Issue) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Issue) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Issue) GetPlatform() Platforms {
	if o == nil {
		return Platforms("")
	}
	return o.Platform
}

func (o *Issue) GetNumber() int64 {
	if o == nil {
		return 0
	}
	return o.Number
}

func (o *Issue) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *Issue) GetBody() *string {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *Issue) GetComments() *int64 {
	if o == nil {
		return nil
	}
	return o.Comments
}

func (o *Issue) GetLabels() []Label {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *Issue) GetAuthor() *Author {
	if o == nil {
		return nil
	}
	return o.Author
}

func (o *Issue) GetAssignees() []Assignee {
	if o == nil {
		return nil
	}
	return o.Assignees
}

func (o *Issue) GetReactions() *Reactions {
	if o == nil {
		return nil
	}
	return o.Reactions
}

func (o *Issue) GetState() State {
	if o == nil {
		return State("")
	}
	return o.State
}

func (o *Issue) GetIssueClosedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.IssueClosedAt
}

func (o *Issue) GetIssueModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.IssueModifiedAt
}

func (o *Issue) GetIssueCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.IssueCreatedAt
}

func (o *Issue) GetNeedsConfirmationSolved() bool {
	if o == nil {
		return false
	}
	return o.NeedsConfirmationSolved
}

func (o *Issue) GetConfirmedSolvedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ConfirmedSolvedAt
}

func (o *Issue) GetFunding() Funding {
	if o == nil {
		return Funding{}
	}
	return o.Funding
}

func (o *Issue) GetRepository() Repository {
	if o == nil {
		return Repository{}
	}
	return o.Repository
}

func (o *Issue) GetUpfrontSplitToContributors() *int64 {
	if o == nil {
		return nil
	}
	return o.UpfrontSplitToContributors
}

func (o *Issue) GetPledgeBadgeCurrentlyEmbedded() bool {
	if o == nil {
		return false
	}
	return o.PledgeBadgeCurrentlyEmbedded
}

func (o *Issue) GetBadgeCustomContent() *string {
	if o == nil {
		return nil
	}
	return o.BadgeCustomContent
}
