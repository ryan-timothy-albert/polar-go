// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/polarsource/polar-go/internal/utils"
)

type AuthorizeResponseUser struct {
	Client  OAuth2ClientPublic `json:"client"`
	subType string             `const:"user" json:"sub_type"`
	Sub     *AuthorizeUser     `json:"sub"`
	Scopes  []Scope            `json:"scopes"`
}

func (a AuthorizeResponseUser) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AuthorizeResponseUser) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AuthorizeResponseUser) GetClient() OAuth2ClientPublic {
	if o == nil {
		return OAuth2ClientPublic{}
	}
	return o.Client
}

func (o *AuthorizeResponseUser) GetSubType() string {
	return "user"
}

func (o *AuthorizeResponseUser) GetSub() *AuthorizeUser {
	if o == nil {
		return nil
	}
	return o.Sub
}

func (o *AuthorizeResponseUser) GetScopes() []Scope {
	if o == nil {
		return []Scope{}
	}
	return o.Scopes
}
