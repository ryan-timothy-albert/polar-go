// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
	"time"
)

type OrderCustomerMetadataType string

const (
	OrderCustomerMetadataTypeStr     OrderCustomerMetadataType = "str"
	OrderCustomerMetadataTypeInteger OrderCustomerMetadataType = "integer"
	OrderCustomerMetadataTypeBoolean OrderCustomerMetadataType = "boolean"
)

type OrderCustomerMetadata struct {
	Str     *string `queryParam:"inline"`
	Integer *int64  `queryParam:"inline"`
	Boolean *bool   `queryParam:"inline"`

	Type OrderCustomerMetadataType
}

func CreateOrderCustomerMetadataStr(str string) OrderCustomerMetadata {
	typ := OrderCustomerMetadataTypeStr

	return OrderCustomerMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateOrderCustomerMetadataInteger(integer int64) OrderCustomerMetadata {
	typ := OrderCustomerMetadataTypeInteger

	return OrderCustomerMetadata{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateOrderCustomerMetadataBoolean(boolean bool) OrderCustomerMetadata {
	typ := OrderCustomerMetadataTypeBoolean

	return OrderCustomerMetadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *OrderCustomerMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = OrderCustomerMetadataTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = OrderCustomerMetadataTypeInteger
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = OrderCustomerMetadataTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OrderCustomerMetadata", string(data))
}

func (u OrderCustomerMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type OrderCustomerMetadata: all fields are null")
}

type OrderCustomerTaxIDType string

const (
	OrderCustomerTaxIDTypeStr         OrderCustomerTaxIDType = "str"
	OrderCustomerTaxIDTypeTaxIDFormat OrderCustomerTaxIDType = "TaxIDFormat"
)

type OrderCustomerTaxID struct {
	Str         *string      `queryParam:"inline"`
	TaxIDFormat *TaxIDFormat `queryParam:"inline"`

	Type OrderCustomerTaxIDType
}

func CreateOrderCustomerTaxIDStr(str string) OrderCustomerTaxID {
	typ := OrderCustomerTaxIDTypeStr

	return OrderCustomerTaxID{
		Str:  &str,
		Type: typ,
	}
}

func CreateOrderCustomerTaxIDTaxIDFormat(taxIDFormat TaxIDFormat) OrderCustomerTaxID {
	typ := OrderCustomerTaxIDTypeTaxIDFormat

	return OrderCustomerTaxID{
		TaxIDFormat: &taxIDFormat,
		Type:        typ,
	}
}

func (u *OrderCustomerTaxID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = OrderCustomerTaxIDTypeStr
		return nil
	}

	var taxIDFormat TaxIDFormat = TaxIDFormat("")
	if err := utils.UnmarshalJSON(data, &taxIDFormat, "", true, true); err == nil {
		u.TaxIDFormat = &taxIDFormat
		u.Type = OrderCustomerTaxIDTypeTaxIDFormat
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OrderCustomerTaxID", string(data))
}

func (u OrderCustomerTaxID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.TaxIDFormat != nil {
		return utils.MarshalJSON(u.TaxIDFormat, "", true)
	}

	return nil, errors.New("could not marshal union type OrderCustomerTaxID: all fields are null")
}

type OrderCustomer struct {
	// Creation timestamp of the object.
	CreatedAt time.Time `json:"created_at"`
	// Last modification timestamp of the object.
	ModifiedAt *time.Time `json:"modified_at"`
	// The ID of the object.
	ID             string                           `json:"id"`
	Metadata       map[string]OrderCustomerMetadata `json:"metadata"`
	Email          string                           `json:"email"`
	EmailVerified  bool                             `json:"email_verified"`
	Name           *string                          `json:"name"`
	BillingAddress *Address                         `json:"billing_address"`
	TaxID          []OrderCustomerTaxID             `json:"tax_id"`
	OrganizationID string                           `json:"organization_id"`
	AvatarURL      string                           `json:"avatar_url"`
}

func (o OrderCustomer) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OrderCustomer) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OrderCustomer) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *OrderCustomer) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *OrderCustomer) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *OrderCustomer) GetMetadata() map[string]OrderCustomerMetadata {
	if o == nil {
		return map[string]OrderCustomerMetadata{}
	}
	return o.Metadata
}

func (o *OrderCustomer) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *OrderCustomer) GetEmailVerified() bool {
	if o == nil {
		return false
	}
	return o.EmailVerified
}

func (o *OrderCustomer) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *OrderCustomer) GetBillingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *OrderCustomer) GetTaxID() []OrderCustomerTaxID {
	if o == nil {
		return nil
	}
	return o.TaxID
}

func (o *OrderCustomer) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *OrderCustomer) GetAvatarURL() string {
	if o == nil {
		return ""
	}
	return o.AvatarURL
}
