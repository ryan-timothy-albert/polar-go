// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
)

type CustomerCreateTaxIDType string

const (
	CustomerCreateTaxIDTypeStr         CustomerCreateTaxIDType = "str"
	CustomerCreateTaxIDTypeTaxIDFormat CustomerCreateTaxIDType = "TaxIDFormat"
)

type CustomerCreateTaxID struct {
	Str         *string      `queryParam:"inline"`
	TaxIDFormat *TaxIDFormat `queryParam:"inline"`

	Type CustomerCreateTaxIDType
}

func CreateCustomerCreateTaxIDStr(str string) CustomerCreateTaxID {
	typ := CustomerCreateTaxIDTypeStr

	return CustomerCreateTaxID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCustomerCreateTaxIDTaxIDFormat(taxIDFormat TaxIDFormat) CustomerCreateTaxID {
	typ := CustomerCreateTaxIDTypeTaxIDFormat

	return CustomerCreateTaxID{
		TaxIDFormat: &taxIDFormat,
		Type:        typ,
	}
}

func (u *CustomerCreateTaxID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CustomerCreateTaxIDTypeStr
		return nil
	}

	var taxIDFormat TaxIDFormat = TaxIDFormat("")
	if err := utils.UnmarshalJSON(data, &taxIDFormat, "", true, true); err == nil {
		u.TaxIDFormat = &taxIDFormat
		u.Type = CustomerCreateTaxIDTypeTaxIDFormat
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomerCreateTaxID", string(data))
}

func (u CustomerCreateTaxID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.TaxIDFormat != nil {
		return utils.MarshalJSON(u.TaxIDFormat, "", true)
	}

	return nil, errors.New("could not marshal union type CustomerCreateTaxID: all fields are null")
}

type CustomerCreate struct {
	Email          string                `json:"email"`
	Name           *string               `json:"name,omitempty"`
	BillingAddress *Address              `json:"billing_address,omitempty"`
	TaxID          []CustomerCreateTaxID `json:"tax_id,omitempty"`
	// The ID of the organization owning the customer. **Required unless you use an organization token.**
	OrganizationID *string `json:"organization_id,omitempty"`
}

func (o *CustomerCreate) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *CustomerCreate) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CustomerCreate) GetBillingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *CustomerCreate) GetTaxID() []CustomerCreateTaxID {
	if o == nil {
		return nil
	}
	return o.TaxID
}

func (o *CustomerCreate) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}
