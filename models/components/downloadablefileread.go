// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
	"time"
)

type DownloadableFileReadService string

const (
	DownloadableFileReadServiceDownloadable DownloadableFileReadService = "downloadable"
)

func (e DownloadableFileReadService) ToPointer() *DownloadableFileReadService {
	return &e
}
func (e *DownloadableFileReadService) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "downloadable":
		*e = DownloadableFileReadService(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DownloadableFileReadService: %v", v)
	}
}

// DownloadableFileRead - File to be associated with the downloadables benefit.
type DownloadableFileRead struct {
	// The ID of the object.
	ID                   string                      `json:"id"`
	OrganizationID       string                      `json:"organization_id"`
	Name                 string                      `json:"name"`
	Path                 string                      `json:"path"`
	MimeType             string                      `json:"mime_type"`
	Size                 int64                       `json:"size"`
	StorageVersion       *string                     `json:"storage_version"`
	ChecksumEtag         *string                     `json:"checksum_etag"`
	ChecksumSha256Base64 *string                     `json:"checksum_sha256_base64"`
	ChecksumSha256Hex    *string                     `json:"checksum_sha256_hex"`
	LastModifiedAt       *time.Time                  `json:"last_modified_at"`
	Version              *string                     `json:"version"`
	service              DownloadableFileReadService `const:"downloadable" json:"service"`
	IsUploaded           bool                        `json:"is_uploaded"`
	CreatedAt            time.Time                   `json:"created_at"`
	SizeReadable         string                      `json:"size_readable"`
}

func (d DownloadableFileRead) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DownloadableFileRead) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DownloadableFileRead) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DownloadableFileRead) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *DownloadableFileRead) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DownloadableFileRead) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *DownloadableFileRead) GetMimeType() string {
	if o == nil {
		return ""
	}
	return o.MimeType
}

func (o *DownloadableFileRead) GetSize() int64 {
	if o == nil {
		return 0
	}
	return o.Size
}

func (o *DownloadableFileRead) GetStorageVersion() *string {
	if o == nil {
		return nil
	}
	return o.StorageVersion
}

func (o *DownloadableFileRead) GetChecksumEtag() *string {
	if o == nil {
		return nil
	}
	return o.ChecksumEtag
}

func (o *DownloadableFileRead) GetChecksumSha256Base64() *string {
	if o == nil {
		return nil
	}
	return o.ChecksumSha256Base64
}

func (o *DownloadableFileRead) GetChecksumSha256Hex() *string {
	if o == nil {
		return nil
	}
	return o.ChecksumSha256Hex
}

func (o *DownloadableFileRead) GetLastModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastModifiedAt
}

func (o *DownloadableFileRead) GetVersion() *string {
	if o == nil {
		return nil
	}
	return o.Version
}

func (o *DownloadableFileRead) GetService() DownloadableFileReadService {
	return DownloadableFileReadServiceDownloadable
}

func (o *DownloadableFileRead) GetIsUploaded() bool {
	if o == nil {
		return false
	}
	return o.IsUploaded
}

func (o *DownloadableFileRead) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *DownloadableFileRead) GetSizeReadable() string {
	if o == nil {
		return ""
	}
	return o.SizeReadable
}
