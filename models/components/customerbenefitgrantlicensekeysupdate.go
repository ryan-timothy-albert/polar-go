// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"polar/internal/utils"
)

type CustomerBenefitGrantLicenseKeysUpdateBenefitType string

const (
	CustomerBenefitGrantLicenseKeysUpdateBenefitTypeLicenseKeys CustomerBenefitGrantLicenseKeysUpdateBenefitType = "license_keys"
)

func (e CustomerBenefitGrantLicenseKeysUpdateBenefitType) ToPointer() *CustomerBenefitGrantLicenseKeysUpdateBenefitType {
	return &e
}
func (e *CustomerBenefitGrantLicenseKeysUpdateBenefitType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "license_keys":
		*e = CustomerBenefitGrantLicenseKeysUpdateBenefitType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CustomerBenefitGrantLicenseKeysUpdateBenefitType: %v", v)
	}
}

type CustomerBenefitGrantLicenseKeysUpdate struct {
	benefitType CustomerBenefitGrantLicenseKeysUpdateBenefitType `const:"license_keys" json:"benefit_type"`
}

func (c CustomerBenefitGrantLicenseKeysUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CustomerBenefitGrantLicenseKeysUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CustomerBenefitGrantLicenseKeysUpdate) GetBenefitType() CustomerBenefitGrantLicenseKeysUpdateBenefitType {
	return CustomerBenefitGrantLicenseKeysUpdateBenefitTypeLicenseKeys
}
