// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"polar/internal/utils"
)

type BenefitGitHubRepositoryCreateType string

const (
	BenefitGitHubRepositoryCreateTypeGithubRepository BenefitGitHubRepositoryCreateType = "github_repository"
)

func (e BenefitGitHubRepositoryCreateType) ToPointer() *BenefitGitHubRepositoryCreateType {
	return &e
}
func (e *BenefitGitHubRepositoryCreateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github_repository":
		*e = BenefitGitHubRepositoryCreateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BenefitGitHubRepositoryCreateType: %v", v)
	}
}

type BenefitGitHubRepositoryCreate struct {
	type_ BenefitGitHubRepositoryCreateType `const:"github_repository" json:"type"`
	// The description of the benefit. Will be displayed on products having this benefit.
	Description string `json:"description"`
	// The ID of the organization owning the benefit. **Required unless you use an organization token.**
	OrganizationID *string `json:"organization_id,omitempty"`
	// Properties to create a benefit of type `github_repository`.
	Properties BenefitGitHubRepositoryCreateProperties `json:"properties"`
}

func (b BenefitGitHubRepositoryCreate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BenefitGitHubRepositoryCreate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BenefitGitHubRepositoryCreate) GetType() BenefitGitHubRepositoryCreateType {
	return BenefitGitHubRepositoryCreateTypeGithubRepository
}

func (o *BenefitGitHubRepositoryCreate) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *BenefitGitHubRepositoryCreate) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *BenefitGitHubRepositoryCreate) GetProperties() BenefitGitHubRepositoryCreateProperties {
	if o == nil {
		return BenefitGitHubRepositoryCreateProperties{}
	}
	return o.Properties
}
