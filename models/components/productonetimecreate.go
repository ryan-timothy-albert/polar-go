// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
)

type ProductOneTimeCreateMetadataType string

const (
	ProductOneTimeCreateMetadataTypeStr     ProductOneTimeCreateMetadataType = "str"
	ProductOneTimeCreateMetadataTypeInteger ProductOneTimeCreateMetadataType = "integer"
	ProductOneTimeCreateMetadataTypeBoolean ProductOneTimeCreateMetadataType = "boolean"
)

type ProductOneTimeCreateMetadata struct {
	Str     *string `queryParam:"inline"`
	Integer *int64  `queryParam:"inline"`
	Boolean *bool   `queryParam:"inline"`

	Type ProductOneTimeCreateMetadataType
}

func CreateProductOneTimeCreateMetadataStr(str string) ProductOneTimeCreateMetadata {
	typ := ProductOneTimeCreateMetadataTypeStr

	return ProductOneTimeCreateMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateProductOneTimeCreateMetadataInteger(integer int64) ProductOneTimeCreateMetadata {
	typ := ProductOneTimeCreateMetadataTypeInteger

	return ProductOneTimeCreateMetadata{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateProductOneTimeCreateMetadataBoolean(boolean bool) ProductOneTimeCreateMetadata {
	typ := ProductOneTimeCreateMetadataTypeBoolean

	return ProductOneTimeCreateMetadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *ProductOneTimeCreateMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ProductOneTimeCreateMetadataTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = ProductOneTimeCreateMetadataTypeInteger
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = ProductOneTimeCreateMetadataTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ProductOneTimeCreateMetadata", string(data))
}

func (u ProductOneTimeCreateMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type ProductOneTimeCreateMetadata: all fields are null")
}

type PricesType string

const (
	PricesTypeProductPriceOneTimeFixedCreate  PricesType = "ProductPriceOneTimeFixedCreate"
	PricesTypeProductPriceOneTimeCustomCreate PricesType = "ProductPriceOneTimeCustomCreate"
	PricesTypeProductPriceOneTimeFreeCreate   PricesType = "ProductPriceOneTimeFreeCreate"
)

type Prices struct {
	ProductPriceOneTimeFixedCreate  *ProductPriceOneTimeFixedCreate  `queryParam:"inline"`
	ProductPriceOneTimeCustomCreate *ProductPriceOneTimeCustomCreate `queryParam:"inline"`
	ProductPriceOneTimeFreeCreate   *ProductPriceOneTimeFreeCreate   `queryParam:"inline"`

	Type PricesType
}

func CreatePricesProductPriceOneTimeFixedCreate(productPriceOneTimeFixedCreate ProductPriceOneTimeFixedCreate) Prices {
	typ := PricesTypeProductPriceOneTimeFixedCreate

	return Prices{
		ProductPriceOneTimeFixedCreate: &productPriceOneTimeFixedCreate,
		Type:                           typ,
	}
}

func CreatePricesProductPriceOneTimeCustomCreate(productPriceOneTimeCustomCreate ProductPriceOneTimeCustomCreate) Prices {
	typ := PricesTypeProductPriceOneTimeCustomCreate

	return Prices{
		ProductPriceOneTimeCustomCreate: &productPriceOneTimeCustomCreate,
		Type:                            typ,
	}
}

func CreatePricesProductPriceOneTimeFreeCreate(productPriceOneTimeFreeCreate ProductPriceOneTimeFreeCreate) Prices {
	typ := PricesTypeProductPriceOneTimeFreeCreate

	return Prices{
		ProductPriceOneTimeFreeCreate: &productPriceOneTimeFreeCreate,
		Type:                          typ,
	}
}

func (u *Prices) UnmarshalJSON(data []byte) error {

	var productPriceOneTimeFreeCreate ProductPriceOneTimeFreeCreate = ProductPriceOneTimeFreeCreate{}
	if err := utils.UnmarshalJSON(data, &productPriceOneTimeFreeCreate, "", true, true); err == nil {
		u.ProductPriceOneTimeFreeCreate = &productPriceOneTimeFreeCreate
		u.Type = PricesTypeProductPriceOneTimeFreeCreate
		return nil
	}

	var productPriceOneTimeFixedCreate ProductPriceOneTimeFixedCreate = ProductPriceOneTimeFixedCreate{}
	if err := utils.UnmarshalJSON(data, &productPriceOneTimeFixedCreate, "", true, true); err == nil {
		u.ProductPriceOneTimeFixedCreate = &productPriceOneTimeFixedCreate
		u.Type = PricesTypeProductPriceOneTimeFixedCreate
		return nil
	}

	var productPriceOneTimeCustomCreate ProductPriceOneTimeCustomCreate = ProductPriceOneTimeCustomCreate{}
	if err := utils.UnmarshalJSON(data, &productPriceOneTimeCustomCreate, "", true, true); err == nil {
		u.ProductPriceOneTimeCustomCreate = &productPriceOneTimeCustomCreate
		u.Type = PricesTypeProductPriceOneTimeCustomCreate
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Prices", string(data))
}

func (u Prices) MarshalJSON() ([]byte, error) {
	if u.ProductPriceOneTimeFixedCreate != nil {
		return utils.MarshalJSON(u.ProductPriceOneTimeFixedCreate, "", true)
	}

	if u.ProductPriceOneTimeCustomCreate != nil {
		return utils.MarshalJSON(u.ProductPriceOneTimeCustomCreate, "", true)
	}

	if u.ProductPriceOneTimeFreeCreate != nil {
		return utils.MarshalJSON(u.ProductPriceOneTimeFreeCreate, "", true)
	}

	return nil, errors.New("could not marshal union type Prices: all fields are null")
}

// ProductOneTimeCreate - Schema to create a one-time product.
type ProductOneTimeCreate struct {
	// Key-value object allowing you to store additional information.
	//
	// The key must be a string with a maximum length of **40 characters**.
	// The value must be either:
	//
	// * A string with a maximum length of **500 characters**
	// * An integer
	// * A boolean
	//
	// You can store up to **50 key-value pairs**.
	Metadata map[string]ProductOneTimeCreateMetadata `json:"metadata,omitempty"`
	// The name of the product.
	Name string `json:"name"`
	// The description of the product.
	Description *string `json:"description,omitempty"`
	// List of available prices for this product.
	Prices []Prices `json:"prices"`
	// List of file IDs. Each one must be on the same organization as the product, of type `product_media` and correctly uploaded.
	Medias []string `json:"medias,omitempty"`
	// List of custom fields to attach.
	AttachedCustomFields []AttachedCustomFieldCreate `json:"attached_custom_fields,omitempty"`
	// The ID of the organization owning the product. **Required unless you use an organization token.**
	OrganizationID *string `json:"organization_id,omitempty"`
}

func (o *ProductOneTimeCreate) GetMetadata() map[string]ProductOneTimeCreateMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *ProductOneTimeCreate) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ProductOneTimeCreate) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ProductOneTimeCreate) GetPrices() []Prices {
	if o == nil {
		return []Prices{}
	}
	return o.Prices
}

func (o *ProductOneTimeCreate) GetMedias() []string {
	if o == nil {
		return nil
	}
	return o.Medias
}

func (o *ProductOneTimeCreate) GetAttachedCustomFields() []AttachedCustomFieldCreate {
	if o == nil {
		return nil
	}
	return o.AttachedCustomFields
}

func (o *ProductOneTimeCreate) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}
