// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/polarsource/polar-go/internal/utils"
	"time"
)

type S3FileUploadPart struct {
	Number               int64             `json:"number"`
	ChunkStart           int64             `json:"chunk_start"`
	ChunkEnd             int64             `json:"chunk_end"`
	ChecksumSha256Base64 *string           `json:"checksum_sha256_base64,omitempty"`
	URL                  string            `json:"url"`
	ExpiresAt            time.Time         `json:"expires_at"`
	Headers              map[string]string `json:"headers,omitempty"`
}

func (s S3FileUploadPart) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *S3FileUploadPart) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *S3FileUploadPart) GetNumber() int64 {
	if o == nil {
		return 0
	}
	return o.Number
}

func (o *S3FileUploadPart) GetChunkStart() int64 {
	if o == nil {
		return 0
	}
	return o.ChunkStart
}

func (o *S3FileUploadPart) GetChunkEnd() int64 {
	if o == nil {
		return 0
	}
	return o.ChunkEnd
}

func (o *S3FileUploadPart) GetChecksumSha256Base64() *string {
	if o == nil {
		return nil
	}
	return o.ChecksumSha256Base64
}

func (o *S3FileUploadPart) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *S3FileUploadPart) GetExpiresAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ExpiresAt
}

func (o *S3FileUploadPart) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}
