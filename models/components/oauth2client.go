// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"polar/internal/utils"
	"time"
)

type TokenEndpointAuthMethod string

const (
	TokenEndpointAuthMethodClientSecretBasic TokenEndpointAuthMethod = "client_secret_basic"
	TokenEndpointAuthMethodClientSecretPost  TokenEndpointAuthMethod = "client_secret_post"
	TokenEndpointAuthMethodNone              TokenEndpointAuthMethod = "none"
)

func (e TokenEndpointAuthMethod) ToPointer() *TokenEndpointAuthMethod {
	return &e
}
func (e *TokenEndpointAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "client_secret_basic":
		fallthrough
	case "client_secret_post":
		fallthrough
	case "none":
		*e = TokenEndpointAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TokenEndpointAuthMethod: %v", v)
	}
}

type GrantTypes string

const (
	GrantTypesAuthorizationCode GrantTypes = "authorization_code"
	GrantTypesRefreshToken      GrantTypes = "refresh_token"
)

func (e GrantTypes) ToPointer() *GrantTypes {
	return &e
}
func (e *GrantTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "authorization_code":
		fallthrough
	case "refresh_token":
		*e = GrantTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GrantTypes: %v", v)
	}
}

type ResponseTypes string

const (
	ResponseTypesCode ResponseTypes = "code"
)

func (e ResponseTypes) ToPointer() *ResponseTypes {
	return &e
}
func (e *ResponseTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "code":
		*e = ResponseTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseTypes: %v", v)
	}
}

type OAuth2Client struct {
	RedirectUris            []string                 `json:"redirect_uris"`
	TokenEndpointAuthMethod *TokenEndpointAuthMethod `default:"client_secret_post" json:"token_endpoint_auth_method"`
	GrantTypes              []GrantTypes             `json:"grant_types,omitempty"`
	ResponseTypes           []ResponseTypes          `json:"response_types,omitempty"`
	Scope                   *string                  `default:"openid profile email user:read organizations:read organizations:write custom_fields:read custom_fields:write discounts:read discounts:write checkout_links:read checkout_links:write checkouts:read checkouts:write products:read products:write benefits:read benefits:write files:read files:write subscriptions:read subscriptions:write customers:read customers:write orders:read metrics:read webhooks:read webhooks:write external_organizations:read license_keys:read license_keys:write repositories:read repositories:write issues:read issues:write customer_portal:read customer_portal:write" json:"scope"`
	ClientName              string                   `json:"client_name"`
	ClientURI               *string                  `json:"client_uri,omitempty"`
	LogoURI                 *string                  `json:"logo_uri,omitempty"`
	TosURI                  *string                  `json:"tos_uri,omitempty"`
	PolicyURI               *string                  `json:"policy_uri,omitempty"`
	// Creation timestamp of the object.
	CreatedAt time.Time `json:"created_at"`
	// Last modification timestamp of the object.
	ModifiedAt            *time.Time `json:"modified_at"`
	ClientID              string     `json:"client_id"`
	ClientSecret          string     `json:"client_secret"`
	ClientIDIssuedAt      int64      `json:"client_id_issued_at"`
	ClientSecretExpiresAt int64      `json:"client_secret_expires_at"`
}

func (o OAuth2Client) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OAuth2Client) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OAuth2Client) GetRedirectUris() []string {
	if o == nil {
		return []string{}
	}
	return o.RedirectUris
}

func (o *OAuth2Client) GetTokenEndpointAuthMethod() *TokenEndpointAuthMethod {
	if o == nil {
		return nil
	}
	return o.TokenEndpointAuthMethod
}

func (o *OAuth2Client) GetGrantTypes() []GrantTypes {
	if o == nil {
		return nil
	}
	return o.GrantTypes
}

func (o *OAuth2Client) GetResponseTypes() []ResponseTypes {
	if o == nil {
		return nil
	}
	return o.ResponseTypes
}

func (o *OAuth2Client) GetScope() *string {
	if o == nil {
		return nil
	}
	return o.Scope
}

func (o *OAuth2Client) GetClientName() string {
	if o == nil {
		return ""
	}
	return o.ClientName
}

func (o *OAuth2Client) GetClientURI() *string {
	if o == nil {
		return nil
	}
	return o.ClientURI
}

func (o *OAuth2Client) GetLogoURI() *string {
	if o == nil {
		return nil
	}
	return o.LogoURI
}

func (o *OAuth2Client) GetTosURI() *string {
	if o == nil {
		return nil
	}
	return o.TosURI
}

func (o *OAuth2Client) GetPolicyURI() *string {
	if o == nil {
		return nil
	}
	return o.PolicyURI
}

func (o *OAuth2Client) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *OAuth2Client) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *OAuth2Client) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *OAuth2Client) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *OAuth2Client) GetClientIDIssuedAt() int64 {
	if o == nil {
		return 0
	}
	return o.ClientIDIssuedAt
}

func (o *OAuth2Client) GetClientSecretExpiresAt() int64 {
	if o == nil {
		return 0
	}
	return o.ClientSecretExpiresAt
}
