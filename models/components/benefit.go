// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
)

type BenefitUnionType string

const (
	BenefitUnionTypeBenefitAds              BenefitUnionType = "BenefitAds"
	BenefitUnionTypeBenefitCustom           BenefitUnionType = "BenefitCustom"
	BenefitUnionTypeBenefitDiscord          BenefitUnionType = "BenefitDiscord"
	BenefitUnionTypeBenefitGitHubRepository BenefitUnionType = "BenefitGitHubRepository"
	BenefitUnionTypeBenefitDownloadables    BenefitUnionType = "BenefitDownloadables"
	BenefitUnionTypeBenefitLicenseKeys      BenefitUnionType = "BenefitLicenseKeys"
)

type Benefit struct {
	BenefitAds              *BenefitAds              `queryParam:"inline"`
	BenefitCustom           *BenefitCustom           `queryParam:"inline"`
	BenefitDiscord          *BenefitDiscord          `queryParam:"inline"`
	BenefitGitHubRepository *BenefitGitHubRepository `queryParam:"inline"`
	BenefitDownloadables    *BenefitDownloadables    `queryParam:"inline"`
	BenefitLicenseKeys      *BenefitLicenseKeys      `queryParam:"inline"`

	Type BenefitUnionType
}

func CreateBenefitBenefitAds(benefitAds BenefitAds) Benefit {
	typ := BenefitUnionTypeBenefitAds

	return Benefit{
		BenefitAds: &benefitAds,
		Type:       typ,
	}
}

func CreateBenefitBenefitCustom(benefitCustom BenefitCustom) Benefit {
	typ := BenefitUnionTypeBenefitCustom

	return Benefit{
		BenefitCustom: &benefitCustom,
		Type:          typ,
	}
}

func CreateBenefitBenefitDiscord(benefitDiscord BenefitDiscord) Benefit {
	typ := BenefitUnionTypeBenefitDiscord

	return Benefit{
		BenefitDiscord: &benefitDiscord,
		Type:           typ,
	}
}

func CreateBenefitBenefitGitHubRepository(benefitGitHubRepository BenefitGitHubRepository) Benefit {
	typ := BenefitUnionTypeBenefitGitHubRepository

	return Benefit{
		BenefitGitHubRepository: &benefitGitHubRepository,
		Type:                    typ,
	}
}

func CreateBenefitBenefitDownloadables(benefitDownloadables BenefitDownloadables) Benefit {
	typ := BenefitUnionTypeBenefitDownloadables

	return Benefit{
		BenefitDownloadables: &benefitDownloadables,
		Type:                 typ,
	}
}

func CreateBenefitBenefitLicenseKeys(benefitLicenseKeys BenefitLicenseKeys) Benefit {
	typ := BenefitUnionTypeBenefitLicenseKeys

	return Benefit{
		BenefitLicenseKeys: &benefitLicenseKeys,
		Type:               typ,
	}
}

func (u *Benefit) UnmarshalJSON(data []byte) error {

	var benefitAds BenefitAds = BenefitAds{}
	if err := utils.UnmarshalJSON(data, &benefitAds, "", true, true); err == nil {
		u.BenefitAds = &benefitAds
		u.Type = BenefitUnionTypeBenefitAds
		return nil
	}

	var benefitDiscord BenefitDiscord = BenefitDiscord{}
	if err := utils.UnmarshalJSON(data, &benefitDiscord, "", true, true); err == nil {
		u.BenefitDiscord = &benefitDiscord
		u.Type = BenefitUnionTypeBenefitDiscord
		return nil
	}

	var benefitGitHubRepository BenefitGitHubRepository = BenefitGitHubRepository{}
	if err := utils.UnmarshalJSON(data, &benefitGitHubRepository, "", true, true); err == nil {
		u.BenefitGitHubRepository = &benefitGitHubRepository
		u.Type = BenefitUnionTypeBenefitGitHubRepository
		return nil
	}

	var benefitDownloadables BenefitDownloadables = BenefitDownloadables{}
	if err := utils.UnmarshalJSON(data, &benefitDownloadables, "", true, true); err == nil {
		u.BenefitDownloadables = &benefitDownloadables
		u.Type = BenefitUnionTypeBenefitDownloadables
		return nil
	}

	var benefitLicenseKeys BenefitLicenseKeys = BenefitLicenseKeys{}
	if err := utils.UnmarshalJSON(data, &benefitLicenseKeys, "", true, true); err == nil {
		u.BenefitLicenseKeys = &benefitLicenseKeys
		u.Type = BenefitUnionTypeBenefitLicenseKeys
		return nil
	}

	var benefitCustom BenefitCustom = BenefitCustom{}
	if err := utils.UnmarshalJSON(data, &benefitCustom, "", true, true); err == nil {
		u.BenefitCustom = &benefitCustom
		u.Type = BenefitUnionTypeBenefitCustom
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Benefit", string(data))
}

func (u Benefit) MarshalJSON() ([]byte, error) {
	if u.BenefitAds != nil {
		return utils.MarshalJSON(u.BenefitAds, "", true)
	}

	if u.BenefitCustom != nil {
		return utils.MarshalJSON(u.BenefitCustom, "", true)
	}

	if u.BenefitDiscord != nil {
		return utils.MarshalJSON(u.BenefitDiscord, "", true)
	}

	if u.BenefitGitHubRepository != nil {
		return utils.MarshalJSON(u.BenefitGitHubRepository, "", true)
	}

	if u.BenefitDownloadables != nil {
		return utils.MarshalJSON(u.BenefitDownloadables, "", true)
	}

	if u.BenefitLicenseKeys != nil {
		return utils.MarshalJSON(u.BenefitLicenseKeys, "", true)
	}

	return nil, errors.New("could not marshal union type Benefit: all fields are null")
}
