// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"polar/internal/utils"
	"time"
)

type CustomerPortalCustomerTaxIDType string

const (
	CustomerPortalCustomerTaxIDTypeStr         CustomerPortalCustomerTaxIDType = "str"
	CustomerPortalCustomerTaxIDTypeTaxIDFormat CustomerPortalCustomerTaxIDType = "TaxIDFormat"
)

type CustomerPortalCustomerTaxID struct {
	Str         *string      `queryParam:"inline"`
	TaxIDFormat *TaxIDFormat `queryParam:"inline"`

	Type CustomerPortalCustomerTaxIDType
}

func CreateCustomerPortalCustomerTaxIDStr(str string) CustomerPortalCustomerTaxID {
	typ := CustomerPortalCustomerTaxIDTypeStr

	return CustomerPortalCustomerTaxID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCustomerPortalCustomerTaxIDTaxIDFormat(taxIDFormat TaxIDFormat) CustomerPortalCustomerTaxID {
	typ := CustomerPortalCustomerTaxIDTypeTaxIDFormat

	return CustomerPortalCustomerTaxID{
		TaxIDFormat: &taxIDFormat,
		Type:        typ,
	}
}

func (u *CustomerPortalCustomerTaxID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CustomerPortalCustomerTaxIDTypeStr
		return nil
	}

	var taxIDFormat TaxIDFormat = TaxIDFormat("")
	if err := utils.UnmarshalJSON(data, &taxIDFormat, "", true, true); err == nil {
		u.TaxIDFormat = &taxIDFormat
		u.Type = CustomerPortalCustomerTaxIDTypeTaxIDFormat
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomerPortalCustomerTaxID", string(data))
}

func (u CustomerPortalCustomerTaxID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.TaxIDFormat != nil {
		return utils.MarshalJSON(u.TaxIDFormat, "", true)
	}

	return nil, errors.New("could not marshal union type CustomerPortalCustomerTaxID: all fields are null")
}

type CustomerPortalCustomer struct {
	// Creation timestamp of the object.
	CreatedAt time.Time `json:"created_at"`
	// Last modification timestamp of the object.
	ModifiedAt *time.Time `json:"modified_at"`
	// The ID of the object.
	ID             string                                `json:"id"`
	Email          string                                `json:"email"`
	EmailVerified  bool                                  `json:"email_verified"`
	Name           *string                               `json:"name"`
	BillingAddress *Address                              `json:"billing_address"`
	TaxID          []CustomerPortalCustomerTaxID         `json:"tax_id"`
	OauthAccounts  map[string]CustomerPortalOAuthAccount `json:"oauth_accounts"`
}

func (c CustomerPortalCustomer) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CustomerPortalCustomer) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CustomerPortalCustomer) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *CustomerPortalCustomer) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *CustomerPortalCustomer) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CustomerPortalCustomer) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *CustomerPortalCustomer) GetEmailVerified() bool {
	if o == nil {
		return false
	}
	return o.EmailVerified
}

func (o *CustomerPortalCustomer) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CustomerPortalCustomer) GetBillingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *CustomerPortalCustomer) GetTaxID() []CustomerPortalCustomerTaxID {
	if o == nil {
		return nil
	}
	return o.TaxID
}

func (o *CustomerPortalCustomer) GetOauthAccounts() map[string]CustomerPortalOAuthAccount {
	if o == nil {
		return map[string]CustomerPortalOAuthAccount{}
	}
	return o.OauthAccounts
}
