// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
	"time"
)

type DiscountUpdateMetadataType string

const (
	DiscountUpdateMetadataTypeStr     DiscountUpdateMetadataType = "str"
	DiscountUpdateMetadataTypeInteger DiscountUpdateMetadataType = "integer"
	DiscountUpdateMetadataTypeBoolean DiscountUpdateMetadataType = "boolean"
)

type DiscountUpdateMetadata struct {
	Str     *string `queryParam:"inline"`
	Integer *int64  `queryParam:"inline"`
	Boolean *bool   `queryParam:"inline"`

	Type DiscountUpdateMetadataType
}

func CreateDiscountUpdateMetadataStr(str string) DiscountUpdateMetadata {
	typ := DiscountUpdateMetadataTypeStr

	return DiscountUpdateMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateDiscountUpdateMetadataInteger(integer int64) DiscountUpdateMetadata {
	typ := DiscountUpdateMetadataTypeInteger

	return DiscountUpdateMetadata{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateDiscountUpdateMetadataBoolean(boolean bool) DiscountUpdateMetadata {
	typ := DiscountUpdateMetadataTypeBoolean

	return DiscountUpdateMetadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *DiscountUpdateMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = DiscountUpdateMetadataTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = DiscountUpdateMetadataTypeInteger
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = DiscountUpdateMetadataTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DiscountUpdateMetadata", string(data))
}

func (u DiscountUpdateMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type DiscountUpdateMetadata: all fields are null")
}

// DiscountUpdate - Schema to update a discount.
type DiscountUpdate struct {
	// Key-value object allowing you to store additional information.
	//
	// The key must be a string with a maximum length of **40 characters**.
	// The value must be either:
	//
	// * A string with a maximum length of **500 characters**
	// * An integer
	// * A boolean
	//
	// You can store up to **50 key-value pairs**.
	Metadata         map[string]DiscountUpdateMetadata `json:"metadata,omitempty"`
	Name             *string                           `json:"name,omitempty"`
	Code             *string                           `json:"code,omitempty"`
	StartsAt         *time.Time                        `json:"starts_at,omitempty"`
	EndsAt           *time.Time                        `json:"ends_at,omitempty"`
	MaxRedemptions   *int64                            `json:"max_redemptions,omitempty"`
	Duration         *DiscountDuration                 `json:"duration,omitempty"`
	DurationInMonths *int64                            `json:"duration_in_months,omitempty"`
	Type             *DiscountType                     `json:"type,omitempty"`
	Amount           *int64                            `json:"amount,omitempty"`
	Currency         *string                           `default:"usd" json:"currency"`
	BasisPoints      *int64                            `json:"basis_points,omitempty"`
	Products         []string                          `json:"products,omitempty"`
}

func (d DiscountUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DiscountUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DiscountUpdate) GetMetadata() map[string]DiscountUpdateMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *DiscountUpdate) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *DiscountUpdate) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *DiscountUpdate) GetStartsAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartsAt
}

func (o *DiscountUpdate) GetEndsAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndsAt
}

func (o *DiscountUpdate) GetMaxRedemptions() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxRedemptions
}

func (o *DiscountUpdate) GetDuration() *DiscountDuration {
	if o == nil {
		return nil
	}
	return o.Duration
}

func (o *DiscountUpdate) GetDurationInMonths() *int64 {
	if o == nil {
		return nil
	}
	return o.DurationInMonths
}

func (o *DiscountUpdate) GetType() *DiscountType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *DiscountUpdate) GetAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *DiscountUpdate) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *DiscountUpdate) GetBasisPoints() *int64 {
	if o == nil {
		return nil
	}
	return o.BasisPoints
}

func (o *DiscountUpdate) GetProducts() []string {
	if o == nil {
		return nil
	}
	return o.Products
}
