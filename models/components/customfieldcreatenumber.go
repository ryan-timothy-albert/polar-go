// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"polar/internal/utils"
)

type CustomFieldCreateNumberMetadataType string

const (
	CustomFieldCreateNumberMetadataTypeStr     CustomFieldCreateNumberMetadataType = "str"
	CustomFieldCreateNumberMetadataTypeInteger CustomFieldCreateNumberMetadataType = "integer"
	CustomFieldCreateNumberMetadataTypeBoolean CustomFieldCreateNumberMetadataType = "boolean"
)

type CustomFieldCreateNumberMetadata struct {
	Str     *string `queryParam:"inline"`
	Integer *int64  `queryParam:"inline"`
	Boolean *bool   `queryParam:"inline"`

	Type CustomFieldCreateNumberMetadataType
}

func CreateCustomFieldCreateNumberMetadataStr(str string) CustomFieldCreateNumberMetadata {
	typ := CustomFieldCreateNumberMetadataTypeStr

	return CustomFieldCreateNumberMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateCustomFieldCreateNumberMetadataInteger(integer int64) CustomFieldCreateNumberMetadata {
	typ := CustomFieldCreateNumberMetadataTypeInteger

	return CustomFieldCreateNumberMetadata{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCustomFieldCreateNumberMetadataBoolean(boolean bool) CustomFieldCreateNumberMetadata {
	typ := CustomFieldCreateNumberMetadataTypeBoolean

	return CustomFieldCreateNumberMetadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CustomFieldCreateNumberMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CustomFieldCreateNumberMetadataTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = CustomFieldCreateNumberMetadataTypeInteger
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = CustomFieldCreateNumberMetadataTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomFieldCreateNumberMetadata", string(data))
}

func (u CustomFieldCreateNumberMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type CustomFieldCreateNumberMetadata: all fields are null")
}

type CustomFieldCreateNumberType string

const (
	CustomFieldCreateNumberTypeNumber CustomFieldCreateNumberType = "number"
)

func (e CustomFieldCreateNumberType) ToPointer() *CustomFieldCreateNumberType {
	return &e
}
func (e *CustomFieldCreateNumberType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = CustomFieldCreateNumberType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CustomFieldCreateNumberType: %v", v)
	}
}

// CustomFieldCreateNumber - Schema to create a custom field of type number.
type CustomFieldCreateNumber struct {
	// Key-value object allowing you to store additional information.
	//
	// The key must be a string with a maximum length of **40 characters**.
	// The value must be either:
	//
	// * A string with a maximum length of **500 characters**
	// * An integer
	// * A boolean
	//
	// You can store up to **50 key-value pairs**.
	Metadata map[string]CustomFieldCreateNumberMetadata `json:"metadata,omitempty"`
	type_    CustomFieldCreateNumberType                `const:"number" json:"type"`
	// Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens.
	Slug string `json:"slug"`
	// Name of the custom field.
	Name string `json:"name"`
	// The ID of the organization owning the custom field. **Required unless you use an organization token.**
	OrganizationID *string                     `json:"organization_id,omitempty"`
	Properties     CustomFieldNumberProperties `json:"properties"`
}

func (c CustomFieldCreateNumber) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CustomFieldCreateNumber) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CustomFieldCreateNumber) GetMetadata() map[string]CustomFieldCreateNumberMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CustomFieldCreateNumber) GetType() CustomFieldCreateNumberType {
	return CustomFieldCreateNumberTypeNumber
}

func (o *CustomFieldCreateNumber) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *CustomFieldCreateNumber) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CustomFieldCreateNumber) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *CustomFieldCreateNumber) GetProperties() CustomFieldNumberProperties {
	if o == nil {
		return CustomFieldNumberProperties{}
	}
	return o.Properties
}
