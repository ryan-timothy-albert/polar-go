// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"polar/internal/utils"
)

type TokenType string

const (
	TokenTypeBearer TokenType = "Bearer"
)

func (e TokenType) ToPointer() *TokenType {
	return &e
}
func (e *TokenType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Bearer":
		*e = TokenType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TokenType: %v", v)
	}
}

type TokenResponse struct {
	AccessToken  string    `json:"access_token"`
	tokenType    TokenType `const:"Bearer" json:"token_type"`
	ExpiresIn    int64     `json:"expires_in"`
	RefreshToken *string   `json:"refresh_token"`
	Scope        string    `json:"scope"`
	IDToken      string    `json:"id_token"`
}

func (t TokenResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TokenResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TokenResponse) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *TokenResponse) GetTokenType() TokenType {
	return TokenTypeBearer
}

func (o *TokenResponse) GetExpiresIn() int64 {
	if o == nil {
		return 0
	}
	return o.ExpiresIn
}

func (o *TokenResponse) GetRefreshToken() *string {
	if o == nil {
		return nil
	}
	return o.RefreshToken
}

func (o *TokenResponse) GetScope() string {
	if o == nil {
		return ""
	}
	return o.Scope
}

func (o *TokenResponse) GetIDToken() string {
	if o == nil {
		return ""
	}
	return o.IDToken
}
