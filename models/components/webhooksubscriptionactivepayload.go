// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"polar/internal/utils"
)

type WebhookSubscriptionActivePayloadType string

const (
	WebhookSubscriptionActivePayloadTypeSubscriptionActive WebhookSubscriptionActivePayloadType = "subscription.active"
)

func (e WebhookSubscriptionActivePayloadType) ToPointer() *WebhookSubscriptionActivePayloadType {
	return &e
}
func (e *WebhookSubscriptionActivePayloadType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "subscription.active":
		*e = WebhookSubscriptionActivePayloadType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookSubscriptionActivePayloadType: %v", v)
	}
}

// WebhookSubscriptionActivePayload - Sent when a subscription becomes active,
// whether because it's a new paid subscription or because payment was recovered.
//
// **Discord & Slack support:** Full
type WebhookSubscriptionActivePayload struct {
	type_ WebhookSubscriptionActivePayloadType `const:"subscription.active" json:"type"`
	Data  Subscription                         `json:"data"`
}

func (w WebhookSubscriptionActivePayload) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WebhookSubscriptionActivePayload) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *WebhookSubscriptionActivePayload) GetType() WebhookSubscriptionActivePayloadType {
	return WebhookSubscriptionActivePayloadTypeSubscriptionActive
}

func (o *WebhookSubscriptionActivePayload) GetData() Subscription {
	if o == nil {
		return Subscription{}
	}
	return o.Data
}
