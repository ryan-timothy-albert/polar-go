// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
)

type CustomFieldCreateSelectMetadataType string

const (
	CustomFieldCreateSelectMetadataTypeStr     CustomFieldCreateSelectMetadataType = "str"
	CustomFieldCreateSelectMetadataTypeInteger CustomFieldCreateSelectMetadataType = "integer"
	CustomFieldCreateSelectMetadataTypeBoolean CustomFieldCreateSelectMetadataType = "boolean"
)

type CustomFieldCreateSelectMetadata struct {
	Str     *string `queryParam:"inline"`
	Integer *int64  `queryParam:"inline"`
	Boolean *bool   `queryParam:"inline"`

	Type CustomFieldCreateSelectMetadataType
}

func CreateCustomFieldCreateSelectMetadataStr(str string) CustomFieldCreateSelectMetadata {
	typ := CustomFieldCreateSelectMetadataTypeStr

	return CustomFieldCreateSelectMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateCustomFieldCreateSelectMetadataInteger(integer int64) CustomFieldCreateSelectMetadata {
	typ := CustomFieldCreateSelectMetadataTypeInteger

	return CustomFieldCreateSelectMetadata{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCustomFieldCreateSelectMetadataBoolean(boolean bool) CustomFieldCreateSelectMetadata {
	typ := CustomFieldCreateSelectMetadataTypeBoolean

	return CustomFieldCreateSelectMetadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CustomFieldCreateSelectMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CustomFieldCreateSelectMetadataTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = CustomFieldCreateSelectMetadataTypeInteger
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = CustomFieldCreateSelectMetadataTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomFieldCreateSelectMetadata", string(data))
}

func (u CustomFieldCreateSelectMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type CustomFieldCreateSelectMetadata: all fields are null")
}

// CustomFieldCreateSelect - Schema to create a custom field of type select.
type CustomFieldCreateSelect struct {
	// Key-value object allowing you to store additional information.
	//
	// The key must be a string with a maximum length of **40 characters**.
	// The value must be either:
	//
	// * A string with a maximum length of **500 characters**
	// * An integer
	// * A boolean
	//
	// You can store up to **50 key-value pairs**.
	Metadata map[string]CustomFieldCreateSelectMetadata `json:"metadata,omitempty"`
	type_    string                                     `const:"select" json:"type"`
	// Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens.
	Slug string `json:"slug"`
	// Name of the custom field.
	Name string `json:"name"`
	// The ID of the organization owning the custom field. **Required unless you use an organization token.**
	OrganizationID *string                     `json:"organization_id,omitempty"`
	Properties     CustomFieldSelectProperties `json:"properties"`
}

func (c CustomFieldCreateSelect) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CustomFieldCreateSelect) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CustomFieldCreateSelect) GetMetadata() map[string]CustomFieldCreateSelectMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CustomFieldCreateSelect) GetType() string {
	return "select"
}

func (o *CustomFieldCreateSelect) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *CustomFieldCreateSelect) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CustomFieldCreateSelect) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *CustomFieldCreateSelect) GetProperties() CustomFieldSelectProperties {
	if o == nil {
		return CustomFieldSelectProperties{}
	}
	return o.Properties
}
