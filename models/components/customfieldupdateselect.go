// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
)

type CustomFieldUpdateSelectMetadataType string

const (
	CustomFieldUpdateSelectMetadataTypeStr     CustomFieldUpdateSelectMetadataType = "str"
	CustomFieldUpdateSelectMetadataTypeInteger CustomFieldUpdateSelectMetadataType = "integer"
	CustomFieldUpdateSelectMetadataTypeBoolean CustomFieldUpdateSelectMetadataType = "boolean"
)

type CustomFieldUpdateSelectMetadata struct {
	Str     *string `queryParam:"inline"`
	Integer *int64  `queryParam:"inline"`
	Boolean *bool   `queryParam:"inline"`

	Type CustomFieldUpdateSelectMetadataType
}

func CreateCustomFieldUpdateSelectMetadataStr(str string) CustomFieldUpdateSelectMetadata {
	typ := CustomFieldUpdateSelectMetadataTypeStr

	return CustomFieldUpdateSelectMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateCustomFieldUpdateSelectMetadataInteger(integer int64) CustomFieldUpdateSelectMetadata {
	typ := CustomFieldUpdateSelectMetadataTypeInteger

	return CustomFieldUpdateSelectMetadata{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCustomFieldUpdateSelectMetadataBoolean(boolean bool) CustomFieldUpdateSelectMetadata {
	typ := CustomFieldUpdateSelectMetadataTypeBoolean

	return CustomFieldUpdateSelectMetadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CustomFieldUpdateSelectMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CustomFieldUpdateSelectMetadataTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = CustomFieldUpdateSelectMetadataTypeInteger
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = CustomFieldUpdateSelectMetadataTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomFieldUpdateSelectMetadata", string(data))
}

func (u CustomFieldUpdateSelectMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type CustomFieldUpdateSelectMetadata: all fields are null")
}

type CustomFieldUpdateSelectType string

const (
	CustomFieldUpdateSelectTypeSelect CustomFieldUpdateSelectType = "select"
)

func (e CustomFieldUpdateSelectType) ToPointer() *CustomFieldUpdateSelectType {
	return &e
}
func (e *CustomFieldUpdateSelectType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "select":
		*e = CustomFieldUpdateSelectType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CustomFieldUpdateSelectType: %v", v)
	}
}

// CustomFieldUpdateSelect - Schema to update a custom field of type select.
type CustomFieldUpdateSelect struct {
	Metadata   map[string]CustomFieldUpdateSelectMetadata `json:"metadata,omitempty"`
	Name       *string                                    `json:"name,omitempty"`
	Slug       *string                                    `json:"slug,omitempty"`
	type_      CustomFieldUpdateSelectType                `const:"select" json:"type"`
	Properties *CustomFieldSelectProperties               `json:"properties,omitempty"`
}

func (c CustomFieldUpdateSelect) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CustomFieldUpdateSelect) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CustomFieldUpdateSelect) GetMetadata() map[string]CustomFieldUpdateSelectMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CustomFieldUpdateSelect) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CustomFieldUpdateSelect) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CustomFieldUpdateSelect) GetType() CustomFieldUpdateSelectType {
	return CustomFieldUpdateSelectTypeSelect
}

func (o *CustomFieldUpdateSelect) GetProperties() *CustomFieldSelectProperties {
	if o == nil {
		return nil
	}
	return o.Properties
}
