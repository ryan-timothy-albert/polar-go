// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
	"time"
)

type CustomFieldTextMetadataType string

const (
	CustomFieldTextMetadataTypeStr     CustomFieldTextMetadataType = "str"
	CustomFieldTextMetadataTypeInteger CustomFieldTextMetadataType = "integer"
	CustomFieldTextMetadataTypeBoolean CustomFieldTextMetadataType = "boolean"
)

type CustomFieldTextMetadata struct {
	Str     *string `queryParam:"inline"`
	Integer *int64  `queryParam:"inline"`
	Boolean *bool   `queryParam:"inline"`

	Type CustomFieldTextMetadataType
}

func CreateCustomFieldTextMetadataStr(str string) CustomFieldTextMetadata {
	typ := CustomFieldTextMetadataTypeStr

	return CustomFieldTextMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateCustomFieldTextMetadataInteger(integer int64) CustomFieldTextMetadata {
	typ := CustomFieldTextMetadataTypeInteger

	return CustomFieldTextMetadata{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCustomFieldTextMetadataBoolean(boolean bool) CustomFieldTextMetadata {
	typ := CustomFieldTextMetadataTypeBoolean

	return CustomFieldTextMetadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CustomFieldTextMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CustomFieldTextMetadataTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = CustomFieldTextMetadataTypeInteger
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = CustomFieldTextMetadataTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomFieldTextMetadata", string(data))
}

func (u CustomFieldTextMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type CustomFieldTextMetadata: all fields are null")
}

type CustomFieldTextType string

const (
	CustomFieldTextTypeText CustomFieldTextType = "text"
)

func (e CustomFieldTextType) ToPointer() *CustomFieldTextType {
	return &e
}
func (e *CustomFieldTextType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = CustomFieldTextType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CustomFieldTextType: %v", v)
	}
}

// CustomFieldText - Schema for a custom field of type text.
type CustomFieldText struct {
	// Creation timestamp of the object.
	CreatedAt time.Time `json:"created_at"`
	// Last modification timestamp of the object.
	ModifiedAt *time.Time `json:"modified_at"`
	// The ID of the object.
	ID       string                             `json:"id"`
	Metadata map[string]CustomFieldTextMetadata `json:"metadata"`
	type_    CustomFieldTextType                `const:"text" json:"type"`
	// Identifier of the custom field. It'll be used as key when storing the value.
	Slug string `json:"slug"`
	// Name of the custom field.
	Name string `json:"name"`
	// The ID of the organization owning the custom field.
	OrganizationID string                    `json:"organization_id"`
	Properties     CustomFieldTextProperties `json:"properties"`
}

func (c CustomFieldText) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CustomFieldText) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CustomFieldText) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *CustomFieldText) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *CustomFieldText) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CustomFieldText) GetMetadata() map[string]CustomFieldTextMetadata {
	if o == nil {
		return map[string]CustomFieldTextMetadata{}
	}
	return o.Metadata
}

func (o *CustomFieldText) GetType() CustomFieldTextType {
	return CustomFieldTextTypeText
}

func (o *CustomFieldText) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *CustomFieldText) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CustomFieldText) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *CustomFieldText) GetProperties() CustomFieldTextProperties {
	if o == nil {
		return CustomFieldTextProperties{}
	}
	return o.Properties
}
