// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
)

type DiscountUnionType string

const (
	DiscountUnionTypeDiscountFixedOnceForeverDuration      DiscountUnionType = "DiscountFixedOnceForeverDuration"
	DiscountUnionTypeDiscountFixedRepeatDuration           DiscountUnionType = "DiscountFixedRepeatDuration"
	DiscountUnionTypeDiscountPercentageOnceForeverDuration DiscountUnionType = "DiscountPercentageOnceForeverDuration"
	DiscountUnionTypeDiscountPercentageRepeatDuration      DiscountUnionType = "DiscountPercentageRepeatDuration"
)

type Discount struct {
	DiscountFixedOnceForeverDuration      *DiscountFixedOnceForeverDuration      `queryParam:"inline"`
	DiscountFixedRepeatDuration           *DiscountFixedRepeatDuration           `queryParam:"inline"`
	DiscountPercentageOnceForeverDuration *DiscountPercentageOnceForeverDuration `queryParam:"inline"`
	DiscountPercentageRepeatDuration      *DiscountPercentageRepeatDuration      `queryParam:"inline"`

	Type DiscountUnionType
}

func CreateDiscountDiscountFixedOnceForeverDuration(discountFixedOnceForeverDuration DiscountFixedOnceForeverDuration) Discount {
	typ := DiscountUnionTypeDiscountFixedOnceForeverDuration

	return Discount{
		DiscountFixedOnceForeverDuration: &discountFixedOnceForeverDuration,
		Type:                             typ,
	}
}

func CreateDiscountDiscountFixedRepeatDuration(discountFixedRepeatDuration DiscountFixedRepeatDuration) Discount {
	typ := DiscountUnionTypeDiscountFixedRepeatDuration

	return Discount{
		DiscountFixedRepeatDuration: &discountFixedRepeatDuration,
		Type:                        typ,
	}
}

func CreateDiscountDiscountPercentageOnceForeverDuration(discountPercentageOnceForeverDuration DiscountPercentageOnceForeverDuration) Discount {
	typ := DiscountUnionTypeDiscountPercentageOnceForeverDuration

	return Discount{
		DiscountPercentageOnceForeverDuration: &discountPercentageOnceForeverDuration,
		Type:                                  typ,
	}
}

func CreateDiscountDiscountPercentageRepeatDuration(discountPercentageRepeatDuration DiscountPercentageRepeatDuration) Discount {
	typ := DiscountUnionTypeDiscountPercentageRepeatDuration

	return Discount{
		DiscountPercentageRepeatDuration: &discountPercentageRepeatDuration,
		Type:                             typ,
	}
}

func (u *Discount) UnmarshalJSON(data []byte) error {

	var discountPercentageOnceForeverDuration DiscountPercentageOnceForeverDuration = DiscountPercentageOnceForeverDuration{}
	if err := utils.UnmarshalJSON(data, &discountPercentageOnceForeverDuration, "", true, true); err == nil {
		u.DiscountPercentageOnceForeverDuration = &discountPercentageOnceForeverDuration
		u.Type = DiscountUnionTypeDiscountPercentageOnceForeverDuration
		return nil
	}

	var discountFixedOnceForeverDuration DiscountFixedOnceForeverDuration = DiscountFixedOnceForeverDuration{}
	if err := utils.UnmarshalJSON(data, &discountFixedOnceForeverDuration, "", true, true); err == nil {
		u.DiscountFixedOnceForeverDuration = &discountFixedOnceForeverDuration
		u.Type = DiscountUnionTypeDiscountFixedOnceForeverDuration
		return nil
	}

	var discountPercentageRepeatDuration DiscountPercentageRepeatDuration = DiscountPercentageRepeatDuration{}
	if err := utils.UnmarshalJSON(data, &discountPercentageRepeatDuration, "", true, true); err == nil {
		u.DiscountPercentageRepeatDuration = &discountPercentageRepeatDuration
		u.Type = DiscountUnionTypeDiscountPercentageRepeatDuration
		return nil
	}

	var discountFixedRepeatDuration DiscountFixedRepeatDuration = DiscountFixedRepeatDuration{}
	if err := utils.UnmarshalJSON(data, &discountFixedRepeatDuration, "", true, true); err == nil {
		u.DiscountFixedRepeatDuration = &discountFixedRepeatDuration
		u.Type = DiscountUnionTypeDiscountFixedRepeatDuration
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Discount", string(data))
}

func (u Discount) MarshalJSON() ([]byte, error) {
	if u.DiscountFixedOnceForeverDuration != nil {
		return utils.MarshalJSON(u.DiscountFixedOnceForeverDuration, "", true)
	}

	if u.DiscountFixedRepeatDuration != nil {
		return utils.MarshalJSON(u.DiscountFixedRepeatDuration, "", true)
	}

	if u.DiscountPercentageOnceForeverDuration != nil {
		return utils.MarshalJSON(u.DiscountPercentageOnceForeverDuration, "", true)
	}

	if u.DiscountPercentageRepeatDuration != nil {
		return utils.MarshalJSON(u.DiscountPercentageRepeatDuration, "", true)
	}

	return nil, errors.New("could not marshal union type Discount: all fields are null")
}
