// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
)

type BenefitCreateType string

const (
	BenefitCreateTypeAds              BenefitCreateType = "ads"
	BenefitCreateTypeCustom           BenefitCreateType = "custom"
	BenefitCreateTypeDiscord          BenefitCreateType = "discord"
	BenefitCreateTypeDownloadables    BenefitCreateType = "downloadables"
	BenefitCreateTypeGithubRepository BenefitCreateType = "github_repository"
	BenefitCreateTypeLicenseKeys      BenefitCreateType = "license_keys"
)

type BenefitCreate struct {
	BenefitCustomCreate           *BenefitCustomCreate           `queryParam:"inline"`
	BenefitAdsCreate              *BenefitAdsCreate              `queryParam:"inline"`
	BenefitDiscordCreate          *BenefitDiscordCreate          `queryParam:"inline"`
	BenefitGitHubRepositoryCreate *BenefitGitHubRepositoryCreate `queryParam:"inline"`
	BenefitDownloadablesCreate    *BenefitDownloadablesCreate    `queryParam:"inline"`
	BenefitLicenseKeysCreate      *BenefitLicenseKeysCreate      `queryParam:"inline"`

	Type BenefitCreateType
}

func CreateBenefitCreateAds(ads BenefitAdsCreate) BenefitCreate {
	typ := BenefitCreateTypeAds

	return BenefitCreate{
		BenefitAdsCreate: &ads,
		Type:             typ,
	}
}

func CreateBenefitCreateCustom(custom BenefitCustomCreate) BenefitCreate {
	typ := BenefitCreateTypeCustom

	return BenefitCreate{
		BenefitCustomCreate: &custom,
		Type:                typ,
	}
}

func CreateBenefitCreateDiscord(discord BenefitDiscordCreate) BenefitCreate {
	typ := BenefitCreateTypeDiscord

	return BenefitCreate{
		BenefitDiscordCreate: &discord,
		Type:                 typ,
	}
}

func CreateBenefitCreateDownloadables(downloadables BenefitDownloadablesCreate) BenefitCreate {
	typ := BenefitCreateTypeDownloadables

	return BenefitCreate{
		BenefitDownloadablesCreate: &downloadables,
		Type:                       typ,
	}
}

func CreateBenefitCreateGithubRepository(githubRepository BenefitGitHubRepositoryCreate) BenefitCreate {
	typ := BenefitCreateTypeGithubRepository

	return BenefitCreate{
		BenefitGitHubRepositoryCreate: &githubRepository,
		Type:                          typ,
	}
}

func CreateBenefitCreateLicenseKeys(licenseKeys BenefitLicenseKeysCreate) BenefitCreate {
	typ := BenefitCreateTypeLicenseKeys

	return BenefitCreate{
		BenefitLicenseKeysCreate: &licenseKeys,
		Type:                     typ,
	}
}

func (u *BenefitCreate) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "ads":
		benefitAdsCreate := new(BenefitAdsCreate)
		if err := utils.UnmarshalJSON(data, &benefitAdsCreate, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == ads) type BenefitAdsCreate within BenefitCreate: %w", string(data), err)
		}

		u.BenefitAdsCreate = benefitAdsCreate
		u.Type = BenefitCreateTypeAds
		return nil
	case "custom":
		benefitCustomCreate := new(BenefitCustomCreate)
		if err := utils.UnmarshalJSON(data, &benefitCustomCreate, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == custom) type BenefitCustomCreate within BenefitCreate: %w", string(data), err)
		}

		u.BenefitCustomCreate = benefitCustomCreate
		u.Type = BenefitCreateTypeCustom
		return nil
	case "discord":
		benefitDiscordCreate := new(BenefitDiscordCreate)
		if err := utils.UnmarshalJSON(data, &benefitDiscordCreate, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == discord) type BenefitDiscordCreate within BenefitCreate: %w", string(data), err)
		}

		u.BenefitDiscordCreate = benefitDiscordCreate
		u.Type = BenefitCreateTypeDiscord
		return nil
	case "downloadables":
		benefitDownloadablesCreate := new(BenefitDownloadablesCreate)
		if err := utils.UnmarshalJSON(data, &benefitDownloadablesCreate, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == downloadables) type BenefitDownloadablesCreate within BenefitCreate: %w", string(data), err)
		}

		u.BenefitDownloadablesCreate = benefitDownloadablesCreate
		u.Type = BenefitCreateTypeDownloadables
		return nil
	case "github_repository":
		benefitGitHubRepositoryCreate := new(BenefitGitHubRepositoryCreate)
		if err := utils.UnmarshalJSON(data, &benefitGitHubRepositoryCreate, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == github_repository) type BenefitGitHubRepositoryCreate within BenefitCreate: %w", string(data), err)
		}

		u.BenefitGitHubRepositoryCreate = benefitGitHubRepositoryCreate
		u.Type = BenefitCreateTypeGithubRepository
		return nil
	case "license_keys":
		benefitLicenseKeysCreate := new(BenefitLicenseKeysCreate)
		if err := utils.UnmarshalJSON(data, &benefitLicenseKeysCreate, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == license_keys) type BenefitLicenseKeysCreate within BenefitCreate: %w", string(data), err)
		}

		u.BenefitLicenseKeysCreate = benefitLicenseKeysCreate
		u.Type = BenefitCreateTypeLicenseKeys
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for BenefitCreate", string(data))
}

func (u BenefitCreate) MarshalJSON() ([]byte, error) {
	if u.BenefitCustomCreate != nil {
		return utils.MarshalJSON(u.BenefitCustomCreate, "", true)
	}

	if u.BenefitAdsCreate != nil {
		return utils.MarshalJSON(u.BenefitAdsCreate, "", true)
	}

	if u.BenefitDiscordCreate != nil {
		return utils.MarshalJSON(u.BenefitDiscordCreate, "", true)
	}

	if u.BenefitGitHubRepositoryCreate != nil {
		return utils.MarshalJSON(u.BenefitGitHubRepositoryCreate, "", true)
	}

	if u.BenefitDownloadablesCreate != nil {
		return utils.MarshalJSON(u.BenefitDownloadablesCreate, "", true)
	}

	if u.BenefitLicenseKeysCreate != nil {
		return utils.MarshalJSON(u.BenefitLicenseKeysCreate, "", true)
	}

	return nil, errors.New("could not marshal union type BenefitCreate: all fields are null")
}
