// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"polar/internal/utils"
	"polar/models/components"
)

type CustomFieldsListQueryParamOrganizationIDFilterType string

const (
	CustomFieldsListQueryParamOrganizationIDFilterTypeStr        CustomFieldsListQueryParamOrganizationIDFilterType = "str"
	CustomFieldsListQueryParamOrganizationIDFilterTypeArrayOfStr CustomFieldsListQueryParamOrganizationIDFilterType = "arrayOfStr"
)

// CustomFieldsListQueryParamOrganizationIDFilter - Filter by organization ID.
type CustomFieldsListQueryParamOrganizationIDFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type CustomFieldsListQueryParamOrganizationIDFilterType
}

func CreateCustomFieldsListQueryParamOrganizationIDFilterStr(str string) CustomFieldsListQueryParamOrganizationIDFilter {
	typ := CustomFieldsListQueryParamOrganizationIDFilterTypeStr

	return CustomFieldsListQueryParamOrganizationIDFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateCustomFieldsListQueryParamOrganizationIDFilterArrayOfStr(arrayOfStr []string) CustomFieldsListQueryParamOrganizationIDFilter {
	typ := CustomFieldsListQueryParamOrganizationIDFilterTypeArrayOfStr

	return CustomFieldsListQueryParamOrganizationIDFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CustomFieldsListQueryParamOrganizationIDFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CustomFieldsListQueryParamOrganizationIDFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CustomFieldsListQueryParamOrganizationIDFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomFieldsListQueryParamOrganizationIDFilter", string(data))
}

func (u CustomFieldsListQueryParamOrganizationIDFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CustomFieldsListQueryParamOrganizationIDFilter: all fields are null")
}

type CustomFieldTypeFilterType string

const (
	CustomFieldTypeFilterTypeCustomFieldType        CustomFieldTypeFilterType = "CustomFieldType"
	CustomFieldTypeFilterTypeArrayOfCustomFieldType CustomFieldTypeFilterType = "arrayOfCustomFieldType"
)

// CustomFieldTypeFilter - Filter by custom field type.
type CustomFieldTypeFilter struct {
	CustomFieldType        *components.CustomFieldType  `queryParam:"inline"`
	ArrayOfCustomFieldType []components.CustomFieldType `queryParam:"inline"`

	Type CustomFieldTypeFilterType
}

func CreateCustomFieldTypeFilterCustomFieldType(customFieldType components.CustomFieldType) CustomFieldTypeFilter {
	typ := CustomFieldTypeFilterTypeCustomFieldType

	return CustomFieldTypeFilter{
		CustomFieldType: &customFieldType,
		Type:            typ,
	}
}

func CreateCustomFieldTypeFilterArrayOfCustomFieldType(arrayOfCustomFieldType []components.CustomFieldType) CustomFieldTypeFilter {
	typ := CustomFieldTypeFilterTypeArrayOfCustomFieldType

	return CustomFieldTypeFilter{
		ArrayOfCustomFieldType: arrayOfCustomFieldType,
		Type:                   typ,
	}
}

func (u *CustomFieldTypeFilter) UnmarshalJSON(data []byte) error {

	var customFieldType components.CustomFieldType = components.CustomFieldType("")
	if err := utils.UnmarshalJSON(data, &customFieldType, "", true, true); err == nil {
		u.CustomFieldType = &customFieldType
		u.Type = CustomFieldTypeFilterTypeCustomFieldType
		return nil
	}

	var arrayOfCustomFieldType []components.CustomFieldType = []components.CustomFieldType{}
	if err := utils.UnmarshalJSON(data, &arrayOfCustomFieldType, "", true, true); err == nil {
		u.ArrayOfCustomFieldType = arrayOfCustomFieldType
		u.Type = CustomFieldTypeFilterTypeArrayOfCustomFieldType
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomFieldTypeFilter", string(data))
}

func (u CustomFieldTypeFilter) MarshalJSON() ([]byte, error) {
	if u.CustomFieldType != nil {
		return utils.MarshalJSON(u.CustomFieldType, "", true)
	}

	if u.ArrayOfCustomFieldType != nil {
		return utils.MarshalJSON(u.ArrayOfCustomFieldType, "", true)
	}

	return nil, errors.New("could not marshal union type CustomFieldTypeFilter: all fields are null")
}

type CustomFieldsListRequest struct {
	// Filter by organization ID.
	OrganizationID *CustomFieldsListQueryParamOrganizationIDFilter `queryParam:"style=form,explode=true,name=organization_id"`
	// Filter by custom field name or slug.
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Filter by custom field type.
	TypeFilter *CustomFieldTypeFilter `queryParam:"style=form,explode=true,name=type"`
	// Page number, defaults to 1.
	Page *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Size of a page, defaults to 10. Maximum is 100.
	Limit *int64 `default:"10" queryParam:"style=form,explode=true,name=limit"`
	// Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
	Sorting []components.CustomFieldSortProperty `queryParam:"style=form,explode=true,name=sorting"`
}

func (c CustomFieldsListRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CustomFieldsListRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CustomFieldsListRequest) GetOrganizationID() *CustomFieldsListQueryParamOrganizationIDFilter {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *CustomFieldsListRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *CustomFieldsListRequest) GetTypeFilter() *CustomFieldTypeFilter {
	if o == nil {
		return nil
	}
	return o.TypeFilter
}

func (o *CustomFieldsListRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *CustomFieldsListRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *CustomFieldsListRequest) GetSorting() []components.CustomFieldSortProperty {
	if o == nil {
		return nil
	}
	return o.Sorting
}

type CustomFieldsListResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful Response
	ListResourceCustomField *components.ListResourceCustomField

	Next func() (*CustomFieldsListResponse, error)
}

func (o *CustomFieldsListResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CustomFieldsListResponse) GetListResourceCustomField() *components.ListResourceCustomField {
	if o == nil {
		return nil
	}
	return o.ListResourceCustomField
}
