// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"polar/internal/utils"
	"polar/models/components"
)

type SubscriptionsListQueryParamOrganizationIDFilterType string

const (
	SubscriptionsListQueryParamOrganizationIDFilterTypeStr        SubscriptionsListQueryParamOrganizationIDFilterType = "str"
	SubscriptionsListQueryParamOrganizationIDFilterTypeArrayOfStr SubscriptionsListQueryParamOrganizationIDFilterType = "arrayOfStr"
)

// SubscriptionsListQueryParamOrganizationIDFilter - Filter by organization ID.
type SubscriptionsListQueryParamOrganizationIDFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type SubscriptionsListQueryParamOrganizationIDFilterType
}

func CreateSubscriptionsListQueryParamOrganizationIDFilterStr(str string) SubscriptionsListQueryParamOrganizationIDFilter {
	typ := SubscriptionsListQueryParamOrganizationIDFilterTypeStr

	return SubscriptionsListQueryParamOrganizationIDFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateSubscriptionsListQueryParamOrganizationIDFilterArrayOfStr(arrayOfStr []string) SubscriptionsListQueryParamOrganizationIDFilter {
	typ := SubscriptionsListQueryParamOrganizationIDFilterTypeArrayOfStr

	return SubscriptionsListQueryParamOrganizationIDFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *SubscriptionsListQueryParamOrganizationIDFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = SubscriptionsListQueryParamOrganizationIDFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = SubscriptionsListQueryParamOrganizationIDFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SubscriptionsListQueryParamOrganizationIDFilter", string(data))
}

func (u SubscriptionsListQueryParamOrganizationIDFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type SubscriptionsListQueryParamOrganizationIDFilter: all fields are null")
}

type ProductIDFilterType string

const (
	ProductIDFilterTypeStr        ProductIDFilterType = "str"
	ProductIDFilterTypeArrayOfStr ProductIDFilterType = "arrayOfStr"
)

// ProductIDFilter - Filter by product ID.
type ProductIDFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type ProductIDFilterType
}

func CreateProductIDFilterStr(str string) ProductIDFilter {
	typ := ProductIDFilterTypeStr

	return ProductIDFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateProductIDFilterArrayOfStr(arrayOfStr []string) ProductIDFilter {
	typ := ProductIDFilterTypeArrayOfStr

	return ProductIDFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *ProductIDFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ProductIDFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = ProductIDFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ProductIDFilter", string(data))
}

func (u ProductIDFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type ProductIDFilter: all fields are null")
}

type CustomerIDFilterType string

const (
	CustomerIDFilterTypeStr        CustomerIDFilterType = "str"
	CustomerIDFilterTypeArrayOfStr CustomerIDFilterType = "arrayOfStr"
)

// CustomerIDFilter - Filter by customer ID.
type CustomerIDFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type CustomerIDFilterType
}

func CreateCustomerIDFilterStr(str string) CustomerIDFilter {
	typ := CustomerIDFilterTypeStr

	return CustomerIDFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateCustomerIDFilterArrayOfStr(arrayOfStr []string) CustomerIDFilter {
	typ := CustomerIDFilterTypeArrayOfStr

	return CustomerIDFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CustomerIDFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CustomerIDFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CustomerIDFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomerIDFilter", string(data))
}

func (u CustomerIDFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CustomerIDFilter: all fields are null")
}

type DiscountIDFilterType string

const (
	DiscountIDFilterTypeStr        DiscountIDFilterType = "str"
	DiscountIDFilterTypeArrayOfStr DiscountIDFilterType = "arrayOfStr"
)

// DiscountIDFilter - Filter by discount ID.
type DiscountIDFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type DiscountIDFilterType
}

func CreateDiscountIDFilterStr(str string) DiscountIDFilter {
	typ := DiscountIDFilterTypeStr

	return DiscountIDFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateDiscountIDFilterArrayOfStr(arrayOfStr []string) DiscountIDFilter {
	typ := DiscountIDFilterTypeArrayOfStr

	return DiscountIDFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *DiscountIDFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = DiscountIDFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = DiscountIDFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DiscountIDFilter", string(data))
}

func (u DiscountIDFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type DiscountIDFilter: all fields are null")
}

type SubscriptionsListRequest struct {
	// Filter by organization ID.
	OrganizationID *SubscriptionsListQueryParamOrganizationIDFilter `queryParam:"style=form,explode=true,name=organization_id"`
	// Filter by product ID.
	ProductID *ProductIDFilter `queryParam:"style=form,explode=true,name=product_id"`
	// Filter by customer ID.
	CustomerID *CustomerIDFilter `queryParam:"style=form,explode=true,name=customer_id"`
	// Filter by discount ID.
	DiscountID *DiscountIDFilter `queryParam:"style=form,explode=true,name=discount_id"`
	// Filter by active or inactive subscription.
	Active *bool `queryParam:"style=form,explode=true,name=active"`
	// Page number, defaults to 1.
	Page *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Size of a page, defaults to 10. Maximum is 100.
	Limit *int64 `default:"10" queryParam:"style=form,explode=true,name=limit"`
	// Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
	Sorting []components.SubscriptionSortProperty `queryParam:"style=form,explode=true,name=sorting"`
}

func (s SubscriptionsListRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SubscriptionsListRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SubscriptionsListRequest) GetOrganizationID() *SubscriptionsListQueryParamOrganizationIDFilter {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *SubscriptionsListRequest) GetProductID() *ProductIDFilter {
	if o == nil {
		return nil
	}
	return o.ProductID
}

func (o *SubscriptionsListRequest) GetCustomerID() *CustomerIDFilter {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *SubscriptionsListRequest) GetDiscountID() *DiscountIDFilter {
	if o == nil {
		return nil
	}
	return o.DiscountID
}

func (o *SubscriptionsListRequest) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *SubscriptionsListRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *SubscriptionsListRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *SubscriptionsListRequest) GetSorting() []components.SubscriptionSortProperty {
	if o == nil {
		return nil
	}
	return o.Sorting
}

type SubscriptionsListResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful Response
	ListResourceSubscription *components.ListResourceSubscription

	Next func() (*SubscriptionsListResponse, error)
}

func (o *SubscriptionsListResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *SubscriptionsListResponse) GetListResourceSubscription() *components.ListResourceSubscription {
	if o == nil {
		return nil
	}
	return o.ListResourceSubscription
}
