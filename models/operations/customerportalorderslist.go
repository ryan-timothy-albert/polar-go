// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
	"github.com/polarsource/polar-go/models/components"
)

type CustomerPortalOrdersListQueryParamOrganizationIDFilterType string

const (
	CustomerPortalOrdersListQueryParamOrganizationIDFilterTypeStr        CustomerPortalOrdersListQueryParamOrganizationIDFilterType = "str"
	CustomerPortalOrdersListQueryParamOrganizationIDFilterTypeArrayOfStr CustomerPortalOrdersListQueryParamOrganizationIDFilterType = "arrayOfStr"
)

// CustomerPortalOrdersListQueryParamOrganizationIDFilter - Filter by organization ID.
type CustomerPortalOrdersListQueryParamOrganizationIDFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type CustomerPortalOrdersListQueryParamOrganizationIDFilterType
}

func CreateCustomerPortalOrdersListQueryParamOrganizationIDFilterStr(str string) CustomerPortalOrdersListQueryParamOrganizationIDFilter {
	typ := CustomerPortalOrdersListQueryParamOrganizationIDFilterTypeStr

	return CustomerPortalOrdersListQueryParamOrganizationIDFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateCustomerPortalOrdersListQueryParamOrganizationIDFilterArrayOfStr(arrayOfStr []string) CustomerPortalOrdersListQueryParamOrganizationIDFilter {
	typ := CustomerPortalOrdersListQueryParamOrganizationIDFilterTypeArrayOfStr

	return CustomerPortalOrdersListQueryParamOrganizationIDFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CustomerPortalOrdersListQueryParamOrganizationIDFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CustomerPortalOrdersListQueryParamOrganizationIDFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CustomerPortalOrdersListQueryParamOrganizationIDFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomerPortalOrdersListQueryParamOrganizationIDFilter", string(data))
}

func (u CustomerPortalOrdersListQueryParamOrganizationIDFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CustomerPortalOrdersListQueryParamOrganizationIDFilter: all fields are null")
}

type CustomerPortalOrdersListQueryParamProductIDFilterType string

const (
	CustomerPortalOrdersListQueryParamProductIDFilterTypeStr        CustomerPortalOrdersListQueryParamProductIDFilterType = "str"
	CustomerPortalOrdersListQueryParamProductIDFilterTypeArrayOfStr CustomerPortalOrdersListQueryParamProductIDFilterType = "arrayOfStr"
)

// CustomerPortalOrdersListQueryParamProductIDFilter - Filter by product ID.
type CustomerPortalOrdersListQueryParamProductIDFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type CustomerPortalOrdersListQueryParamProductIDFilterType
}

func CreateCustomerPortalOrdersListQueryParamProductIDFilterStr(str string) CustomerPortalOrdersListQueryParamProductIDFilter {
	typ := CustomerPortalOrdersListQueryParamProductIDFilterTypeStr

	return CustomerPortalOrdersListQueryParamProductIDFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateCustomerPortalOrdersListQueryParamProductIDFilterArrayOfStr(arrayOfStr []string) CustomerPortalOrdersListQueryParamProductIDFilter {
	typ := CustomerPortalOrdersListQueryParamProductIDFilterTypeArrayOfStr

	return CustomerPortalOrdersListQueryParamProductIDFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CustomerPortalOrdersListQueryParamProductIDFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CustomerPortalOrdersListQueryParamProductIDFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CustomerPortalOrdersListQueryParamProductIDFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomerPortalOrdersListQueryParamProductIDFilter", string(data))
}

func (u CustomerPortalOrdersListQueryParamProductIDFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CustomerPortalOrdersListQueryParamProductIDFilter: all fields are null")
}

type CustomerPortalOrdersListQueryParamProductPriceTypeFilterType string

const (
	CustomerPortalOrdersListQueryParamProductPriceTypeFilterTypeProductPriceType        CustomerPortalOrdersListQueryParamProductPriceTypeFilterType = "ProductPriceType"
	CustomerPortalOrdersListQueryParamProductPriceTypeFilterTypeArrayOfProductPriceType CustomerPortalOrdersListQueryParamProductPriceTypeFilterType = "arrayOfProductPriceType"
)

// CustomerPortalOrdersListQueryParamProductPriceTypeFilter - Filter by product price type. `recurring` will return orders corresponding to subscriptions creations or renewals. `one_time` will return orders corresponding to one-time purchases.
type CustomerPortalOrdersListQueryParamProductPriceTypeFilter struct {
	ProductPriceType        *components.ProductPriceType  `queryParam:"inline"`
	ArrayOfProductPriceType []components.ProductPriceType `queryParam:"inline"`

	Type CustomerPortalOrdersListQueryParamProductPriceTypeFilterType
}

func CreateCustomerPortalOrdersListQueryParamProductPriceTypeFilterProductPriceType(productPriceType components.ProductPriceType) CustomerPortalOrdersListQueryParamProductPriceTypeFilter {
	typ := CustomerPortalOrdersListQueryParamProductPriceTypeFilterTypeProductPriceType

	return CustomerPortalOrdersListQueryParamProductPriceTypeFilter{
		ProductPriceType: &productPriceType,
		Type:             typ,
	}
}

func CreateCustomerPortalOrdersListQueryParamProductPriceTypeFilterArrayOfProductPriceType(arrayOfProductPriceType []components.ProductPriceType) CustomerPortalOrdersListQueryParamProductPriceTypeFilter {
	typ := CustomerPortalOrdersListQueryParamProductPriceTypeFilterTypeArrayOfProductPriceType

	return CustomerPortalOrdersListQueryParamProductPriceTypeFilter{
		ArrayOfProductPriceType: arrayOfProductPriceType,
		Type:                    typ,
	}
}

func (u *CustomerPortalOrdersListQueryParamProductPriceTypeFilter) UnmarshalJSON(data []byte) error {

	var productPriceType components.ProductPriceType = components.ProductPriceType("")
	if err := utils.UnmarshalJSON(data, &productPriceType, "", true, true); err == nil {
		u.ProductPriceType = &productPriceType
		u.Type = CustomerPortalOrdersListQueryParamProductPriceTypeFilterTypeProductPriceType
		return nil
	}

	var arrayOfProductPriceType []components.ProductPriceType = []components.ProductPriceType{}
	if err := utils.UnmarshalJSON(data, &arrayOfProductPriceType, "", true, true); err == nil {
		u.ArrayOfProductPriceType = arrayOfProductPriceType
		u.Type = CustomerPortalOrdersListQueryParamProductPriceTypeFilterTypeArrayOfProductPriceType
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomerPortalOrdersListQueryParamProductPriceTypeFilter", string(data))
}

func (u CustomerPortalOrdersListQueryParamProductPriceTypeFilter) MarshalJSON() ([]byte, error) {
	if u.ProductPriceType != nil {
		return utils.MarshalJSON(u.ProductPriceType, "", true)
	}

	if u.ArrayOfProductPriceType != nil {
		return utils.MarshalJSON(u.ArrayOfProductPriceType, "", true)
	}

	return nil, errors.New("could not marshal union type CustomerPortalOrdersListQueryParamProductPriceTypeFilter: all fields are null")
}

type QueryParamSubscriptionIDFilterType string

const (
	QueryParamSubscriptionIDFilterTypeStr        QueryParamSubscriptionIDFilterType = "str"
	QueryParamSubscriptionIDFilterTypeArrayOfStr QueryParamSubscriptionIDFilterType = "arrayOfStr"
)

// QueryParamSubscriptionIDFilter - Filter by subscription ID.
type QueryParamSubscriptionIDFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type QueryParamSubscriptionIDFilterType
}

func CreateQueryParamSubscriptionIDFilterStr(str string) QueryParamSubscriptionIDFilter {
	typ := QueryParamSubscriptionIDFilterTypeStr

	return QueryParamSubscriptionIDFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateQueryParamSubscriptionIDFilterArrayOfStr(arrayOfStr []string) QueryParamSubscriptionIDFilter {
	typ := QueryParamSubscriptionIDFilterTypeArrayOfStr

	return QueryParamSubscriptionIDFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *QueryParamSubscriptionIDFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = QueryParamSubscriptionIDFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = QueryParamSubscriptionIDFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for QueryParamSubscriptionIDFilter", string(data))
}

func (u QueryParamSubscriptionIDFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type QueryParamSubscriptionIDFilter: all fields are null")
}

type CustomerPortalOrdersListRequest struct {
	// Filter by organization ID.
	OrganizationID *CustomerPortalOrdersListQueryParamOrganizationIDFilter `queryParam:"style=form,explode=true,name=organization_id"`
	// Filter by product ID.
	ProductID *CustomerPortalOrdersListQueryParamProductIDFilter `queryParam:"style=form,explode=true,name=product_id"`
	// Filter by product price type. `recurring` will return orders corresponding to subscriptions creations or renewals. `one_time` will return orders corresponding to one-time purchases.
	ProductPriceType *CustomerPortalOrdersListQueryParamProductPriceTypeFilter `queryParam:"style=form,explode=true,name=product_price_type"`
	// Filter by subscription ID.
	SubscriptionID *QueryParamSubscriptionIDFilter `queryParam:"style=form,explode=true,name=subscription_id"`
	// Search by product or organization name.
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Page number, defaults to 1.
	Page *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Size of a page, defaults to 10. Maximum is 100.
	Limit *int64 `default:"10" queryParam:"style=form,explode=true,name=limit"`
	// Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
	Sorting []components.CustomerOrderSortProperty `queryParam:"style=form,explode=true,name=sorting"`
}

func (c CustomerPortalOrdersListRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CustomerPortalOrdersListRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CustomerPortalOrdersListRequest) GetOrganizationID() *CustomerPortalOrdersListQueryParamOrganizationIDFilter {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *CustomerPortalOrdersListRequest) GetProductID() *CustomerPortalOrdersListQueryParamProductIDFilter {
	if o == nil {
		return nil
	}
	return o.ProductID
}

func (o *CustomerPortalOrdersListRequest) GetProductPriceType() *CustomerPortalOrdersListQueryParamProductPriceTypeFilter {
	if o == nil {
		return nil
	}
	return o.ProductPriceType
}

func (o *CustomerPortalOrdersListRequest) GetSubscriptionID() *QueryParamSubscriptionIDFilter {
	if o == nil {
		return nil
	}
	return o.SubscriptionID
}

func (o *CustomerPortalOrdersListRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *CustomerPortalOrdersListRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *CustomerPortalOrdersListRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *CustomerPortalOrdersListRequest) GetSorting() []components.CustomerOrderSortProperty {
	if o == nil {
		return nil
	}
	return o.Sorting
}

type CustomerPortalOrdersListResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful Response
	ListResourceCustomerOrder *components.ListResourceCustomerOrder

	Next func() (*CustomerPortalOrdersListResponse, error)
}

func (o *CustomerPortalOrdersListResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CustomerPortalOrdersListResponse) GetListResourceCustomerOrder() *components.ListResourceCustomerOrder {
	if o == nil {
		return nil
	}
	return o.ListResourceCustomerOrder
}
