// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"polar/internal/utils"
	"polar/models/components"
)

type CustomerPortalDownloadablesListQueryParamOrganizationIDFilterType string

const (
	CustomerPortalDownloadablesListQueryParamOrganizationIDFilterTypeStr        CustomerPortalDownloadablesListQueryParamOrganizationIDFilterType = "str"
	CustomerPortalDownloadablesListQueryParamOrganizationIDFilterTypeArrayOfStr CustomerPortalDownloadablesListQueryParamOrganizationIDFilterType = "arrayOfStr"
)

// CustomerPortalDownloadablesListQueryParamOrganizationIDFilter - Filter by organization ID.
type CustomerPortalDownloadablesListQueryParamOrganizationIDFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type CustomerPortalDownloadablesListQueryParamOrganizationIDFilterType
}

func CreateCustomerPortalDownloadablesListQueryParamOrganizationIDFilterStr(str string) CustomerPortalDownloadablesListQueryParamOrganizationIDFilter {
	typ := CustomerPortalDownloadablesListQueryParamOrganizationIDFilterTypeStr

	return CustomerPortalDownloadablesListQueryParamOrganizationIDFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateCustomerPortalDownloadablesListQueryParamOrganizationIDFilterArrayOfStr(arrayOfStr []string) CustomerPortalDownloadablesListQueryParamOrganizationIDFilter {
	typ := CustomerPortalDownloadablesListQueryParamOrganizationIDFilterTypeArrayOfStr

	return CustomerPortalDownloadablesListQueryParamOrganizationIDFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CustomerPortalDownloadablesListQueryParamOrganizationIDFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CustomerPortalDownloadablesListQueryParamOrganizationIDFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CustomerPortalDownloadablesListQueryParamOrganizationIDFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomerPortalDownloadablesListQueryParamOrganizationIDFilter", string(data))
}

func (u CustomerPortalDownloadablesListQueryParamOrganizationIDFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CustomerPortalDownloadablesListQueryParamOrganizationIDFilter: all fields are null")
}

type CustomerPortalDownloadablesListQueryParamBenefitIDFilterType string

const (
	CustomerPortalDownloadablesListQueryParamBenefitIDFilterTypeStr        CustomerPortalDownloadablesListQueryParamBenefitIDFilterType = "str"
	CustomerPortalDownloadablesListQueryParamBenefitIDFilterTypeArrayOfStr CustomerPortalDownloadablesListQueryParamBenefitIDFilterType = "arrayOfStr"
)

// CustomerPortalDownloadablesListQueryParamBenefitIDFilter - Filter by benefit ID.
type CustomerPortalDownloadablesListQueryParamBenefitIDFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type CustomerPortalDownloadablesListQueryParamBenefitIDFilterType
}

func CreateCustomerPortalDownloadablesListQueryParamBenefitIDFilterStr(str string) CustomerPortalDownloadablesListQueryParamBenefitIDFilter {
	typ := CustomerPortalDownloadablesListQueryParamBenefitIDFilterTypeStr

	return CustomerPortalDownloadablesListQueryParamBenefitIDFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateCustomerPortalDownloadablesListQueryParamBenefitIDFilterArrayOfStr(arrayOfStr []string) CustomerPortalDownloadablesListQueryParamBenefitIDFilter {
	typ := CustomerPortalDownloadablesListQueryParamBenefitIDFilterTypeArrayOfStr

	return CustomerPortalDownloadablesListQueryParamBenefitIDFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CustomerPortalDownloadablesListQueryParamBenefitIDFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CustomerPortalDownloadablesListQueryParamBenefitIDFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CustomerPortalDownloadablesListQueryParamBenefitIDFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomerPortalDownloadablesListQueryParamBenefitIDFilter", string(data))
}

func (u CustomerPortalDownloadablesListQueryParamBenefitIDFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CustomerPortalDownloadablesListQueryParamBenefitIDFilter: all fields are null")
}

type CustomerPortalDownloadablesListRequest struct {
	// Filter by organization ID.
	OrganizationID *CustomerPortalDownloadablesListQueryParamOrganizationIDFilter `queryParam:"style=form,explode=true,name=organization_id"`
	// Filter by benefit ID.
	BenefitID *CustomerPortalDownloadablesListQueryParamBenefitIDFilter `queryParam:"style=form,explode=true,name=benefit_id"`
	// Page number, defaults to 1.
	Page *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Size of a page, defaults to 10. Maximum is 100.
	Limit *int64 `default:"10" queryParam:"style=form,explode=true,name=limit"`
}

func (c CustomerPortalDownloadablesListRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CustomerPortalDownloadablesListRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CustomerPortalDownloadablesListRequest) GetOrganizationID() *CustomerPortalDownloadablesListQueryParamOrganizationIDFilter {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *CustomerPortalDownloadablesListRequest) GetBenefitID() *CustomerPortalDownloadablesListQueryParamBenefitIDFilter {
	if o == nil {
		return nil
	}
	return o.BenefitID
}

func (o *CustomerPortalDownloadablesListRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *CustomerPortalDownloadablesListRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

type CustomerPortalDownloadablesListResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful Response
	ListResourceDownloadableRead *components.ListResourceDownloadableRead

	Next func() (*CustomerPortalDownloadablesListResponse, error)
}

func (o *CustomerPortalDownloadablesListResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CustomerPortalDownloadablesListResponse) GetListResourceDownloadableRead() *components.ListResourceDownloadableRead {
	if o == nil {
		return nil
	}
	return o.ListResourceDownloadableRead
}
