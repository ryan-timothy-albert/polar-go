// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
	"github.com/polarsource/polar-go/models/components"
)

type QueryParamCustomerIDFilterType string

const (
	QueryParamCustomerIDFilterTypeStr        QueryParamCustomerIDFilterType = "str"
	QueryParamCustomerIDFilterTypeArrayOfStr QueryParamCustomerIDFilterType = "arrayOfStr"
)

// QueryParamCustomerIDFilter - Filter by customer.
type QueryParamCustomerIDFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type QueryParamCustomerIDFilterType
}

func CreateQueryParamCustomerIDFilterStr(str string) QueryParamCustomerIDFilter {
	typ := QueryParamCustomerIDFilterTypeStr

	return QueryParamCustomerIDFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateQueryParamCustomerIDFilterArrayOfStr(arrayOfStr []string) QueryParamCustomerIDFilter {
	typ := QueryParamCustomerIDFilterTypeArrayOfStr

	return QueryParamCustomerIDFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *QueryParamCustomerIDFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = QueryParamCustomerIDFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = QueryParamCustomerIDFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for QueryParamCustomerIDFilter", string(data))
}

func (u QueryParamCustomerIDFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type QueryParamCustomerIDFilter: all fields are null")
}

type BenefitsGrantsRequest struct {
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Filter by granted status. If `true`, only granted benefits will be returned. If `false`, only revoked benefits will be returned.
	IsGranted *bool `queryParam:"style=form,explode=true,name=is_granted"`
	// Filter by customer.
	CustomerID *QueryParamCustomerIDFilter `queryParam:"style=form,explode=true,name=customer_id"`
	// Page number, defaults to 1.
	Page *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Size of a page, defaults to 10. Maximum is 100.
	Limit *int64 `default:"10" queryParam:"style=form,explode=true,name=limit"`
}

func (b BenefitsGrantsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BenefitsGrantsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BenefitsGrantsRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *BenefitsGrantsRequest) GetIsGranted() *bool {
	if o == nil {
		return nil
	}
	return o.IsGranted
}

func (o *BenefitsGrantsRequest) GetCustomerID() *QueryParamCustomerIDFilter {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *BenefitsGrantsRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *BenefitsGrantsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

type BenefitsGrantsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful Response
	ListResourceBenefitGrant *components.ListResourceBenefitGrant

	Next func() (*BenefitsGrantsResponse, error)
}

func (o *BenefitsGrantsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *BenefitsGrantsResponse) GetListResourceBenefitGrant() *components.ListResourceBenefitGrant {
	if o == nil {
		return nil
	}
	return o.ListResourceBenefitGrant
}
