// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
	"github.com/polarsource/polar-go/models/components"
)

type BenefitsUpdateBenefitUpdateType string

const (
	BenefitsUpdateBenefitUpdateTypeBenefitAdsUpdate              BenefitsUpdateBenefitUpdateType = "BenefitAdsUpdate"
	BenefitsUpdateBenefitUpdateTypeBenefitCustomUpdate           BenefitsUpdateBenefitUpdateType = "BenefitCustomUpdate"
	BenefitsUpdateBenefitUpdateTypeBenefitDiscordUpdate          BenefitsUpdateBenefitUpdateType = "BenefitDiscordUpdate"
	BenefitsUpdateBenefitUpdateTypeBenefitGitHubRepositoryUpdate BenefitsUpdateBenefitUpdateType = "BenefitGitHubRepositoryUpdate"
	BenefitsUpdateBenefitUpdateTypeBenefitDownloadablesUpdate    BenefitsUpdateBenefitUpdateType = "BenefitDownloadablesUpdate"
	BenefitsUpdateBenefitUpdateTypeBenefitLicenseKeysUpdate      BenefitsUpdateBenefitUpdateType = "BenefitLicenseKeysUpdate"
)

type BenefitsUpdateBenefitUpdate struct {
	BenefitAdsUpdate              *components.BenefitAdsUpdate              `queryParam:"inline"`
	BenefitCustomUpdate           *components.BenefitCustomUpdate           `queryParam:"inline"`
	BenefitDiscordUpdate          *components.BenefitDiscordUpdate          `queryParam:"inline"`
	BenefitGitHubRepositoryUpdate *components.BenefitGitHubRepositoryUpdate `queryParam:"inline"`
	BenefitDownloadablesUpdate    *components.BenefitDownloadablesUpdate    `queryParam:"inline"`
	BenefitLicenseKeysUpdate      *components.BenefitLicenseKeysUpdate      `queryParam:"inline"`

	Type BenefitsUpdateBenefitUpdateType
}

func CreateBenefitsUpdateBenefitUpdateBenefitAdsUpdate(benefitAdsUpdate components.BenefitAdsUpdate) BenefitsUpdateBenefitUpdate {
	typ := BenefitsUpdateBenefitUpdateTypeBenefitAdsUpdate

	return BenefitsUpdateBenefitUpdate{
		BenefitAdsUpdate: &benefitAdsUpdate,
		Type:             typ,
	}
}

func CreateBenefitsUpdateBenefitUpdateBenefitCustomUpdate(benefitCustomUpdate components.BenefitCustomUpdate) BenefitsUpdateBenefitUpdate {
	typ := BenefitsUpdateBenefitUpdateTypeBenefitCustomUpdate

	return BenefitsUpdateBenefitUpdate{
		BenefitCustomUpdate: &benefitCustomUpdate,
		Type:                typ,
	}
}

func CreateBenefitsUpdateBenefitUpdateBenefitDiscordUpdate(benefitDiscordUpdate components.BenefitDiscordUpdate) BenefitsUpdateBenefitUpdate {
	typ := BenefitsUpdateBenefitUpdateTypeBenefitDiscordUpdate

	return BenefitsUpdateBenefitUpdate{
		BenefitDiscordUpdate: &benefitDiscordUpdate,
		Type:                 typ,
	}
}

func CreateBenefitsUpdateBenefitUpdateBenefitGitHubRepositoryUpdate(benefitGitHubRepositoryUpdate components.BenefitGitHubRepositoryUpdate) BenefitsUpdateBenefitUpdate {
	typ := BenefitsUpdateBenefitUpdateTypeBenefitGitHubRepositoryUpdate

	return BenefitsUpdateBenefitUpdate{
		BenefitGitHubRepositoryUpdate: &benefitGitHubRepositoryUpdate,
		Type:                          typ,
	}
}

func CreateBenefitsUpdateBenefitUpdateBenefitDownloadablesUpdate(benefitDownloadablesUpdate components.BenefitDownloadablesUpdate) BenefitsUpdateBenefitUpdate {
	typ := BenefitsUpdateBenefitUpdateTypeBenefitDownloadablesUpdate

	return BenefitsUpdateBenefitUpdate{
		BenefitDownloadablesUpdate: &benefitDownloadablesUpdate,
		Type:                       typ,
	}
}

func CreateBenefitsUpdateBenefitUpdateBenefitLicenseKeysUpdate(benefitLicenseKeysUpdate components.BenefitLicenseKeysUpdate) BenefitsUpdateBenefitUpdate {
	typ := BenefitsUpdateBenefitUpdateTypeBenefitLicenseKeysUpdate

	return BenefitsUpdateBenefitUpdate{
		BenefitLicenseKeysUpdate: &benefitLicenseKeysUpdate,
		Type:                     typ,
	}
}

func (u *BenefitsUpdateBenefitUpdate) UnmarshalJSON(data []byte) error {

	var benefitAdsUpdate components.BenefitAdsUpdate = components.BenefitAdsUpdate{}
	if err := utils.UnmarshalJSON(data, &benefitAdsUpdate, "", true, true); err == nil {
		u.BenefitAdsUpdate = &benefitAdsUpdate
		u.Type = BenefitsUpdateBenefitUpdateTypeBenefitAdsUpdate
		return nil
	}

	var benefitCustomUpdate components.BenefitCustomUpdate = components.BenefitCustomUpdate{}
	if err := utils.UnmarshalJSON(data, &benefitCustomUpdate, "", true, true); err == nil {
		u.BenefitCustomUpdate = &benefitCustomUpdate
		u.Type = BenefitsUpdateBenefitUpdateTypeBenefitCustomUpdate
		return nil
	}

	var benefitDiscordUpdate components.BenefitDiscordUpdate = components.BenefitDiscordUpdate{}
	if err := utils.UnmarshalJSON(data, &benefitDiscordUpdate, "", true, true); err == nil {
		u.BenefitDiscordUpdate = &benefitDiscordUpdate
		u.Type = BenefitsUpdateBenefitUpdateTypeBenefitDiscordUpdate
		return nil
	}

	var benefitGitHubRepositoryUpdate components.BenefitGitHubRepositoryUpdate = components.BenefitGitHubRepositoryUpdate{}
	if err := utils.UnmarshalJSON(data, &benefitGitHubRepositoryUpdate, "", true, true); err == nil {
		u.BenefitGitHubRepositoryUpdate = &benefitGitHubRepositoryUpdate
		u.Type = BenefitsUpdateBenefitUpdateTypeBenefitGitHubRepositoryUpdate
		return nil
	}

	var benefitDownloadablesUpdate components.BenefitDownloadablesUpdate = components.BenefitDownloadablesUpdate{}
	if err := utils.UnmarshalJSON(data, &benefitDownloadablesUpdate, "", true, true); err == nil {
		u.BenefitDownloadablesUpdate = &benefitDownloadablesUpdate
		u.Type = BenefitsUpdateBenefitUpdateTypeBenefitDownloadablesUpdate
		return nil
	}

	var benefitLicenseKeysUpdate components.BenefitLicenseKeysUpdate = components.BenefitLicenseKeysUpdate{}
	if err := utils.UnmarshalJSON(data, &benefitLicenseKeysUpdate, "", true, true); err == nil {
		u.BenefitLicenseKeysUpdate = &benefitLicenseKeysUpdate
		u.Type = BenefitsUpdateBenefitUpdateTypeBenefitLicenseKeysUpdate
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for BenefitsUpdateBenefitUpdate", string(data))
}

func (u BenefitsUpdateBenefitUpdate) MarshalJSON() ([]byte, error) {
	if u.BenefitAdsUpdate != nil {
		return utils.MarshalJSON(u.BenefitAdsUpdate, "", true)
	}

	if u.BenefitCustomUpdate != nil {
		return utils.MarshalJSON(u.BenefitCustomUpdate, "", true)
	}

	if u.BenefitDiscordUpdate != nil {
		return utils.MarshalJSON(u.BenefitDiscordUpdate, "", true)
	}

	if u.BenefitGitHubRepositoryUpdate != nil {
		return utils.MarshalJSON(u.BenefitGitHubRepositoryUpdate, "", true)
	}

	if u.BenefitDownloadablesUpdate != nil {
		return utils.MarshalJSON(u.BenefitDownloadablesUpdate, "", true)
	}

	if u.BenefitLicenseKeysUpdate != nil {
		return utils.MarshalJSON(u.BenefitLicenseKeysUpdate, "", true)
	}

	return nil, errors.New("could not marshal union type BenefitsUpdateBenefitUpdate: all fields are null")
}

type BenefitsUpdateRequest struct {
	ID          string                      `pathParam:"style=simple,explode=false,name=id"`
	RequestBody BenefitsUpdateBenefitUpdate `request:"mediaType=application/json"`
}

func (o *BenefitsUpdateRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *BenefitsUpdateRequest) GetRequestBody() BenefitsUpdateBenefitUpdate {
	if o == nil {
		return BenefitsUpdateBenefitUpdate{}
	}
	return o.RequestBody
}

type BenefitsUpdateResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Benefit updated.
	Benefit *components.Benefit
}

func (o *BenefitsUpdateResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *BenefitsUpdateResponse) GetBenefit() *components.Benefit {
	if o == nil {
		return nil
	}
	return o.Benefit
}
