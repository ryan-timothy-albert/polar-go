// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
	"github.com/polarsource/polar-go/models/components"
)

type Oauth2AuthorizeResponseOauth2AuthorizeType string

const (
	Oauth2AuthorizeResponseOauth2AuthorizeTypeUser         Oauth2AuthorizeResponseOauth2AuthorizeType = "user"
	Oauth2AuthorizeResponseOauth2AuthorizeTypeOrganization Oauth2AuthorizeResponseOauth2AuthorizeType = "organization"
)

// Oauth2AuthorizeResponseOauth2Authorize - Successful Response
type Oauth2AuthorizeResponseOauth2Authorize struct {
	AuthorizeResponseUser         *components.AuthorizeResponseUser         `queryParam:"inline"`
	AuthorizeResponseOrganization *components.AuthorizeResponseOrganization `queryParam:"inline"`

	Type Oauth2AuthorizeResponseOauth2AuthorizeType
}

func CreateOauth2AuthorizeResponseOauth2AuthorizeUser(user components.AuthorizeResponseUser) Oauth2AuthorizeResponseOauth2Authorize {
	typ := Oauth2AuthorizeResponseOauth2AuthorizeTypeUser

	return Oauth2AuthorizeResponseOauth2Authorize{
		AuthorizeResponseUser: &user,
		Type:                  typ,
	}
}

func CreateOauth2AuthorizeResponseOauth2AuthorizeOrganization(organization components.AuthorizeResponseOrganization) Oauth2AuthorizeResponseOauth2Authorize {
	typ := Oauth2AuthorizeResponseOauth2AuthorizeTypeOrganization

	return Oauth2AuthorizeResponseOauth2Authorize{
		AuthorizeResponseOrganization: &organization,
		Type:                          typ,
	}
}

func (u *Oauth2AuthorizeResponseOauth2Authorize) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		SubType string `json:"sub_type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.SubType {
	case "user":
		authorizeResponseUser := new(components.AuthorizeResponseUser)
		if err := utils.UnmarshalJSON(data, &authorizeResponseUser, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (SubType == user) type components.AuthorizeResponseUser within Oauth2AuthorizeResponseOauth2Authorize: %w", string(data), err)
		}

		u.AuthorizeResponseUser = authorizeResponseUser
		u.Type = Oauth2AuthorizeResponseOauth2AuthorizeTypeUser
		return nil
	case "organization":
		authorizeResponseOrganization := new(components.AuthorizeResponseOrganization)
		if err := utils.UnmarshalJSON(data, &authorizeResponseOrganization, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (SubType == organization) type components.AuthorizeResponseOrganization within Oauth2AuthorizeResponseOauth2Authorize: %w", string(data), err)
		}

		u.AuthorizeResponseOrganization = authorizeResponseOrganization
		u.Type = Oauth2AuthorizeResponseOauth2AuthorizeTypeOrganization
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Oauth2AuthorizeResponseOauth2Authorize", string(data))
}

func (u Oauth2AuthorizeResponseOauth2Authorize) MarshalJSON() ([]byte, error) {
	if u.AuthorizeResponseUser != nil {
		return utils.MarshalJSON(u.AuthorizeResponseUser, "", true)
	}

	if u.AuthorizeResponseOrganization != nil {
		return utils.MarshalJSON(u.AuthorizeResponseOrganization, "", true)
	}

	return nil, errors.New("could not marshal union type Oauth2AuthorizeResponseOauth2Authorize: all fields are null")
}

type Oauth2AuthorizeResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful Response
	ResponseOauth2Authorize *Oauth2AuthorizeResponseOauth2Authorize
}

func (o *Oauth2AuthorizeResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *Oauth2AuthorizeResponse) GetResponseOauth2Authorize() *Oauth2AuthorizeResponseOauth2Authorize {
	if o == nil {
		return nil
	}
	return o.ResponseOauth2Authorize
}

func (o *Oauth2AuthorizeResponse) GetResponseOauth2AuthorizeUser() *components.AuthorizeResponseUser {
	if v := o.GetResponseOauth2Authorize(); v != nil {
		return v.AuthorizeResponseUser
	}
	return nil
}

func (o *Oauth2AuthorizeResponse) GetResponseOauth2AuthorizeOrganization() *components.AuthorizeResponseOrganization {
	if v := o.GetResponseOauth2Authorize(); v != nil {
		return v.AuthorizeResponseOrganization
	}
	return nil
}
