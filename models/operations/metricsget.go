// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
	"github.com/polarsource/polar-go/models/components"
	"github.com/polarsource/polar-go/types"
)

type MetricsGetQueryParamOrganizationIDFilterType string

const (
	MetricsGetQueryParamOrganizationIDFilterTypeStr        MetricsGetQueryParamOrganizationIDFilterType = "str"
	MetricsGetQueryParamOrganizationIDFilterTypeArrayOfStr MetricsGetQueryParamOrganizationIDFilterType = "arrayOfStr"
)

// MetricsGetQueryParamOrganizationIDFilter - Filter by organization ID.
type MetricsGetQueryParamOrganizationIDFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type MetricsGetQueryParamOrganizationIDFilterType
}

func CreateMetricsGetQueryParamOrganizationIDFilterStr(str string) MetricsGetQueryParamOrganizationIDFilter {
	typ := MetricsGetQueryParamOrganizationIDFilterTypeStr

	return MetricsGetQueryParamOrganizationIDFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateMetricsGetQueryParamOrganizationIDFilterArrayOfStr(arrayOfStr []string) MetricsGetQueryParamOrganizationIDFilter {
	typ := MetricsGetQueryParamOrganizationIDFilterTypeArrayOfStr

	return MetricsGetQueryParamOrganizationIDFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *MetricsGetQueryParamOrganizationIDFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = MetricsGetQueryParamOrganizationIDFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = MetricsGetQueryParamOrganizationIDFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for MetricsGetQueryParamOrganizationIDFilter", string(data))
}

func (u MetricsGetQueryParamOrganizationIDFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type MetricsGetQueryParamOrganizationIDFilter: all fields are null")
}

type MetricsGetQueryParamProductIDFilterType string

const (
	MetricsGetQueryParamProductIDFilterTypeStr        MetricsGetQueryParamProductIDFilterType = "str"
	MetricsGetQueryParamProductIDFilterTypeArrayOfStr MetricsGetQueryParamProductIDFilterType = "arrayOfStr"
)

// MetricsGetQueryParamProductIDFilter - Filter by product ID.
type MetricsGetQueryParamProductIDFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type MetricsGetQueryParamProductIDFilterType
}

func CreateMetricsGetQueryParamProductIDFilterStr(str string) MetricsGetQueryParamProductIDFilter {
	typ := MetricsGetQueryParamProductIDFilterTypeStr

	return MetricsGetQueryParamProductIDFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateMetricsGetQueryParamProductIDFilterArrayOfStr(arrayOfStr []string) MetricsGetQueryParamProductIDFilter {
	typ := MetricsGetQueryParamProductIDFilterTypeArrayOfStr

	return MetricsGetQueryParamProductIDFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *MetricsGetQueryParamProductIDFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = MetricsGetQueryParamProductIDFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = MetricsGetQueryParamProductIDFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for MetricsGetQueryParamProductIDFilter", string(data))
}

func (u MetricsGetQueryParamProductIDFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type MetricsGetQueryParamProductIDFilter: all fields are null")
}

type QueryParamProductPriceTypeFilterType string

const (
	QueryParamProductPriceTypeFilterTypeProductPriceType        QueryParamProductPriceTypeFilterType = "ProductPriceType"
	QueryParamProductPriceTypeFilterTypeArrayOfProductPriceType QueryParamProductPriceTypeFilterType = "arrayOfProductPriceType"
)

// QueryParamProductPriceTypeFilter - Filter by product price type. `recurring` will filter data corresponding to subscriptions creations or renewals. `one_time` will filter data corresponding to one-time purchases.
type QueryParamProductPriceTypeFilter struct {
	ProductPriceType        *components.ProductPriceType  `queryParam:"inline"`
	ArrayOfProductPriceType []components.ProductPriceType `queryParam:"inline"`

	Type QueryParamProductPriceTypeFilterType
}

func CreateQueryParamProductPriceTypeFilterProductPriceType(productPriceType components.ProductPriceType) QueryParamProductPriceTypeFilter {
	typ := QueryParamProductPriceTypeFilterTypeProductPriceType

	return QueryParamProductPriceTypeFilter{
		ProductPriceType: &productPriceType,
		Type:             typ,
	}
}

func CreateQueryParamProductPriceTypeFilterArrayOfProductPriceType(arrayOfProductPriceType []components.ProductPriceType) QueryParamProductPriceTypeFilter {
	typ := QueryParamProductPriceTypeFilterTypeArrayOfProductPriceType

	return QueryParamProductPriceTypeFilter{
		ArrayOfProductPriceType: arrayOfProductPriceType,
		Type:                    typ,
	}
}

func (u *QueryParamProductPriceTypeFilter) UnmarshalJSON(data []byte) error {

	var productPriceType components.ProductPriceType = components.ProductPriceType("")
	if err := utils.UnmarshalJSON(data, &productPriceType, "", true, true); err == nil {
		u.ProductPriceType = &productPriceType
		u.Type = QueryParamProductPriceTypeFilterTypeProductPriceType
		return nil
	}

	var arrayOfProductPriceType []components.ProductPriceType = []components.ProductPriceType{}
	if err := utils.UnmarshalJSON(data, &arrayOfProductPriceType, "", true, true); err == nil {
		u.ArrayOfProductPriceType = arrayOfProductPriceType
		u.Type = QueryParamProductPriceTypeFilterTypeArrayOfProductPriceType
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for QueryParamProductPriceTypeFilter", string(data))
}

func (u QueryParamProductPriceTypeFilter) MarshalJSON() ([]byte, error) {
	if u.ProductPriceType != nil {
		return utils.MarshalJSON(u.ProductPriceType, "", true)
	}

	if u.ArrayOfProductPriceType != nil {
		return utils.MarshalJSON(u.ArrayOfProductPriceType, "", true)
	}

	return nil, errors.New("could not marshal union type QueryParamProductPriceTypeFilter: all fields are null")
}

type MetricsGetRequest struct {
	// Start date.
	StartDate types.Date `queryParam:"style=form,explode=true,name=start_date"`
	// End date.
	EndDate types.Date `queryParam:"style=form,explode=true,name=end_date"`
	// Interval between two timestamps.
	Interval components.Interval `queryParam:"style=form,explode=true,name=interval"`
	// Filter by organization ID.
	OrganizationID *MetricsGetQueryParamOrganizationIDFilter `queryParam:"style=form,explode=true,name=organization_id"`
	// Filter by product ID.
	ProductID *MetricsGetQueryParamProductIDFilter `queryParam:"style=form,explode=true,name=product_id"`
	// Filter by product price type. `recurring` will filter data corresponding to subscriptions creations or renewals. `one_time` will filter data corresponding to one-time purchases.
	ProductPriceType *QueryParamProductPriceTypeFilter `queryParam:"style=form,explode=true,name=product_price_type"`
}

func (m MetricsGetRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MetricsGetRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *MetricsGetRequest) GetStartDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.StartDate
}

func (o *MetricsGetRequest) GetEndDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.EndDate
}

func (o *MetricsGetRequest) GetInterval() components.Interval {
	if o == nil {
		return components.Interval("")
	}
	return o.Interval
}

func (o *MetricsGetRequest) GetOrganizationID() *MetricsGetQueryParamOrganizationIDFilter {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *MetricsGetRequest) GetProductID() *MetricsGetQueryParamProductIDFilter {
	if o == nil {
		return nil
	}
	return o.ProductID
}

func (o *MetricsGetRequest) GetProductPriceType() *QueryParamProductPriceTypeFilter {
	if o == nil {
		return nil
	}
	return o.ProductPriceType
}

type MetricsGetResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful Response
	MetricsResponse *components.MetricsResponse
}

func (o *MetricsGetResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *MetricsGetResponse) GetMetricsResponse() *components.MetricsResponse {
	if o == nil {
		return nil
	}
	return o.MetricsResponse
}
