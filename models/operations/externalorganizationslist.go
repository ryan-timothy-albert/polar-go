// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"polar/internal/utils"
	"polar/models/components"
)

type PlatformFilterType string

const (
	PlatformFilterTypePlatforms        PlatformFilterType = "Platforms"
	PlatformFilterTypeArrayOfPlatforms PlatformFilterType = "arrayOfPlatforms"
)

// PlatformFilter - Filter by platform.
type PlatformFilter struct {
	Platforms        *components.Platforms  `queryParam:"inline"`
	ArrayOfPlatforms []components.Platforms `queryParam:"inline"`

	Type PlatformFilterType
}

func CreatePlatformFilterPlatforms(platforms components.Platforms) PlatformFilter {
	typ := PlatformFilterTypePlatforms

	return PlatformFilter{
		Platforms: &platforms,
		Type:      typ,
	}
}

func CreatePlatformFilterArrayOfPlatforms(arrayOfPlatforms []components.Platforms) PlatformFilter {
	typ := PlatformFilterTypeArrayOfPlatforms

	return PlatformFilter{
		ArrayOfPlatforms: arrayOfPlatforms,
		Type:             typ,
	}
}

func (u *PlatformFilter) UnmarshalJSON(data []byte) error {

	var platforms components.Platforms = components.Platforms("")
	if err := utils.UnmarshalJSON(data, &platforms, "", true, true); err == nil {
		u.Platforms = &platforms
		u.Type = PlatformFilterTypePlatforms
		return nil
	}

	var arrayOfPlatforms []components.Platforms = []components.Platforms{}
	if err := utils.UnmarshalJSON(data, &arrayOfPlatforms, "", true, true); err == nil {
		u.ArrayOfPlatforms = arrayOfPlatforms
		u.Type = PlatformFilterTypeArrayOfPlatforms
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PlatformFilter", string(data))
}

func (u PlatformFilter) MarshalJSON() ([]byte, error) {
	if u.Platforms != nil {
		return utils.MarshalJSON(u.Platforms, "", true)
	}

	if u.ArrayOfPlatforms != nil {
		return utils.MarshalJSON(u.ArrayOfPlatforms, "", true)
	}

	return nil, errors.New("could not marshal union type PlatformFilter: all fields are null")
}

type RepositoryNameFilterType string

const (
	RepositoryNameFilterTypeStr        RepositoryNameFilterType = "str"
	RepositoryNameFilterTypeArrayOfStr RepositoryNameFilterType = "arrayOfStr"
)

// RepositoryNameFilter - Filter by name.
type RepositoryNameFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type RepositoryNameFilterType
}

func CreateRepositoryNameFilterStr(str string) RepositoryNameFilter {
	typ := RepositoryNameFilterTypeStr

	return RepositoryNameFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateRepositoryNameFilterArrayOfStr(arrayOfStr []string) RepositoryNameFilter {
	typ := RepositoryNameFilterTypeArrayOfStr

	return RepositoryNameFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *RepositoryNameFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = RepositoryNameFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = RepositoryNameFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RepositoryNameFilter", string(data))
}

func (u RepositoryNameFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type RepositoryNameFilter: all fields are null")
}

type OrganizationIDFilterType string

const (
	OrganizationIDFilterTypeStr        OrganizationIDFilterType = "str"
	OrganizationIDFilterTypeArrayOfStr OrganizationIDFilterType = "arrayOfStr"
)

// OrganizationIDFilter - Filter by organization ID.
type OrganizationIDFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type OrganizationIDFilterType
}

func CreateOrganizationIDFilterStr(str string) OrganizationIDFilter {
	typ := OrganizationIDFilterTypeStr

	return OrganizationIDFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateOrganizationIDFilterArrayOfStr(arrayOfStr []string) OrganizationIDFilter {
	typ := OrganizationIDFilterTypeArrayOfStr

	return OrganizationIDFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *OrganizationIDFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = OrganizationIDFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = OrganizationIDFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OrganizationIDFilter", string(data))
}

func (u OrganizationIDFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type OrganizationIDFilter: all fields are null")
}

type ExternalOrganizationsListRequest struct {
	// Filter by platform.
	Platform *PlatformFilter `queryParam:"style=form,explode=true,name=platform"`
	// Filter by name.
	Name *RepositoryNameFilter `queryParam:"style=form,explode=true,name=name"`
	// Filter by organization ID.
	OrganizationID *OrganizationIDFilter `queryParam:"style=form,explode=true,name=organization_id"`
	// Page number, defaults to 1.
	Page *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Size of a page, defaults to 10. Maximum is 100.
	Limit *int64 `default:"10" queryParam:"style=form,explode=true,name=limit"`
	// Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
	Sorting []components.ExternalOrganizationSortProperty `queryParam:"style=form,explode=true,name=sorting"`
}

func (e ExternalOrganizationsListRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *ExternalOrganizationsListRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ExternalOrganizationsListRequest) GetPlatform() *PlatformFilter {
	if o == nil {
		return nil
	}
	return o.Platform
}

func (o *ExternalOrganizationsListRequest) GetName() *RepositoryNameFilter {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ExternalOrganizationsListRequest) GetOrganizationID() *OrganizationIDFilter {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *ExternalOrganizationsListRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ExternalOrganizationsListRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ExternalOrganizationsListRequest) GetSorting() []components.ExternalOrganizationSortProperty {
	if o == nil {
		return nil
	}
	return o.Sorting
}

type ExternalOrganizationsListResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful Response
	ListResourceExternalOrganization *components.ListResourceExternalOrganization

	Next func() (*ExternalOrganizationsListResponse, error)
}

func (o *ExternalOrganizationsListResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ExternalOrganizationsListResponse) GetListResourceExternalOrganization() *components.ListResourceExternalOrganization {
	if o == nil {
		return nil
	}
	return o.ListResourceExternalOrganization
}
