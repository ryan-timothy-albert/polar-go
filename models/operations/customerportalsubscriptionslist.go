// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
	"github.com/polarsource/polar-go/models/components"
)

type CustomerPortalSubscriptionsListQueryParamOrganizationIDFilterType string

const (
	CustomerPortalSubscriptionsListQueryParamOrganizationIDFilterTypeStr        CustomerPortalSubscriptionsListQueryParamOrganizationIDFilterType = "str"
	CustomerPortalSubscriptionsListQueryParamOrganizationIDFilterTypeArrayOfStr CustomerPortalSubscriptionsListQueryParamOrganizationIDFilterType = "arrayOfStr"
)

// CustomerPortalSubscriptionsListQueryParamOrganizationIDFilter - Filter by organization ID.
type CustomerPortalSubscriptionsListQueryParamOrganizationIDFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type CustomerPortalSubscriptionsListQueryParamOrganizationIDFilterType
}

func CreateCustomerPortalSubscriptionsListQueryParamOrganizationIDFilterStr(str string) CustomerPortalSubscriptionsListQueryParamOrganizationIDFilter {
	typ := CustomerPortalSubscriptionsListQueryParamOrganizationIDFilterTypeStr

	return CustomerPortalSubscriptionsListQueryParamOrganizationIDFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateCustomerPortalSubscriptionsListQueryParamOrganizationIDFilterArrayOfStr(arrayOfStr []string) CustomerPortalSubscriptionsListQueryParamOrganizationIDFilter {
	typ := CustomerPortalSubscriptionsListQueryParamOrganizationIDFilterTypeArrayOfStr

	return CustomerPortalSubscriptionsListQueryParamOrganizationIDFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CustomerPortalSubscriptionsListQueryParamOrganizationIDFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CustomerPortalSubscriptionsListQueryParamOrganizationIDFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CustomerPortalSubscriptionsListQueryParamOrganizationIDFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomerPortalSubscriptionsListQueryParamOrganizationIDFilter", string(data))
}

func (u CustomerPortalSubscriptionsListQueryParamOrganizationIDFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CustomerPortalSubscriptionsListQueryParamOrganizationIDFilter: all fields are null")
}

type CustomerPortalSubscriptionsListQueryParamProductIDFilterType string

const (
	CustomerPortalSubscriptionsListQueryParamProductIDFilterTypeStr        CustomerPortalSubscriptionsListQueryParamProductIDFilterType = "str"
	CustomerPortalSubscriptionsListQueryParamProductIDFilterTypeArrayOfStr CustomerPortalSubscriptionsListQueryParamProductIDFilterType = "arrayOfStr"
)

// CustomerPortalSubscriptionsListQueryParamProductIDFilter - Filter by product ID.
type CustomerPortalSubscriptionsListQueryParamProductIDFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type CustomerPortalSubscriptionsListQueryParamProductIDFilterType
}

func CreateCustomerPortalSubscriptionsListQueryParamProductIDFilterStr(str string) CustomerPortalSubscriptionsListQueryParamProductIDFilter {
	typ := CustomerPortalSubscriptionsListQueryParamProductIDFilterTypeStr

	return CustomerPortalSubscriptionsListQueryParamProductIDFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateCustomerPortalSubscriptionsListQueryParamProductIDFilterArrayOfStr(arrayOfStr []string) CustomerPortalSubscriptionsListQueryParamProductIDFilter {
	typ := CustomerPortalSubscriptionsListQueryParamProductIDFilterTypeArrayOfStr

	return CustomerPortalSubscriptionsListQueryParamProductIDFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CustomerPortalSubscriptionsListQueryParamProductIDFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CustomerPortalSubscriptionsListQueryParamProductIDFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CustomerPortalSubscriptionsListQueryParamProductIDFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomerPortalSubscriptionsListQueryParamProductIDFilter", string(data))
}

func (u CustomerPortalSubscriptionsListQueryParamProductIDFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CustomerPortalSubscriptionsListQueryParamProductIDFilter: all fields are null")
}

type CustomerPortalSubscriptionsListRequest struct {
	// Filter by organization ID.
	OrganizationID *CustomerPortalSubscriptionsListQueryParamOrganizationIDFilter `queryParam:"style=form,explode=true,name=organization_id"`
	// Filter by product ID.
	ProductID *CustomerPortalSubscriptionsListQueryParamProductIDFilter `queryParam:"style=form,explode=true,name=product_id"`
	// Filter by active or cancelled subscription.
	Active *bool `queryParam:"style=form,explode=true,name=active"`
	// Search by product or organization name.
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Page number, defaults to 1.
	Page *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Size of a page, defaults to 10. Maximum is 100.
	Limit *int64 `default:"10" queryParam:"style=form,explode=true,name=limit"`
	// Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
	Sorting []components.CustomerSubscriptionSortProperty `queryParam:"style=form,explode=true,name=sorting"`
}

func (c CustomerPortalSubscriptionsListRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CustomerPortalSubscriptionsListRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CustomerPortalSubscriptionsListRequest) GetOrganizationID() *CustomerPortalSubscriptionsListQueryParamOrganizationIDFilter {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *CustomerPortalSubscriptionsListRequest) GetProductID() *CustomerPortalSubscriptionsListQueryParamProductIDFilter {
	if o == nil {
		return nil
	}
	return o.ProductID
}

func (o *CustomerPortalSubscriptionsListRequest) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *CustomerPortalSubscriptionsListRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *CustomerPortalSubscriptionsListRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *CustomerPortalSubscriptionsListRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *CustomerPortalSubscriptionsListRequest) GetSorting() []components.CustomerSubscriptionSortProperty {
	if o == nil {
		return nil
	}
	return o.Sorting
}

type CustomerPortalSubscriptionsListResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful Response
	ListResourceCustomerSubscription *components.ListResourceCustomerSubscription

	Next func() (*CustomerPortalSubscriptionsListResponse, error)
}

func (o *CustomerPortalSubscriptionsListResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CustomerPortalSubscriptionsListResponse) GetListResourceCustomerSubscription() *components.ListResourceCustomerSubscription {
	if o == nil {
		return nil
	}
	return o.ListResourceCustomerSubscription
}
