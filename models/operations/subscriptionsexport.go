// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
	"github.com/polarsource/polar-go/models/components"
)

type OrganizationIDType string

const (
	OrganizationIDTypeStr        OrganizationIDType = "str"
	OrganizationIDTypeArrayOfStr OrganizationIDType = "arrayOfStr"
)

// OrganizationID - Filter by organization ID.
type OrganizationID struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type OrganizationIDType
}

func CreateOrganizationIDStr(str string) OrganizationID {
	typ := OrganizationIDTypeStr

	return OrganizationID{
		Str:  &str,
		Type: typ,
	}
}

func CreateOrganizationIDArrayOfStr(arrayOfStr []string) OrganizationID {
	typ := OrganizationIDTypeArrayOfStr

	return OrganizationID{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *OrganizationID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = OrganizationIDTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = OrganizationIDTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OrganizationID", string(data))
}

func (u OrganizationID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type OrganizationID: all fields are null")
}

type SubscriptionsExportRequest struct {
	// Filter by organization ID.
	OrganizationID *OrganizationID `queryParam:"style=form,explode=true,name=organization_id"`
}

func (o *SubscriptionsExportRequest) GetOrganizationID() *OrganizationID {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

type SubscriptionsExportResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful Response
	Any any
}

func (o *SubscriptionsExportResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *SubscriptionsExportResponse) GetAny() any {
	if o == nil {
		return nil
	}
	return o.Any
}
