// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
	"github.com/polarsource/polar-go/models/components"
)

type Oauth2UserinfoResponseOauth2UserinfoType string

const (
	Oauth2UserinfoResponseOauth2UserinfoTypeUserInfoUser         Oauth2UserinfoResponseOauth2UserinfoType = "UserInfoUser"
	Oauth2UserinfoResponseOauth2UserinfoTypeUserInfoOrganization Oauth2UserinfoResponseOauth2UserinfoType = "UserInfoOrganization"
)

// Oauth2UserinfoResponseOauth2Userinfo - Successful Response
type Oauth2UserinfoResponseOauth2Userinfo struct {
	UserInfoUser         *components.UserInfoUser         `queryParam:"inline"`
	UserInfoOrganization *components.UserInfoOrganization `queryParam:"inline"`

	Type Oauth2UserinfoResponseOauth2UserinfoType
}

func CreateOauth2UserinfoResponseOauth2UserinfoUserInfoUser(userInfoUser components.UserInfoUser) Oauth2UserinfoResponseOauth2Userinfo {
	typ := Oauth2UserinfoResponseOauth2UserinfoTypeUserInfoUser

	return Oauth2UserinfoResponseOauth2Userinfo{
		UserInfoUser: &userInfoUser,
		Type:         typ,
	}
}

func CreateOauth2UserinfoResponseOauth2UserinfoUserInfoOrganization(userInfoOrganization components.UserInfoOrganization) Oauth2UserinfoResponseOauth2Userinfo {
	typ := Oauth2UserinfoResponseOauth2UserinfoTypeUserInfoOrganization

	return Oauth2UserinfoResponseOauth2Userinfo{
		UserInfoOrganization: &userInfoOrganization,
		Type:                 typ,
	}
}

func (u *Oauth2UserinfoResponseOauth2Userinfo) UnmarshalJSON(data []byte) error {

	var userInfoOrganization components.UserInfoOrganization = components.UserInfoOrganization{}
	if err := utils.UnmarshalJSON(data, &userInfoOrganization, "", true, true); err == nil {
		u.UserInfoOrganization = &userInfoOrganization
		u.Type = Oauth2UserinfoResponseOauth2UserinfoTypeUserInfoOrganization
		return nil
	}

	var userInfoUser components.UserInfoUser = components.UserInfoUser{}
	if err := utils.UnmarshalJSON(data, &userInfoUser, "", true, true); err == nil {
		u.UserInfoUser = &userInfoUser
		u.Type = Oauth2UserinfoResponseOauth2UserinfoTypeUserInfoUser
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Oauth2UserinfoResponseOauth2Userinfo", string(data))
}

func (u Oauth2UserinfoResponseOauth2Userinfo) MarshalJSON() ([]byte, error) {
	if u.UserInfoUser != nil {
		return utils.MarshalJSON(u.UserInfoUser, "", true)
	}

	if u.UserInfoOrganization != nil {
		return utils.MarshalJSON(u.UserInfoOrganization, "", true)
	}

	return nil, errors.New("could not marshal union type Oauth2UserinfoResponseOauth2Userinfo: all fields are null")
}

type Oauth2UserinfoResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful Response
	ResponseOauth2Userinfo *Oauth2UserinfoResponseOauth2Userinfo
}

func (o *Oauth2UserinfoResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *Oauth2UserinfoResponse) GetResponseOauth2Userinfo() *Oauth2UserinfoResponseOauth2Userinfo {
	if o == nil {
		return nil
	}
	return o.ResponseOauth2Userinfo
}
