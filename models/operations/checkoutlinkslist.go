// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"polar/internal/utils"
	"polar/models/components"
)

type CheckoutLinksListQueryParamOrganizationIDFilterType string

const (
	CheckoutLinksListQueryParamOrganizationIDFilterTypeStr        CheckoutLinksListQueryParamOrganizationIDFilterType = "str"
	CheckoutLinksListQueryParamOrganizationIDFilterTypeArrayOfStr CheckoutLinksListQueryParamOrganizationIDFilterType = "arrayOfStr"
)

// CheckoutLinksListQueryParamOrganizationIDFilter - Filter by organization ID.
type CheckoutLinksListQueryParamOrganizationIDFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type CheckoutLinksListQueryParamOrganizationIDFilterType
}

func CreateCheckoutLinksListQueryParamOrganizationIDFilterStr(str string) CheckoutLinksListQueryParamOrganizationIDFilter {
	typ := CheckoutLinksListQueryParamOrganizationIDFilterTypeStr

	return CheckoutLinksListQueryParamOrganizationIDFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateCheckoutLinksListQueryParamOrganizationIDFilterArrayOfStr(arrayOfStr []string) CheckoutLinksListQueryParamOrganizationIDFilter {
	typ := CheckoutLinksListQueryParamOrganizationIDFilterTypeArrayOfStr

	return CheckoutLinksListQueryParamOrganizationIDFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CheckoutLinksListQueryParamOrganizationIDFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CheckoutLinksListQueryParamOrganizationIDFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CheckoutLinksListQueryParamOrganizationIDFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CheckoutLinksListQueryParamOrganizationIDFilter", string(data))
}

func (u CheckoutLinksListQueryParamOrganizationIDFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CheckoutLinksListQueryParamOrganizationIDFilter: all fields are null")
}

type CheckoutLinksListQueryParamProductIDFilterType string

const (
	CheckoutLinksListQueryParamProductIDFilterTypeStr        CheckoutLinksListQueryParamProductIDFilterType = "str"
	CheckoutLinksListQueryParamProductIDFilterTypeArrayOfStr CheckoutLinksListQueryParamProductIDFilterType = "arrayOfStr"
)

// CheckoutLinksListQueryParamProductIDFilter - Filter by product ID.
type CheckoutLinksListQueryParamProductIDFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type CheckoutLinksListQueryParamProductIDFilterType
}

func CreateCheckoutLinksListQueryParamProductIDFilterStr(str string) CheckoutLinksListQueryParamProductIDFilter {
	typ := CheckoutLinksListQueryParamProductIDFilterTypeStr

	return CheckoutLinksListQueryParamProductIDFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateCheckoutLinksListQueryParamProductIDFilterArrayOfStr(arrayOfStr []string) CheckoutLinksListQueryParamProductIDFilter {
	typ := CheckoutLinksListQueryParamProductIDFilterTypeArrayOfStr

	return CheckoutLinksListQueryParamProductIDFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CheckoutLinksListQueryParamProductIDFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CheckoutLinksListQueryParamProductIDFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CheckoutLinksListQueryParamProductIDFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CheckoutLinksListQueryParamProductIDFilter", string(data))
}

func (u CheckoutLinksListQueryParamProductIDFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CheckoutLinksListQueryParamProductIDFilter: all fields are null")
}

type CheckoutLinksListRequest struct {
	// Filter by organization ID.
	OrganizationID *CheckoutLinksListQueryParamOrganizationIDFilter `queryParam:"style=form,explode=true,name=organization_id"`
	// Filter by product ID.
	ProductID *CheckoutLinksListQueryParamProductIDFilter `queryParam:"style=form,explode=true,name=product_id"`
	// Page number, defaults to 1.
	Page *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Size of a page, defaults to 10. Maximum is 100.
	Limit *int64 `default:"10" queryParam:"style=form,explode=true,name=limit"`
	// Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
	Sorting []components.CheckoutLinkSortProperty `queryParam:"style=form,explode=true,name=sorting"`
}

func (c CheckoutLinksListRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CheckoutLinksListRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CheckoutLinksListRequest) GetOrganizationID() *CheckoutLinksListQueryParamOrganizationIDFilter {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *CheckoutLinksListRequest) GetProductID() *CheckoutLinksListQueryParamProductIDFilter {
	if o == nil {
		return nil
	}
	return o.ProductID
}

func (o *CheckoutLinksListRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *CheckoutLinksListRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *CheckoutLinksListRequest) GetSorting() []components.CheckoutLinkSortProperty {
	if o == nil {
		return nil
	}
	return o.Sorting
}

type CheckoutLinksListResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful Response
	ListResourceCheckoutLink *components.ListResourceCheckoutLink

	Next func() (*CheckoutLinksListResponse, error)
}

func (o *CheckoutLinksListResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CheckoutLinksListResponse) GetListResourceCheckoutLink() *components.ListResourceCheckoutLink {
	if o == nil {
		return nil
	}
	return o.ListResourceCheckoutLink
}
