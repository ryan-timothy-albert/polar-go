// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"polar/internal/utils"
	"polar/models/components"
)

type FilesUpdateRequest struct {
	// The file ID.
	ID        string               `pathParam:"style=simple,explode=false,name=id"`
	FilePatch components.FilePatch `request:"mediaType=application/json"`
}

func (o *FilesUpdateRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *FilesUpdateRequest) GetFilePatch() components.FilePatch {
	if o == nil {
		return components.FilePatch{}
	}
	return o.FilePatch
}

type FilesUpdateResponseFilesUpdateType string

const (
	FilesUpdateResponseFilesUpdateTypeDownloadable       FilesUpdateResponseFilesUpdateType = "downloadable"
	FilesUpdateResponseFilesUpdateTypeProductMedia       FilesUpdateResponseFilesUpdateType = "product_media"
	FilesUpdateResponseFilesUpdateTypeOrganizationAvatar FilesUpdateResponseFilesUpdateType = "organization_avatar"
)

// FilesUpdateResponseFilesUpdate - File updated.
type FilesUpdateResponseFilesUpdate struct {
	DownloadableFileRead       *components.DownloadableFileRead       `queryParam:"inline"`
	ProductMediaFileRead       *components.ProductMediaFileRead       `queryParam:"inline"`
	OrganizationAvatarFileRead *components.OrganizationAvatarFileRead `queryParam:"inline"`

	Type FilesUpdateResponseFilesUpdateType
}

func CreateFilesUpdateResponseFilesUpdateDownloadable(downloadable components.DownloadableFileRead) FilesUpdateResponseFilesUpdate {
	typ := FilesUpdateResponseFilesUpdateTypeDownloadable

	return FilesUpdateResponseFilesUpdate{
		DownloadableFileRead: &downloadable,
		Type:                 typ,
	}
}

func CreateFilesUpdateResponseFilesUpdateProductMedia(productMedia components.ProductMediaFileRead) FilesUpdateResponseFilesUpdate {
	typ := FilesUpdateResponseFilesUpdateTypeProductMedia

	return FilesUpdateResponseFilesUpdate{
		ProductMediaFileRead: &productMedia,
		Type:                 typ,
	}
}

func CreateFilesUpdateResponseFilesUpdateOrganizationAvatar(organizationAvatar components.OrganizationAvatarFileRead) FilesUpdateResponseFilesUpdate {
	typ := FilesUpdateResponseFilesUpdateTypeOrganizationAvatar

	return FilesUpdateResponseFilesUpdate{
		OrganizationAvatarFileRead: &organizationAvatar,
		Type:                       typ,
	}
}

func (u *FilesUpdateResponseFilesUpdate) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Service string `json:"service"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Service {
	case "downloadable":
		downloadableFileRead := new(components.DownloadableFileRead)
		if err := utils.UnmarshalJSON(data, &downloadableFileRead, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Service == downloadable) type components.DownloadableFileRead within FilesUpdateResponseFilesUpdate: %w", string(data), err)
		}

		u.DownloadableFileRead = downloadableFileRead
		u.Type = FilesUpdateResponseFilesUpdateTypeDownloadable
		return nil
	case "product_media":
		productMediaFileRead := new(components.ProductMediaFileRead)
		if err := utils.UnmarshalJSON(data, &productMediaFileRead, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Service == product_media) type components.ProductMediaFileRead within FilesUpdateResponseFilesUpdate: %w", string(data), err)
		}

		u.ProductMediaFileRead = productMediaFileRead
		u.Type = FilesUpdateResponseFilesUpdateTypeProductMedia
		return nil
	case "organization_avatar":
		organizationAvatarFileRead := new(components.OrganizationAvatarFileRead)
		if err := utils.UnmarshalJSON(data, &organizationAvatarFileRead, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Service == organization_avatar) type components.OrganizationAvatarFileRead within FilesUpdateResponseFilesUpdate: %w", string(data), err)
		}

		u.OrganizationAvatarFileRead = organizationAvatarFileRead
		u.Type = FilesUpdateResponseFilesUpdateTypeOrganizationAvatar
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FilesUpdateResponseFilesUpdate", string(data))
}

func (u FilesUpdateResponseFilesUpdate) MarshalJSON() ([]byte, error) {
	if u.DownloadableFileRead != nil {
		return utils.MarshalJSON(u.DownloadableFileRead, "", true)
	}

	if u.ProductMediaFileRead != nil {
		return utils.MarshalJSON(u.ProductMediaFileRead, "", true)
	}

	if u.OrganizationAvatarFileRead != nil {
		return utils.MarshalJSON(u.OrganizationAvatarFileRead, "", true)
	}

	return nil, errors.New("could not marshal union type FilesUpdateResponseFilesUpdate: all fields are null")
}

type FilesUpdateResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// File updated.
	ResponseFilesUpdate *FilesUpdateResponseFilesUpdate
}

func (o *FilesUpdateResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *FilesUpdateResponse) GetResponseFilesUpdate() *FilesUpdateResponseFilesUpdate {
	if o == nil {
		return nil
	}
	return o.ResponseFilesUpdate
}

func (o *FilesUpdateResponse) GetResponseFilesUpdateDownloadable() *components.DownloadableFileRead {
	if v := o.GetResponseFilesUpdate(); v != nil {
		return v.DownloadableFileRead
	}
	return nil
}

func (o *FilesUpdateResponse) GetResponseFilesUpdateProductMedia() *components.ProductMediaFileRead {
	if v := o.GetResponseFilesUpdate(); v != nil {
		return v.ProductMediaFileRead
	}
	return nil
}

func (o *FilesUpdateResponse) GetResponseFilesUpdateOrganizationAvatar() *components.OrganizationAvatarFileRead {
	if v := o.GetResponseFilesUpdate(); v != nil {
		return v.OrganizationAvatarFileRead
	}
	return nil
}
