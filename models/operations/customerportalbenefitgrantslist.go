// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/polarsource/polar-go/internal/utils"
	"github.com/polarsource/polar-go/models/components"
)

type QueryParamBenefitTypeFilterType string

const (
	QueryParamBenefitTypeFilterTypeBenefitType        QueryParamBenefitTypeFilterType = "BenefitType"
	QueryParamBenefitTypeFilterTypeArrayOfBenefitType QueryParamBenefitTypeFilterType = "arrayOfBenefitType"
)

// QueryParamBenefitTypeFilter - Filter by benefit type.
type QueryParamBenefitTypeFilter struct {
	BenefitType        *components.BenefitType  `queryParam:"inline"`
	ArrayOfBenefitType []components.BenefitType `queryParam:"inline"`

	Type QueryParamBenefitTypeFilterType
}

func CreateQueryParamBenefitTypeFilterBenefitType(benefitType components.BenefitType) QueryParamBenefitTypeFilter {
	typ := QueryParamBenefitTypeFilterTypeBenefitType

	return QueryParamBenefitTypeFilter{
		BenefitType: &benefitType,
		Type:        typ,
	}
}

func CreateQueryParamBenefitTypeFilterArrayOfBenefitType(arrayOfBenefitType []components.BenefitType) QueryParamBenefitTypeFilter {
	typ := QueryParamBenefitTypeFilterTypeArrayOfBenefitType

	return QueryParamBenefitTypeFilter{
		ArrayOfBenefitType: arrayOfBenefitType,
		Type:               typ,
	}
}

func (u *QueryParamBenefitTypeFilter) UnmarshalJSON(data []byte) error {

	var benefitType components.BenefitType = components.BenefitType("")
	if err := utils.UnmarshalJSON(data, &benefitType, "", true, true); err == nil {
		u.BenefitType = &benefitType
		u.Type = QueryParamBenefitTypeFilterTypeBenefitType
		return nil
	}

	var arrayOfBenefitType []components.BenefitType = []components.BenefitType{}
	if err := utils.UnmarshalJSON(data, &arrayOfBenefitType, "", true, true); err == nil {
		u.ArrayOfBenefitType = arrayOfBenefitType
		u.Type = QueryParamBenefitTypeFilterTypeArrayOfBenefitType
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for QueryParamBenefitTypeFilter", string(data))
}

func (u QueryParamBenefitTypeFilter) MarshalJSON() ([]byte, error) {
	if u.BenefitType != nil {
		return utils.MarshalJSON(u.BenefitType, "", true)
	}

	if u.ArrayOfBenefitType != nil {
		return utils.MarshalJSON(u.ArrayOfBenefitType, "", true)
	}

	return nil, errors.New("could not marshal union type QueryParamBenefitTypeFilter: all fields are null")
}

type CustomerPortalBenefitGrantsListQueryParamBenefitIDFilterType string

const (
	CustomerPortalBenefitGrantsListQueryParamBenefitIDFilterTypeStr        CustomerPortalBenefitGrantsListQueryParamBenefitIDFilterType = "str"
	CustomerPortalBenefitGrantsListQueryParamBenefitIDFilterTypeArrayOfStr CustomerPortalBenefitGrantsListQueryParamBenefitIDFilterType = "arrayOfStr"
)

// CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter - Filter by benefit ID.
type CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type CustomerPortalBenefitGrantsListQueryParamBenefitIDFilterType
}

func CreateCustomerPortalBenefitGrantsListQueryParamBenefitIDFilterStr(str string) CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter {
	typ := CustomerPortalBenefitGrantsListQueryParamBenefitIDFilterTypeStr

	return CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateCustomerPortalBenefitGrantsListQueryParamBenefitIDFilterArrayOfStr(arrayOfStr []string) CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter {
	typ := CustomerPortalBenefitGrantsListQueryParamBenefitIDFilterTypeArrayOfStr

	return CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CustomerPortalBenefitGrantsListQueryParamBenefitIDFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CustomerPortalBenefitGrantsListQueryParamBenefitIDFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter", string(data))
}

func (u CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter: all fields are null")
}

type CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilterType string

const (
	CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilterTypeStr        CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilterType = "str"
	CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilterTypeArrayOfStr CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilterType = "arrayOfStr"
)

// CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter - Filter by organization ID.
type CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilterType
}

func CreateCustomerPortalBenefitGrantsListQueryParamOrganizationIDFilterStr(str string) CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter {
	typ := CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilterTypeStr

	return CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateCustomerPortalBenefitGrantsListQueryParamOrganizationIDFilterArrayOfStr(arrayOfStr []string) CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter {
	typ := CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilterTypeArrayOfStr

	return CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter", string(data))
}

func (u CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter: all fields are null")
}

type CheckoutIDFilterType string

const (
	CheckoutIDFilterTypeStr        CheckoutIDFilterType = "str"
	CheckoutIDFilterTypeArrayOfStr CheckoutIDFilterType = "arrayOfStr"
)

// CheckoutIDFilter - Filter by checkout ID.
type CheckoutIDFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type CheckoutIDFilterType
}

func CreateCheckoutIDFilterStr(str string) CheckoutIDFilter {
	typ := CheckoutIDFilterTypeStr

	return CheckoutIDFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateCheckoutIDFilterArrayOfStr(arrayOfStr []string) CheckoutIDFilter {
	typ := CheckoutIDFilterTypeArrayOfStr

	return CheckoutIDFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CheckoutIDFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CheckoutIDFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CheckoutIDFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CheckoutIDFilter", string(data))
}

func (u CheckoutIDFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CheckoutIDFilter: all fields are null")
}

type OrderIDFilterType string

const (
	OrderIDFilterTypeStr        OrderIDFilterType = "str"
	OrderIDFilterTypeArrayOfStr OrderIDFilterType = "arrayOfStr"
)

// OrderIDFilter - Filter by order ID.
type OrderIDFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type OrderIDFilterType
}

func CreateOrderIDFilterStr(str string) OrderIDFilter {
	typ := OrderIDFilterTypeStr

	return OrderIDFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateOrderIDFilterArrayOfStr(arrayOfStr []string) OrderIDFilter {
	typ := OrderIDFilterTypeArrayOfStr

	return OrderIDFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *OrderIDFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = OrderIDFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = OrderIDFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OrderIDFilter", string(data))
}

func (u OrderIDFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type OrderIDFilter: all fields are null")
}

type SubscriptionIDFilterType string

const (
	SubscriptionIDFilterTypeStr        SubscriptionIDFilterType = "str"
	SubscriptionIDFilterTypeArrayOfStr SubscriptionIDFilterType = "arrayOfStr"
)

// SubscriptionIDFilter - Filter by subscription ID.
type SubscriptionIDFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type SubscriptionIDFilterType
}

func CreateSubscriptionIDFilterStr(str string) SubscriptionIDFilter {
	typ := SubscriptionIDFilterTypeStr

	return SubscriptionIDFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateSubscriptionIDFilterArrayOfStr(arrayOfStr []string) SubscriptionIDFilter {
	typ := SubscriptionIDFilterTypeArrayOfStr

	return SubscriptionIDFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *SubscriptionIDFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = SubscriptionIDFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = SubscriptionIDFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SubscriptionIDFilter", string(data))
}

func (u SubscriptionIDFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type SubscriptionIDFilter: all fields are null")
}

type CustomerPortalBenefitGrantsListRequest struct {
	// Filter by benefit type.
	TypeFilter *QueryParamBenefitTypeFilter `queryParam:"style=form,explode=true,name=type"`
	// Filter by benefit ID.
	BenefitID *CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter `queryParam:"style=form,explode=true,name=benefit_id"`
	// Filter by organization ID.
	OrganizationID *CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter `queryParam:"style=form,explode=true,name=organization_id"`
	// Filter by checkout ID.
	CheckoutID *CheckoutIDFilter `queryParam:"style=form,explode=true,name=checkout_id"`
	// Filter by order ID.
	OrderID *OrderIDFilter `queryParam:"style=form,explode=true,name=order_id"`
	// Filter by subscription ID.
	SubscriptionID *SubscriptionIDFilter `queryParam:"style=form,explode=true,name=subscription_id"`
	// Page number, defaults to 1.
	Page *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Size of a page, defaults to 10. Maximum is 100.
	Limit *int64 `default:"10" queryParam:"style=form,explode=true,name=limit"`
	// Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
	Sorting []components.CustomerBenefitGrantSortProperty `queryParam:"style=form,explode=true,name=sorting"`
}

func (c CustomerPortalBenefitGrantsListRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CustomerPortalBenefitGrantsListRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CustomerPortalBenefitGrantsListRequest) GetTypeFilter() *QueryParamBenefitTypeFilter {
	if o == nil {
		return nil
	}
	return o.TypeFilter
}

func (o *CustomerPortalBenefitGrantsListRequest) GetBenefitID() *CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter {
	if o == nil {
		return nil
	}
	return o.BenefitID
}

func (o *CustomerPortalBenefitGrantsListRequest) GetOrganizationID() *CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *CustomerPortalBenefitGrantsListRequest) GetCheckoutID() *CheckoutIDFilter {
	if o == nil {
		return nil
	}
	return o.CheckoutID
}

func (o *CustomerPortalBenefitGrantsListRequest) GetOrderID() *OrderIDFilter {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *CustomerPortalBenefitGrantsListRequest) GetSubscriptionID() *SubscriptionIDFilter {
	if o == nil {
		return nil
	}
	return o.SubscriptionID
}

func (o *CustomerPortalBenefitGrantsListRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *CustomerPortalBenefitGrantsListRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *CustomerPortalBenefitGrantsListRequest) GetSorting() []components.CustomerBenefitGrantSortProperty {
	if o == nil {
		return nil
	}
	return o.Sorting
}

type CustomerPortalBenefitGrantsListResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful Response
	ListResourceCustomerBenefitGrant *components.ListResourceCustomerBenefitGrant

	Next func() (*CustomerPortalBenefitGrantsListResponse, error)
}

func (o *CustomerPortalBenefitGrantsListResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CustomerPortalBenefitGrantsListResponse) GetListResourceCustomerBenefitGrant() *components.ListResourceCustomerBenefitGrant {
	if o == nil {
		return nil
	}
	return o.ListResourceCustomerBenefitGrant
}
