// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"polar/internal/utils"
	"polar/models/components"
)

type QueryParamPlatformFilterType string

const (
	QueryParamPlatformFilterTypePlatforms        QueryParamPlatformFilterType = "Platforms"
	QueryParamPlatformFilterTypeArrayOfPlatforms QueryParamPlatformFilterType = "arrayOfPlatforms"
)

// QueryParamPlatformFilter - Filter by platform.
type QueryParamPlatformFilter struct {
	Platforms        *components.Platforms  `queryParam:"inline"`
	ArrayOfPlatforms []components.Platforms `queryParam:"inline"`

	Type QueryParamPlatformFilterType
}

func CreateQueryParamPlatformFilterPlatforms(platforms components.Platforms) QueryParamPlatformFilter {
	typ := QueryParamPlatformFilterTypePlatforms

	return QueryParamPlatformFilter{
		Platforms: &platforms,
		Type:      typ,
	}
}

func CreateQueryParamPlatformFilterArrayOfPlatforms(arrayOfPlatforms []components.Platforms) QueryParamPlatformFilter {
	typ := QueryParamPlatformFilterTypeArrayOfPlatforms

	return QueryParamPlatformFilter{
		ArrayOfPlatforms: arrayOfPlatforms,
		Type:             typ,
	}
}

func (u *QueryParamPlatformFilter) UnmarshalJSON(data []byte) error {

	var platforms components.Platforms = components.Platforms("")
	if err := utils.UnmarshalJSON(data, &platforms, "", true, true); err == nil {
		u.Platforms = &platforms
		u.Type = QueryParamPlatformFilterTypePlatforms
		return nil
	}

	var arrayOfPlatforms []components.Platforms = []components.Platforms{}
	if err := utils.UnmarshalJSON(data, &arrayOfPlatforms, "", true, true); err == nil {
		u.ArrayOfPlatforms = arrayOfPlatforms
		u.Type = QueryParamPlatformFilterTypeArrayOfPlatforms
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for QueryParamPlatformFilter", string(data))
}

func (u QueryParamPlatformFilter) MarshalJSON() ([]byte, error) {
	if u.Platforms != nil {
		return utils.MarshalJSON(u.Platforms, "", true)
	}

	if u.ArrayOfPlatforms != nil {
		return utils.MarshalJSON(u.ArrayOfPlatforms, "", true)
	}

	return nil, errors.New("could not marshal union type QueryParamPlatformFilter: all fields are null")
}

type QueryParamRepositoryNameFilterType string

const (
	QueryParamRepositoryNameFilterTypeStr        QueryParamRepositoryNameFilterType = "str"
	QueryParamRepositoryNameFilterTypeArrayOfStr QueryParamRepositoryNameFilterType = "arrayOfStr"
)

// QueryParamRepositoryNameFilter - Filter by name.
type QueryParamRepositoryNameFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type QueryParamRepositoryNameFilterType
}

func CreateQueryParamRepositoryNameFilterStr(str string) QueryParamRepositoryNameFilter {
	typ := QueryParamRepositoryNameFilterTypeStr

	return QueryParamRepositoryNameFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateQueryParamRepositoryNameFilterArrayOfStr(arrayOfStr []string) QueryParamRepositoryNameFilter {
	typ := QueryParamRepositoryNameFilterTypeArrayOfStr

	return QueryParamRepositoryNameFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *QueryParamRepositoryNameFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = QueryParamRepositoryNameFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = QueryParamRepositoryNameFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for QueryParamRepositoryNameFilter", string(data))
}

func (u QueryParamRepositoryNameFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type QueryParamRepositoryNameFilter: all fields are null")
}

type ExternalOrganizationNameFilterType string

const (
	ExternalOrganizationNameFilterTypeStr        ExternalOrganizationNameFilterType = "str"
	ExternalOrganizationNameFilterTypeArrayOfStr ExternalOrganizationNameFilterType = "arrayOfStr"
)

// ExternalOrganizationNameFilter - Filter by external organization name.
type ExternalOrganizationNameFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type ExternalOrganizationNameFilterType
}

func CreateExternalOrganizationNameFilterStr(str string) ExternalOrganizationNameFilter {
	typ := ExternalOrganizationNameFilterTypeStr

	return ExternalOrganizationNameFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateExternalOrganizationNameFilterArrayOfStr(arrayOfStr []string) ExternalOrganizationNameFilter {
	typ := ExternalOrganizationNameFilterTypeArrayOfStr

	return ExternalOrganizationNameFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *ExternalOrganizationNameFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ExternalOrganizationNameFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = ExternalOrganizationNameFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ExternalOrganizationNameFilter", string(data))
}

func (u ExternalOrganizationNameFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type ExternalOrganizationNameFilter: all fields are null")
}

type QueryParamOrganizationIDFilterType string

const (
	QueryParamOrganizationIDFilterTypeStr        QueryParamOrganizationIDFilterType = "str"
	QueryParamOrganizationIDFilterTypeArrayOfStr QueryParamOrganizationIDFilterType = "arrayOfStr"
)

// QueryParamOrganizationIDFilter - Filter by organization ID.
type QueryParamOrganizationIDFilter struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type QueryParamOrganizationIDFilterType
}

func CreateQueryParamOrganizationIDFilterStr(str string) QueryParamOrganizationIDFilter {
	typ := QueryParamOrganizationIDFilterTypeStr

	return QueryParamOrganizationIDFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateQueryParamOrganizationIDFilterArrayOfStr(arrayOfStr []string) QueryParamOrganizationIDFilter {
	typ := QueryParamOrganizationIDFilterTypeArrayOfStr

	return QueryParamOrganizationIDFilter{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *QueryParamOrganizationIDFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = QueryParamOrganizationIDFilterTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = QueryParamOrganizationIDFilterTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for QueryParamOrganizationIDFilter", string(data))
}

func (u QueryParamOrganizationIDFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type QueryParamOrganizationIDFilter: all fields are null")
}

type RepositoriesListRequest struct {
	// Filter by platform.
	Platform *QueryParamPlatformFilter `queryParam:"style=form,explode=true,name=platform"`
	// Filter by name.
	Name *QueryParamRepositoryNameFilter `queryParam:"style=form,explode=true,name=name"`
	// Filter by external organization name.
	ExternalOrganizationName *ExternalOrganizationNameFilter `queryParam:"style=form,explode=true,name=external_organization_name"`
	// Filter by private status.
	IsPrivate *bool `queryParam:"style=form,explode=true,name=is_private"`
	// Filter by organization ID.
	OrganizationID *QueryParamOrganizationIDFilter `queryParam:"style=form,explode=true,name=organization_id"`
	// Page number, defaults to 1.
	Page *int64 `default:"1" queryParam:"style=form,explode=true,name=page"`
	// Size of a page, defaults to 10. Maximum is 100.
	Limit *int64 `default:"10" queryParam:"style=form,explode=true,name=limit"`
	// Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
	Sorting []components.RepositorySortProperty `queryParam:"style=form,explode=true,name=sorting"`
}

func (r RepositoriesListRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RepositoriesListRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RepositoriesListRequest) GetPlatform() *QueryParamPlatformFilter {
	if o == nil {
		return nil
	}
	return o.Platform
}

func (o *RepositoriesListRequest) GetName() *QueryParamRepositoryNameFilter {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *RepositoriesListRequest) GetExternalOrganizationName() *ExternalOrganizationNameFilter {
	if o == nil {
		return nil
	}
	return o.ExternalOrganizationName
}

func (o *RepositoriesListRequest) GetIsPrivate() *bool {
	if o == nil {
		return nil
	}
	return o.IsPrivate
}

func (o *RepositoriesListRequest) GetOrganizationID() *QueryParamOrganizationIDFilter {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *RepositoriesListRequest) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *RepositoriesListRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *RepositoriesListRequest) GetSorting() []components.RepositorySortProperty {
	if o == nil {
		return nil
	}
	return o.Sorting
}

type RepositoriesListResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful Response
	ListResourceRepository *components.ListResourceRepository

	Next func() (*RepositoriesListResponse, error)
}

func (o *RepositoriesListResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *RepositoriesListResponse) GetListResourceRepository() *components.ListResourceRepository {
	if o == nil {
		return nil
	}
	return o.ListResourceRepository
}
